name: opendj
on:
  push:
    branches:
      - master
      - main
    paths:
      - "helm/**"
  pull_request:
    branches:
      - master
      - main
    paths:
      - "helm/**"
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install microk8s
      id: microk8s
      run: |
        ip=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
        echo "::set-output name=ip::$ip"
        sudo snap install microk8s --classic
        sudo snap alias microk8s.kubectl kubectl
        sudo microk8s.status --wait-ready
        sudo microk8s.enable dns registry ingress

    - name: Install helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        sudo helm version


    - name: Test Janssen authorization server with LDAP backend
      id: test_kubernetes
      run: |
          wget https://raw.githubusercontent.com/mo-auto/scripts/main/set_microk8s_kube_config.py && chmod u+x set_microk8s_kube_config.py && sudo python3 ./set_microk8s_kube_config.py
          sudo kubectl create ns jans
          sudo kubectl get po
          sudo helm install jans -f charts/jans/values.yaml charts/jans -n jans --set global.lbIp=${{ steps.microk8s.outputs.ip }} --set global.provisioner="microk8s.io/hostpath" --set global.cnPersistenceType="ldap"
          sleep 30
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=600s deploy/jans-auth-server || sudo kubectl logs -l APP_NAME=auth-server -c jans-auth-server -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-client-api || sudo kubectl logs -l APP_NAME=client-api -c jans-client-api -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-fido2 || sudo kubectl logs -l APP_NAME=fido2 -c jans-fido2 -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-scim || sudo kubectl logs -l APP_NAME=scim -c jans-scim -n jans || echo "Not Found"
          sudo kubectl get po -n jans

