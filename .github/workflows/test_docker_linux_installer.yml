name: Test Linux installer
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "jans-linux-setup/**"
  pull_request:
    branches:
      - main
    paths:
      - "jans-linux-setup/**"
permissions:
  checks: write
  pull-requests: write
jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 6
      matrix:
        # add '"pgsql" when supported
        persistence-backends: ["MYSQL", "PGSQL", "LDAP"]
        python-version: ["3.7"]
      fail-fast: false
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
      with:
        egress-policy: audit

    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
    - name: Set up Python3
      uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
      with:
        go-version: 1.18

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
      with:
        gpg_private_key: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Configure Git
      run: |
        git config --global user.name "mo-auto"
        git config --global user.email "54212639+mo-auto@users.noreply.github.com"
        git config --global user.signingkey "${{ steps.import_gpg.outputs.keyid }}"
        echo "${{ secrets.MOAUTO_WORKFLOW_TOKEN }}" | gh auth login --with-token

    - name: Test Jans monolith demo
      run: |
        ip=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
        sudo chmod u+x automation/startjanssenmonolithdemo.sh
        sudo bash ./automation/startjanssenmonolithdemo.sh "demoexample.jans.io" "${{ matrix.persistence-backends }}" "${ip}" "${{ github.sha }}"
        persistence=$(echo "${{ matrix.persistence-backends }}" | tr '[:upper:]' '[:lower:]')
        mv /tmp/reports /${{ matrix.persistence-backends }}-reports

        echo "generating rdbms docs for ${{ matrix.persistence-backends }}..."
        git clone  https://mo-auto:${{ secrets.MOAUTO_WORKFLOW_TOKEN }}@github.com/JanssenProject/jans.git
        cd jans
        git config pull.rebase true
        git checkout -b cn-jans-update-${{ matrix.persistence-backends }}-auto-generated-docs || echo "Branch exists"
        git pull origin cn-jans-update-${{ matrix.persistence-backends }}-auto-generated-docs || echo "Nothing to pull"
        sudo bash ./automation/docs/generate-rdbms-docs.sh "$persistence" || echo "generating rdbms docs failed for ${{ matrix.persistence-backends }}!!!"
        git add . || echo "generating rdbms docs failed !!!"
        git commit -a -S -m "docs: auto-generated ${{ matrix.persistence-backends }} docs" || echo "Nothing to commit"
        git push --set-upstream origin cn-jans-update-${{ matrix.persistence-backends }}-auto-generated-docs || echo "generating rdbms docs failed !!!"
        MESSAGE="fix(docs): autogenerate ${{ matrix.persistence-backends }} RDBMS docs"
        gh pr create --body "Auto generated RDBMS docs" --title "${MESSAGE}" || echo "PR exists"
        cd ..
        echo "generating rdbms docs for ${{ matrix.persistence-backends }} done"   
        
        export JANS_URL=https://demoexample.jans.io
        export JANS_CLIENT_ID=9876baac-de39-4c23-8a78-674b59df8c09
        export JANS_CLIENT_SECRET=1t5Fin3#security
        export JANS_INSECURE_CLIENT=true
        export TF_ACC=1
        cd terraform-provider-jans
        go install github.com/jstemmer/go-junit-report/v2@latest
        go test -v 2>&1 ./... | go-junit-report > ${{ matrix.persistence-backends }}report.xml
        cd ..

    - name: Publish Test Results
      continue-on-error: true
      uses: EnricoMi/publish-unit-test-result-action@ca89ad036b5fcd524c1017287fb01b5139908408 # v2.11.0
      if: >-
          github.event.pull_request.head.repo.full_name == github.repository ||
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'push'
      with:
        large_files: true
        check_name: Java ${{ matrix.persistence-backends }} Tests
        report_individual_runs: "true"
        files: |
          /${{ matrix.persistence-backends }}-reports/*.xml

    - name: Upload Test Results
      continue-on-error: true
      if: always()
      uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
      with:
        name: java-${{ matrix.persistence-backends }}-test-results
        path: "/${{ matrix.persistence-backends }}-reports/*.xml"

    - uses: dorny/test-reporter@1e3a380fe6f25600635b111ddb3547864782656a # v1
      continue-on-error: true
      if: >-
          github.event.pull_request.head.repo.full_name == github.repository ||
          github.event_name == 'workflow_dispatch' ||
          github.event_name == 'push'
      id: go
      with:
        name: Go ${{ matrix.persistence-backends }} Tests
        path: './terraform-provider-jans/${{ matrix.persistence-backends }}report.xml'
        reporter: java-junit

    - name: Download Artifacts
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
      with:
        name: java-${{ matrix.persistence-backends }}-test-results
        path: java-${{ matrix.persistence-backends }}-test-results

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@ca89ad036b5fcd524c1017287fb01b5139908408 # v2.11.0
      with:
        files: "java-${{ matrix.persistence-backends }}-test-results/**/*.xml"
