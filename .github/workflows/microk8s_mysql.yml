name: mysql
on:
  push:
    branches: [master]
    paths:
      - "charts/**"
  pull_request:
    branches: [master]
    paths:
      - "charts/**"
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install microk8s
      id: microk8s
      run: |
        ip=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
        echo "::set-output name=ip::$ip"
        sudo snap install microk8s --classic
        sudo microk8s status --wait-ready
        sudo microk8s enable dns registry ingress

    - name: Install helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        sudo helm version

    - name: Install mysql
      run: |
        sudo microk8s config > config
        sudo microk8s kubectl create ns jans --kubeconfig="$PWD/config"
        sudo helm repo add bitnami https://charts.bitnami.com/bitnami
        sudo microk8s.kubectl get po
        sudo helm install my-release --set auth.rootPassword=Test1234#,auth.database=jans bitnami/mysql -n jans --kubeconfig="$PWD/config"
        sudo microk8s kubectl get po --kubeconfig="$PWD/config" -n jans || echo "Not Found"
        sleep 30
        sudo microk8s kubectl get po --kubeconfig="$PWD/config" -n jans || echo "Not Found"
        sleep 30


    - name: Test Janssen authorization server with mysql backend
      id: test_kubernetes
      run: |
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config"
          sudo helm install jans -f charts/jans/values.yaml charts/jans -n jans --set global.lbIp=${{ steps.microk8s.outputs.ip }} --set global.provisioner="microk8s.io/hostpath" --set global.cnPersistenceType="sql" --set global.cnPersistenceType="sql" --set config.configmap.cnSqlDbUser="root" --set config.configmap.cnSqlDbHost="my-release-mysql.jans.svc" --set config.configmap.cnSqlDbName="jans" --kubeconfig="$PWD/config"
          sleep 30
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config"
          sudo microk8s kubectl -n jans wait --for=condition=available --timeout=600s deploy/jans-auth-server --kubeconfig="$PWD/config" || sudo microk8s kubectl logs -l APP_NAME=auth-server -c auth-server -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl logs -l APP_NAME=persistence-loader -c persistence -n jans --kubeconfig="$PWD/config"
          sudo microk8s kubectl get po --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-client-api --kubeconfig="$PWD/config" || sudo microk8s kubectl logs -l APP_NAME=client-api -c client-api -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl logs -l APP_NAME=persistence-loader -c persistence -n jans --kubeconfig="$PWD/config"
          sudo microk8s kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-fido2 --kubeconfig="$PWD/config" || sudo microk8s kubectl logs -l APP_NAME=fido2 -c fido2 -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl logs -l APP_NAME=persistence-loader -c persistence -n jans --kubeconfig="$PWD/config"
          sudo microk8s kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-scim --kubeconfig="$PWD/config" || sudo microk8s kubectl logs -l APP_NAME=scim -c scim -n jans --kubeconfig="$PWD/config" || echo "Not Found"
          sudo microk8s kubectl get po -n jans --kubeconfig="$PWD/config" || echo "Not Found"
