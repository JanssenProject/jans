name: Publish docs via GitHub Pages (Improved)
on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'charts/**'
      - 'mkdocs.yml'
      - 'docker-jans-**/README.md'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'charts/**'
      - 'mkdocs.yml'
      - 'docker-jans-**/README.md'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g."v1.6.0")'
        default: "nightly"
        required: false
      skip_docs_generation:
        description: 'Skip auto-generated docs (useful for testing)'
        default: false
        type: boolean
        required: false

concurrency:
  group: run-once
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write  # for Git to git push
    if: github.repository == 'JanssenProject/jans'
    name: Deploy docs
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
          token: ${{ secrets.MOAUTO_WORKFLOW_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Set up Python 3.10
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          cp docs/pyproject.toml docs/poetry.lock ../
          poetry install --no-root
          cp mkdocs.yml ../

      - name: Verify build environment
        run: |
          echo "=== Build Environment Information ==="
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version
          echo "Python version:"
          python --version
          echo "Poetry version:"
          poetry --version
          echo "Available disk space:"
          df -h
          echo "======================================"

      - name: Checkout jans ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: '${{ github.event.inputs.version }}'
          fetch-depth: 0
          token: ${{ secrets.MOAUTO_WORKFLOW_TOKEN }}

      - name: Copy files from main to ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        run: |
          mv ../mkdocs.yml mkdocs.yml

      - name: Copy generated chart from main
        run: |
          helm package charts/janssen/
          helm package charts/janssen-all-in-one/
          cp janssen-*.tgz ../

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.MOAUTO_GPG_PRIVATE_KEY_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Configure Git
        run: |
          git config --global user.name "mo-auto"
          git config --global user.email "54212639+mo-auto@users.noreply.github.com"
          git config --global user.signingkey "${{ steps.import_gpg.outputs.keyid }}"
          echo "${{ secrets.MOAUTO_WORKFLOW_TOKEN }}" | gh auth login --with-token

      - name: Generate docs
        continue-on-error: true
        if: >-
          github.event_name == 'release' &&
          github.event.action == 'published' &&
          (!github.event.release.draft) &&
          (startsWith(github.event.release.name, 'v') || github.event.release.name == 'nightly') &&
          (!inputs.skip_docs_generation)
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
         mkdir temp && cd temp
         git clone  https://mo-auto:${{ secrets.MOAUTO_WORKFLOW_TOKEN }}@github.com/JanssenProject/jans.git
         cd jans
         git checkout -b cn-jans-update-auto-generated-docs
         git pull origin cn-jans-update-auto-generated-docs || echo "Nothing to pull"
         echo "Custom work on generating docs can go here."

         echo "=== Starting Auto-Generated Documentation Process ==="
         
         # Create backup of existing docs before generation
         if [ -d "docs/janssen-server/reference/json" ]; then
           echo "Creating backup of existing documentation..."
           cp -r docs/janssen-server/reference/json docs/janssen-server/reference/json.backup.$(date +%Y%m%d-%H%M%S)
         fi
         
         # Generate auto-generated docs with improved error handling
         echo "Generating auto-generated docs..."
         if bash ./automation/docs/generate-autogenerated-docs.sh . 2>&1 | tee autogen-docs.log; then
           echo "✅ Auto-generated docs completed successfully"
           AUTOGEN_SUCCESS=true
         else
           echo "❌ Auto-generated docs failed, checking for partial success..."
           AUTOGEN_SUCCESS=false
           
           # Check if any files were actually generated despite errors
           if [ -f "jans-auth-server/model/target/classes/janssenauthserver-properties.md" ] || 
              [ -f "jans-fido2/model/target/classes/fido2-properties.md" ] ||
              [ -f "jans-scim/model/target/classes/scim-properties.md" ]; then
             echo "Some documentation files were generated despite errors"
             AUTOGEN_SUCCESS=partial
           fi
         fi
         
         # Display generation log for debugging
         echo "=== Auto-generation Log ==="
         cat autogen-docs.log || echo "No log file found"
         echo "=========================="
         
         # Commit changes if any were made
         cd docs
         if git diff --quiet; then
           echo "No changes detected in documentation"
         else
           echo "Changes detected, committing..."
           git add . || echo "Nothing to add"
           if [ "$AUTOGEN_SUCCESS" = "true" ]; then
             git commit -a -S -m "docs: auto-generated property docs" || echo "Nothing to commit"
           else
             git commit -a -S -m "docs: partial auto-generated property docs (some failures occurred)" || echo "Nothing to commit"
           fi
         fi
         cd ..

         echo "=== Starting Swagger Documentation Generation ==="
         
         # Generate jans-config-api Swagger SPECs with improved error handling
         echo "Generating Swagger specifications..."
         if bash ./automation/docs/generate-swagger-specs.sh . 2>&1 | tee swagger-docs.log; then
           echo "✅ Swagger docs completed successfully"
           SWAGGER_SUCCESS=true
         else
           echo "❌ Swagger docs failed, checking for partial success..."
           SWAGGER_SUCCESS=false
           
           # Check if any Swagger files were generated
           if find jans-config-api -name "*.yaml" -o -name "*.yml" -o -name "*.json" | grep -i swagger > /dev/null; then
             echo "Some Swagger files were generated despite errors"
             SWAGGER_SUCCESS=partial
           fi
         fi
         
         # Display Swagger generation log for debugging
         echo "=== Swagger Generation Log ==="
         cat swagger-docs.log || echo "No log file found"
         echo "============================"
         
         # Commit Swagger changes if any were made
         cd jans-config-api/docs
         if git diff --quiet; then
           echo "No changes detected in Swagger documentation"
         else
           echo "Swagger changes detected, committing..."
           git add . || echo "Nothing to add"
           if [ "$SWAGGER_SUCCESS" = "true" ]; then
             git commit -a -S -m "docs: auto-generated Swagger SPEC docs" || echo "Nothing to commit"
           else
             git commit -a -S -m "docs: partial auto-generated Swagger SPEC docs (some failures occurred)" || echo "Nothing to commit"
           fi
         fi
         cd ../..

         # Create summary report
         echo "=== Documentation Generation Summary ===" > doc-generation-summary.txt
         echo "Timestamp: $(date)" >> doc-generation-summary.txt
         echo "Auto-generated docs: $AUTOGEN_SUCCESS" >> doc-generation-summary.txt
         echo "Swagger docs: $SWAGGER_SUCCESS" >> doc-generation-summary.txt
         echo "=======================================" >> doc-generation-summary.txt
         
         # Display summary
         cat doc-generation-summary.txt
         
         # Push changes and create PR
         if git diff --quiet HEAD~1; then
           echo "No documentation changes to push"
         else
           echo "Pushing documentation changes..."
           git push --set-upstream origin cn-jans-update-auto-generated-docs
           MESSAGE="fix(docs): autogenerate docs"
           if [ "$AUTOGEN_SUCCESS" != "true" ] || [ "$SWAGGER_SUCCESS" != "true" ]; then
             MESSAGE="fix(docs): autogenerate docs (partial - see logs for details)"
           fi
           PR=$(gh pr create --body "Auto generated docs - Status: autogen=$AUTOGEN_SUCCESS, swagger=$SWAGGER_SUCCESS" --title "${MESSAGE}")
           echo "Created PR: $PR"
         fi
         
         cd ../../
         sudo rm -rf temp

      - name: mike deploy ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        run: |
          poetry run mike deploy --push --force ${{ github.event.inputs.version }}

      - name: mike deploy head
        if: contains(github.ref, 'refs/heads/main') && github.event_name != 'workflow_dispatch'
        run: |
          poetry run mike deploy --push head

      - name: mike deploy new version
        if: >-
          github.event_name == 'release' &&
          github.event.action == 'published' &&
          (!github.event.release.draft) &&
          (startsWith(github.event.release.name, 'v') || github.event.release.name == 'nightly')
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          poetry run mike deploy --push "$VERSION"

      - name: Update mike version aliases
        id: set_versions
        run: |
          GITHUB_EVENT_RELEASE_TAG_NAME="${{ github.event.release.tag_name }}"
          TAGS=$(gh release list -L 1000 -R ${{ github.repository }} | grep -o '^\v.*'| grep -v Draft | cut -f 1 | sed '/-/!{s/$/_/}' | sort -V | sed 's/_$//')
          LATEST=$(echo "${TAGS}" | tail -1)
          STABLE=$(echo "${TAGS}" | grep -v -- "nightly" | tail -1)
          if [[ "$GITHUB_EVENT_RELEASE_TAG_NAME" == 'nightly' ]]; then
            LATEST='nightly'
          fi
          echo "Latest is $LATEST and Stable is $STABLE"
          poetry run mike alias -u head main
          poetry run mike alias -u "${STABLE}" stable
          poetry run mike set-default --push stable
          echo "LATEST=${LATEST}" >> $GITHUB_OUTPUT
          echo "STABLE=${STABLE}" >> $GITHUB_OUTPUT

      - name: Create version files
        run: |
          LATEST=${{ steps.set_versions.outputs.LATEST }}
          STABLE=${{ steps.set_versions.outputs.STABLE }}
          git checkout -f gh-pages
          git pull origin gh-pages
          mv ../janssen-*.tgz ./charts/
          cd ./charts
          git add janssen-*.tgz && git update-index --refresh
          helm repo index .
          git add index.yaml && git update-index --refresh
          cd ..
          for folder in v*/; do
            cp -r nightly/search "$folder"
            git add $folder/search && git update-index --refresh
          done
          cd ${LATEST}
          if [[ "${LATEST}" == "nightly" ]]; then
           egrep -lRZ --exclude=CONTRIBUTING.md . | xargs -0 -l sed -i -e "s/replace-janssen-version-stable/0.0.0-nightly/g"
           egrep -lRZ --exclude=CONTRIBUTING.md . | xargs -0 -l sed -i -e "s/replace-janssen-version/0.0.0-nightly/g"
           egrep -lRZ --exclude=CONTRIBUTING.md . | xargs -0 -l sed -i -e "s/v0.0.0-nightly/nightly/g"
          else
           egrep -lRZ --exclude=CONTRIBUTING.md . | xargs -0 -l sed -i -e "s/replace-janssen-version/${LATEST:1}/g"
          fi
          git add . && git update-index --refresh
          cd ..
          for folder in */; do
            if [[ $folder != "${STABLE}/" ]]; then
              git rm -r $folder/admin/reference/javadocs || echo "Nothing to remove"
            fi
          done
          sed -i -e "s/placeholder-scarf-pixel-url/https:\/\/static.scarf.sh\/a.png?x-pxid=2c347abc-a9b4-4c4b-bdc9-2682edbcc0c9/g" ${STABLE}/overrides/main.html
          git add ${STABLE}/overrides/main.html && git update-index --refresh
          git diff-index --quiet HEAD -- || git commit -S -m "docs: update scarf pixel url"
          echo "${STABLE}" > stable.txt
          git add stable.txt && git update-index --refresh
          git diff-index --quiet HEAD -- || git commit -S -m "Set stable to ${STABLE}"
          echo "${LATEST}" > latest.txt
          git add latest.txt && git update-index --refresh
          git diff-index --quiet HEAD -- || git commit -S -m "Set latest to ${LATEST}"
          git push origin gh-pages