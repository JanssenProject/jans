name: Publish docs via GitHub Pages
on:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g."v1.0.0")'
        default: "v1.0.0"
        required: false
jobs:
  build:
    env:
      GH_TOKEN: ${{ secrets.GIT_AUTHOR_MKDOCS_DEPLOY }}
    name: Deploy docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip
          cache-dependency-path: docs/requirements.txt

      - name: Install dependencies
        run: |
          pip install --require-hashes -r docs/requirements.txt
          cp mkdocs.yml ../

      - name: Checkout jans ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.version }}'
          fetch-depth: 0

      - name: Copy files from main to ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        run: |
          mv ../mkdocs.yml mkdocs.yml

      - name: Generate docs
        run: echo "Custom work on generating docs can go here."

      - name: git config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: mike deploy ${{ github.event.inputs.version }}
        if: >-
          github.event_name == 'workflow_dispatch'
        run: |
          mike deploy --push --force ${{ github.event.inputs.version }}

      # This deploys the current docs into gh-pages/head on merges to main
      # The old "main" gets deleted if it exists, head is more descriptive
      - name: mike deploy head
        if: contains(github.ref, 'refs/heads/main') && github.event_name != 'workflow_dispatch'
        run: |
          mike deploy --push head

      # If a release has been published, deploy it as a new version
      - name: mike deploy new version
        if: >-
          github.event_name == 'release' &&
          github.event.action == 'published' &&
          startsWith(github.event.release.name, 'v') &&
          !github.event.release.draft &&
          !github.event.release.prerelease
        env:
          VERSION: ${{ github.event.release.tag_name }}
        run: |
          mike deploy --push "$VERSION"

      - name: Update mike version aliases
        #if: >-
        # github.event_name != 'workflow_dispatch'
        id: set_versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAGS=$(gh release list -L 1000 -R ${{ github.repository }} | grep -o '^\v.*'| grep -v Draft | cut -f 1 | sed '/-/!{s/$/_/}' | sort -V | sed 's/_$//')
          LATEST=$(echo "${TAGS}" | tail -1)
          STABLE=$(echo "${TAGS}" | grep -v -- "-" | tail -1)
          # remove below two lines after first release
          LATEST="head"
          STABLE="head"
          mike alias -u head main
          mike alias -u "${STABLE}" stable
          mike set-default --push stable
          echo ::set-output name=LATEST::${LATEST}
          echo ::set-output name=STABLE::${STABLE}

      # Ensures the current branch is gh-pages,
      # Creates / updates the "stable" and "latest" plain text files with the corresponding versions
      # Commits if the files were changed
      # Finally pushes if there are unpushed commits
      - name: Create version files
        #if: >-
        #  github.event_name != 'workflow_dispatch'
        run: |
          LATEST=${{ steps.set_versions.outputs.LATEST }}
          STABLE=${{ steps.set_versions.outputs.STABLE }}
          git checkout gh-pages
          echo "${STABLE}" > stable.txt
          git add stable.txt && git update-index --refresh
          git diff-index --quiet HEAD -- || git commit -m "Set stable to ${STABLE}"
          echo "${LATEST}" > latest.txt
          git add latest.txt && git update-index --refresh
          git diff-index --quiet HEAD -- || git commit -m "Set latest to ${LATEST}"
          git push origin gh-pages

  # Because the output of the index.yaml is also in gh-pages we want to ensure the jobs run after each other
  # This releases the helm chart
  release-helm-chart:
    if: >-
      github.event_name == 'release' &&
      github.event.action == 'published' &&
      startsWith(github.event.release.name, 'v') &&
      !github.event.release.draft &&
      !github.event.release.prerelease ||
      github.event_name == 'workflow_dispatch'
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.4.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
