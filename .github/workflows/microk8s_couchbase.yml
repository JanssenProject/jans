name: couchbase
on:
  push:
    branches: [master]
    paths:
      - "charts/**"
  pull_request:
    branches: [master]
    paths:
      - "charts/**"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Set up Python 3.7
      uses: actions/setup-python@v2.2.2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo python3 -m pip install --upgrade pip
        sudo pip3 install setuptools --upgrade
        sudo pip3 install pyOpenSSL --upgrade
        sudo pip3 install requests --upgrade
        sudo apt-get update
        sudo apt-get install build-essential
        sudo pip3 install shiv

    - name: Install microk8s
      run: |
        sudo snap install microk8s --classic
        sudo snap alias microk8s.kubectl kubectl
        sudo microk8s.status --wait-ready
        sudo microk8s.enable dns registry ingress


    - name: Install helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        sudo helm version

    - name: Install Couchbase
      id: microk8s
      run: |
        git clone https://github.com/GluuFederation/cloud-native-edition.git
        cp -rf ./cloud-native-edition/pygluu/kubernetes/templates/couchbase .
        cp -rf ./cloud-native-edition/pygluu/kubernetes/templates/couchbase/couchbase-buckets.yaml .
        cp -rf ./cloud-native-edition/pygluu/kubernetes/templates/couchbase/couchbase-ephemeral-buckets.yaml .
        cd cloud-native-edition
        git checkout 4.2
        cd ..
        cp -rf ./couchbase ./cloud-native-edition/pygluu/kubernetes/templates
        cp -rf couchbase-buckets.yaml ./cloud-native-edition
        cp -rf couchbase-ephemeral-buckets.yaml ./cloud-native-edition
        cd cloud-native-edition
        cat  ./pygluu/kubernetes/templates/couchbase/couchbase-user.yaml |  sed -s "s@jans-couchbase-user-password@gluu-couchbase-user-password@g" > tmpfile.yaml && mv tmpfile.yaml ./pygluu/kubernetes/templates/couchbase/couchbase-user.yaml
        ip=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
        echo "::set-output name=ip::$ip"
        cat <<EOF > settings.json
        {
          "ACCEPT_GLUU_LICENSE": "Y",
          "TEST_ENVIRONMENT": "Y",
          "GLUU_VERSION": "4.2",
          "GLUU_UPGRADE_TARGET_VERSION": "",
          "NGINX_INGRESS_NAMESPACE": "ingress-nginx",
          "GLUU_HELM_RELEASE_NAME": "jans",
          "NGINX_INGRESS_RELEASE_NAME": "ningress",
          "INSTALL_GLUU_GATEWAY": "N",
          "INSTALL_POSTGRES": "N",
          "POSTGRES_NAMESPACE": "postgres",
          "KONG_NAMESPACE": "gluu-gateway",
          "GLUU_GATEWAY_UI_NAMESPACE": "gg-ui",
          "KONG_PG_USER": "kong",
          "KONG_PG_PASSWORD": "MUs6#@",
          "GLUU_GATEWAY_UI_PG_USER": "konga",
          "GLUU_GATEWAY_UI_PG_PASSWORD": "MUs6#@",
          "KONG_DATABASE": "kong",
          "GLUU_GATEWAY_UI_DATABASE": "konga",
          "POSTGRES_REPLICAS": 3,
          "POSTGRES_URL": "postgres.postgres.svc.cluster.local",
          "KONG_HELM_RELEASE_NAME": "kong",
          "GLUU_GATEWAY_UI_HELM_RELEASE_NAME": "ggui",
          "USE_ISTIO": "N",
          "USE_ISTIO_INGRESS": "N",
          "ISTIO_SYSTEM_NAMESPACE": "istio-system",
          "NODES_IPS": [
            "$ip"
          ],
          "NODES_ZONES": [],
          "NODES_NAMES": [],
          "NODE_SSH_KEY": "",
          "HOST_EXT_IP": "$ip",
          "VERIFY_EXT_IP": "",
          "AWS_LB_TYPE": "",
          "USE_ARN": "",
          "ARN_AWS_IAM": "",
          "COUCHBASE_CLUSTER_FILE_OVERRIDE": "Y",
          "LB_ADD": "",
          "REDIS_URL": "",
          "REDIS_TYPE": "",
          "REDIS_PW": "",
          "REDIS_USE_SSL": "false",
          "DEPLOYMENT_ARCH": "microk8s",
          "PERSISTENCE_BACKEND": "couchbase",
          "INSTALL_JACKRABBIT": "Y",
          "JACKRABBIT_STORAGE_SIZE": "4Gi",
          "JACKRABBIT_URL": "http://jackrabbit:8080",
          "JACKRABBIT_ADMIN_ID": "admin",
          "JACKRABBIT_ADMIN_PASSWORD": "admin",
          "JACKRABBIT_CLUSTER": "Y",
          "JACKRABBIT_PG_USER": "jackrabbit",
          "JACKRABBIT_PG_PASSWORD": "jackrabbit",
          "JACKRABBIT_DATABASE": "jackrabbit",
          "INSTALL_COUCHBASE": "Y",
          "COUCHBASE_NAMESPACE": "cbns",
          "COUCHBASE_VOLUME_TYPE": "io1",
          "COUCHBASE_CLUSTER_NAME": "cbjans",
          "COUCHBASE_URL": "cbjans.cbns.svc.cluster.local",
          "COUCHBASE_INDEX_NUM_REPLICA": "0",
          "COUCHBASE_USER": "jans",
          "COUCHBASE_SUPERUSER": "admin",
          "COUCHBASE_PASSWORD": "P@ssw0rd",
          "COUCHBASE_SUPERUSER_PASSWORD": "P@ssw0rd",
          "COUCHBASE_CRT": "",
          "COUCHBASE_CN": "Couchbase CN",
          "COUCHBASE_SUBJECT_ALT_NAME": "",
          "COUCHBASE_BUCKET_PREFIX": "jans",
          "GLUU_LDAP_MULTI_CLUSTER": "N",
          "COUCHBASE_USE_LOW_RESOURCES": "Y",
          "COUCHBASE_DATA_NODES": "",
          "COUCHBASE_QUERY_NODES": "",
          "COUCHBASE_INDEX_NODES": "",
          "COUCHBASE_SEARCH_EVENTING_ANALYTICS_NODES": "",
          "COUCHBASE_GENERAL_STORAGE": "",
          "COUCHBASE_DATA_STORAGE": "",
          "COUCHBASE_INDEX_STORAGE": "",
          "COUCHBASE_QUERY_STORAGE": "",
          "COUCHBASE_ANALYTICS_STORAGE": "",
          "COUCHBASE_BACKUP_SCHEDULE": "*/30 * * * *",
          "COUCHBASE_BACKUP_RESTORE_POINTS": 1,
          "LDAP_BACKUP_SCHEDULE": "*/30 * * * *",
          "NUMBER_OF_EXPECTED_USERS": "",
          "EXPECTED_TRANSACTIONS_PER_SEC": "",
          "USING_CODE_FLOW": "",
          "USING_SCIM_FLOW": "",
          "USING_RESOURCE_OWNER_PASSWORD_CRED_GRANT_FLOW": "",
          "DEPLOY_MULTI_CLUSTER": "N",
          "HYBRID_LDAP_HELD_DATA": "",
          "LDAP_JACKRABBIT_VOLUME": "",
          "APP_VOLUME_TYPE": 1,
          "LDAP_STATIC_VOLUME_ID": "",
          "LDAP_STATIC_DISK_URI": "",
          "GLUU_CACHE_TYPE": "NATIVE_PERSISTENCE",
          "GLUU_NAMESPACE": "gluu",
          "GLUU_FQDN": "demoexample.gluu.org",
          "COUNTRY_CODE": "US",
          "STATE": "TX",
          "EMAIL": "support@gluu.org",
          "CITY": "Austin",
          "ORG_NAME": "Gluu",
          "GMAIL_ACCOUNT": "",
          "GOOGLE_NODE_HOME_DIR": "",
          "IS_GLUU_FQDN_REGISTERED": "N",
          "LDAP_PW": "nTB5#|",
          "ADMIN_PW": "@4n,Js",
          "OXD_SERVER_PW": "n8H0NKuGTXsn",
          "OXD_APPLICATION_KEYSTORE_CN": "oxd-server",
          "OXD_ADMIN_KEYSTORE_CN": "oxd-server",
          "OXD_SERVER_STORAGE": "h2",
          "LDAP_STORAGE_SIZE": "4Gi",
          "OXAUTH_REPLICAS": 1,
          "OXTRUST_REPLICAS": 1,
          "LDAP_REPLICAS": 1,
          "FIDO2_REPLICAS": 1,
          "SCIM_REPLICAS": 1,
          "OXSHIBBOLETH_REPLICAS": 1,
          "OXPASSPORT_REPLICAS": 1,
          "OXD_SERVER_REPLICAS": 1,
          "CASA_REPLICAS": 1,
          "RADIUS_REPLICAS": 1,
          "ENABLE_OXTRUST_API": "N",
          "ENABLE_OXTRUST_TEST_MODE": "N",
          "ENABLE_CACHE_REFRESH": "N",
          "ENABLE_OXD": "Y",
          "ENABLE_RADIUS": "Y",
          "ENABLE_OXPASSPORT": "Y",
          "ENABLE_OXSHIBBOLETH": "Y",
          "ENABLE_FIDO2": "Y",
          "ENABLE_SCIM": "Y",
          "ENABLE_CASA": "Y",
          "OXAUTH_KEYS_LIFE": 48,
          "ENABLE_OXAUTH_KEY_ROTATE": "Y",
          "ENABLE_OXTRUST_API_BOOLEAN": "true",
          "ENABLE_OXTRUST_TEST_MODE_BOOLEAN": "false",
          "ENABLE_RADIUS_BOOLEAN": "true",
          "ENABLE_OXPASSPORT_BOOLEAN": "true",
          "ENABLE_CASA_BOOLEAN": "true",
          "ENABLE_SAML_BOOLEAN": "true",
          "EDIT_IMAGE_NAMES_TAGS": "N",
          "CONFIRM_PARAMS": "Y"
        }
        EOF
        wget ${{ secrets.cbpackage }}
        sudo make zipapp
        wget https://gist.githubusercontent.com/moabu/9da0c5d2b5b3d297be8583c79bbba321/raw/c6e7fe5e28742cafc314280db9ee717173af9779/couchbase-cluster.yaml
        sudo ./pygluu-kubernetes.pyz install-couchbase || sudo ./pygluu-kubernetes.pyz install-couchbase
        crt=$(cat couchbase_crts_keys/couchbase.crt | base64 )
        echo "::set-output name=crt::$crt"
        cd ..

    - name: Test Janssen authorization server with Couchbase backend
      id: test_kubernetes
      run: |
          COUCHBASE_IP=$(sudo microk8s.kubectl get po cbjans-0000 -n cbns --template={{.status.podIP}})
          sudo microk8s.config > config || echo ""
          sudo mv config ~/.kube/config || echo ""
          sudo kubectl create ns jans
          sudo helm install jans -f charts/jans/values.yaml charts/jans -n jans --set global.lbIp=${{ steps.microk8s.outputs.ip }} --set config.configmap.cnCouchbaseCrt=${{ steps.microk8s.outputs.crt }} --set global.provisioner="microk8s.io/hostpath" --set global.cnPersistenceType="couchbase" --set config.configmap.cnCouchbaseUrl="$COUCHBASE_IP"
          sudo kubectl delete secret jans-cb-crt -n jans
          sudo kubectl create secret generic jans-cb-crt -n jans --from-file=./cloud-native-edition/couchbase_crts_keys/couchbase.crt
          sleep 30
          sudo kubectl get po -n jans
          sudo kubectl get po -n cbns
          sudo kubectl -n jans wait --for=condition=available --timeout=600s deploy/jans-auth-server || sudo kubectl logs -l APP_NAME=auth-server -c jans-auth-server -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-client-api || sudo kubectl logs -l APP_NAME=client-api -c jans-client-api -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-fido2 || sudo kubectl logs -l APP_NAME=fido2 -c jans-fido2 -n jans || echo "Not Found"
          sudo kubectl get po -n jans
          sudo kubectl -n jans wait --for=condition=available --timeout=300s deploy/jans-scim || sudo kubectl logs -l APP_NAME=scim -c jans-scim -n jans || echo "Not Found"
          sudo kubectl get po -n jans
