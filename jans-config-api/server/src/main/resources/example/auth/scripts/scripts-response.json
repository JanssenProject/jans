{
    "dn": "inum=4144edf6-af99-451d-be29-f3eb5c0e9143,ou=scripts,o=jans",
    "inum": "4144edf6-af99-451d-be29-f3eb5c0e9143",
    "name": "test_application_session_test",
    "description": "Sample Application Session script",
    "script": "# oxAuth is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text.\n# Copyright (c) 2016, Janssen\n#\n# Author: Yuriy Movchan\n#\n\nfrom io.jans.model.custom.script.type.session import ApplicationSessionType\nfrom io.jans.service.cdi.util import CdiUtil\nfrom io.jans.persist import PersistenceEntryManager\nfrom io.jans.as.model.config import StaticConfiguration\nfrom io.jans.as.model.ldap import TokenEntity\nfrom jakarta.faces.application import FacesMessage\nfrom io.jans.jsf2.message import FacesMessages\nfrom io.jans.util import StringHelper, ArrayHelper\nfrom io.jans.as.model.config import Constants\nfrom java.util import Arrays, ArrayList\nfrom io.jans.as.service.external.session import SessionEventType\n\nimport java\n\nclass ApplicationSession(ApplicationSessionType):\n    def __init__(self, currentTimeMillis):\n        self.currentTimeMillis = currentTimeMillis\n\n    def init(self, customScript, configurationAttributes):\n        print \"Application session. Initialization\"\n\n        self.entryManager = CdiUtil.bean(PersistenceEntryManager)\n        self.staticConfiguration = CdiUtil.bean(StaticConfiguration)\n\n        print \"Application session. Initialized successfully\"\n\n        return True   \n\n    def destroy(self, configurationAttributes):\n        print \"Application session. Destroy\"\n        print \"Application session. Destroyed successfully\"\n        return True   \n\n    def getApiVersion(self):\n        return 11\n\n    # Called each time specific session event occurs\n    # event is io.jans.as.service.external.session.SessionEvent\n    def onEvent(self, event):\n        if event.getType() == SessionEventType.AUTHENTICATED:\n            print \"Session is authenticated, session: \" + event.getSessionId().getId()\n        return\n\n    # Application calls it at start session request to allow notify 3rd part systems\n    #   httpRequest is jakarta.servlet.http.HttpServletRequest\n    #   sessionId is io.jans.as.model.common.SessionId\n    #   configurationAttributes is java.util.Map<String, SimpleCustomProperty>\n    def startSession(self, httpRequest, sessionId, configurationAttributes):\n        print \"Application session. Starting external session\"\n\n        user_name = sessionId.getSessionAttributes().get(Constants.AUTHENTICATED_USER)\n\n        first_session = self.isFirstSession(user_name)\n        if not first_session:\n            facesMessages = CdiUtil.bean(FacesMessages)\n            facesMessages.add(FacesMessage.SEVERITY_ERROR, \"Please, end active session first!\")\n            return False\n\n        print \"Application session. External session started successfully\"\n        return True\n\n    # Application calls it at end session request to allow notify 3rd part systems\n    #   httpRequest is jakarta.servlet.http.HttpServletRequest\n    #   sessionId is io.jans.as.model.common.SessionId\n    #   configurationAttributes is java.util.Map<String, SimpleCustomProperty>\n    def endSession(self, httpRequest, sessionId, configurationAttributes):\n        print \"Application session. Starting external session end\"\n\n        print \"Application session. External session ended successfully\"\n        return True\n\n    # Application calls it during /session/active endpoint call to modify response if needed\n    #   jsonArray is org.json.JSONArray\n    #   context is io.jans.as.server.model.common.ExecutionContext\n    def modifyActiveSessionsResponse(self, jsonArray, context):\n        return False\n\n    def isFirstSession(self, user_name):\n        tokenLdap = TokenEntity()\n        tokenLdap.setDn(self.staticConfiguration.getBaseDn().getClients())\n        tokenLdap.setUserId(user_name)\n\n        tokenLdapList = self.entryManager.findEntries(tokenLdap, 1)\n        print \"Application session. isFirstSession. Get result: '%s'\" % tokenLdapList\n\n        if (tokenLdapList != None) and (tokenLdapList.size() > 0):\n            print \"Application session. isFirstSession: False\"\n            return False\n\n        print \"Application session. isFirstSession: True\"\n        return True\n",
    "scriptType": "application_session",
    "programmingLanguage": "python",
    "moduleProperties": [
        {
            "value1": "location_type",
            "value2": "ldap"
        }
    ],
    "level": 800,
    "revision": 8,
    "enabled": false,
    "modified": false,
    "internal": false,
    "locationType": "ldap",
    "baseDn": "inum=4144edf6-af99-451d-be29-f3eb5c0e9143,ou=scripts,o=jans"
}