/*
 * Janssen Project software is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text.
 *
 * Copyright (c) 2020, Janssen Project
 */

package io.jans.configapi.service.auth;

import static org.apache.commons.lang3.BooleanUtils.isTrue;

import io.jans.as.client.RegisterRequest;
import io.jans.as.common.model.registration.Client;
import io.jans.as.common.service.OrganizationService;
import io.jans.as.common.service.common.InumService;
import io.jans.as.common.util.AttributeConstants;
import io.jans.as.model.common.AuthenticationMethod;
import io.jans.as.model.common.GrantType;
import io.jans.as.model.common.ResponseType;
import io.jans.as.model.common.SubjectType;
import io.jans.as.model.configuration.AppConfiguration;
import io.jans.as.model.crypto.signature.SignatureAlgorithm;
import io.jans.as.model.json.JsonApplier;
import io.jans.as.model.register.ApplicationType;
import io.jans.configapi.core.model.SearchRequest;
import io.jans.orm.PersistenceEntryManager;
import io.jans.orm.model.PagedResult;
import io.jans.orm.model.SortOrder;
import io.jans.orm.search.filter.Filter;
import io.jans.util.StringHelper;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import java.io.Serializable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.json.JSONException;
import org.slf4j.Logger;

import com.google.common.collect.Lists;

/**
 * @author Mougang T.Gasmyr
 *
 */
@ApplicationScoped
public class ClientService implements Serializable {

    private static final long serialVersionUID = 7912416439116338984L;

    @Inject
    private transient PersistenceEntryManager persistenceEntryManager;

    @Inject
    private transient Logger logger;

    @Inject
    private OrganizationService organizationService;

    @Inject
    private transient InumService inumService;

    @Inject
    AttributeService attributeService;

    @Inject
    private ScopeService scopeService;

    @Inject
    AppConfiguration appConfiguration;

    public boolean contains(String clientDn) {
        return persistenceEntryManager.contains(clientDn, Client.class);
    }

    public void addClient(Client client) {
        updateClient(client, false);
        persistenceEntryManager.persist(client);
    }

    public void removeClient(Client client) {
        persistenceEntryManager.removeRecursively(client.getDn(), Client.class);
    }

    public void updateClient(Client client) {
        persistenceEntryManager.merge(client);
    }

    public Client getClientByInum(String inum) {
        Client result = null;
        try {
            result = persistenceEntryManager.find(Client.class, getDnForClient(inum));
        } catch (Exception ex) {
            logger.error("Failed to load client entry", ex);
        }
        return result;
    }

    public List<Client> searchClients(String pattern, int sizeLimit) {

        logger.debug("Search Clients with pattern:{}, sizeLimit:{}", pattern, sizeLimit);

        String[] targetArray = new String[] { pattern };
        Filter displayNameFilter = Filter.createSubstringFilter(AttributeConstants.DISPLAY_NAME, null, targetArray,
                null);
        Filter descriptionFilter = Filter.createSubstringFilter(AttributeConstants.DESCRIPTION, null, targetArray,
                null);
        Filter inumFilter = Filter.createSubstringFilter(AttributeConstants.INUM, null, targetArray, null);
        Filter searchFilter = Filter.createORFilter(displayNameFilter, descriptionFilter, inumFilter);

        logger.debug("Search Clients with searchFilter:{}", searchFilter);
        return persistenceEntryManager.findEntries(getDnForClient(null), Client.class, searchFilter, sizeLimit);
    }

    public List<Client> getAllClients(int sizeLimit) {
        return persistenceEntryManager.findEntries(getDnForClient(null), Client.class, null, sizeLimit);
    }

    public List<Client> getAllClients() {
        return persistenceEntryManager.findEntries(getDnForClient(null), Client.class, null);
    }

    public PagedResult<Client> getClients(SearchRequest searchRequest) {
        logger.debug("Search Clients with searchRequest:{}", searchRequest);

        Filter searchFilter = null;
        if (StringUtils.isNotEmpty(searchRequest.getFilter())) {
            String[] targetArray = new String[] { searchRequest.getFilter() };
            Filter displayNameFilter = Filter.createSubstringFilter(AttributeConstants.DISPLAY_NAME, null, targetArray,
                    null);
            Filter descriptionFilter = Filter.createSubstringFilter(AttributeConstants.DESCRIPTION, null, targetArray,
                    null);
            Filter inumFilter = Filter.createSubstringFilter(AttributeConstants.INUM, null, targetArray, null);
            searchFilter = Filter.createORFilter(displayNameFilter, descriptionFilter, inumFilter);
        }

        return persistenceEntryManager.findPagedEntries(getDnForClient(null), Client.class, searchFilter, null,
                searchRequest.getSortBy(), SortOrder.getByValue(searchRequest.getSortOrder()),
                searchRequest.getStartIndex() - 1, searchRequest.getCount(), searchRequest.getMaxCount());

    }

    public Client getClientByDn(String dn) {
        try {
            return persistenceEntryManager.find(Client.class, dn);
        } catch (Exception e) {
            logger.warn("", e);
            return null;
        }
    }

    public ApplicationType[] getApplicationType() {
        return ApplicationType.values();
    }

    public SubjectType[] getSubjectTypes() {
        return SubjectType.values();
    }

    public SignatureAlgorithm[] getSignatureAlgorithms() {
        return SignatureAlgorithm.values();
    }

    public String getDnForClient(String inum) {
        String orgDn = organizationService.getDnForOrganization();
        if (StringHelper.isEmpty(inum)) {
            return String.format("ou=clients,%s", orgDn);
        }
        return String.format("inum=%s,ou=clients,%s", inum, orgDn);
    }

    public String generateInumForNewClient() {
        String newInum = null;
        String newDn = null;
        int trycount = 0;
        do {
            if (trycount < InumService.MAX_IDGEN_TRY_COUNT) {
                newInum = inumService.generateId("client");
                trycount++;
            } else {
                newInum = inumService.generateDefaultId();
            }
            newDn = getDnForClient(newInum);
        } while (persistenceEntryManager.contains(newDn, Client.class));
        return newInum;
    }

    public Client updateClient(Client client, boolean update) {
        logger.debug("Prepare Client data - client:{}", client);
        if (client == null) {
            return client;
        }

        logger.debug(
                "Prepare Client data - client.getApplicationType:{}, client.getRedirectUris():{}, client.getClaimRedirectUris():{}",
                client.getApplicationType(), client.getRedirectUris(), client.getClaimRedirectUris());

        client.setApplicationType(
                client.getApplicationType() != null ? client.getApplicationType() : ApplicationType.WEB);
        String[] redirectUris = client.getRedirectUris();
        if (redirectUris != null && redirectUris.length > 0) {
            Set<String> set = new HashSet<>(Arrays.asList(redirectUris)); // Remove repeated elements
            client.setRedirectUris(set.toArray(new String[0]));
        }

        String[] claimRedirectUris = client.getClaimRedirectUris();
        if (claimRedirectUris != null && claimRedirectUris.length > 0) {
            Set<String> set = new HashSet<>(Arrays.asList(claimRedirectUris)); // Remove repeated elements
            client.setClaimRedirectUris(set.toArray(new String[0]));
        }

        logger.debug(
                "Prepare Client data - client.getResponseTypes():{}, client.getGrantTypes():{}, client.getClaimRedirectUris():{}",
                client.getResponseTypes(), client.getGrantTypes(), client.getClaimRedirectUris());
        Set<ResponseType> responseTypeSet = new HashSet<>(Arrays.asList(client.getResponseTypes()));
        Set<GrantType> grantTypeSet = new HashSet<>(Arrays.asList(client.getGrantTypes()));

        logger.debug(
                "Verifying responseTypeSet:{}, grantTypeSet:{}, appConfiguration.getGrantTypesAndResponseTypesAutofixEnabled():{}, appConfiguration.getClientRegDefaultToCodeFlowWithRefresh():{}",
                responseTypeSet, grantTypeSet, appConfiguration.getGrantTypesAndResponseTypesAutofixEnabled(), appConfiguration.getClientRegDefaultToCodeFlowWithRefresh());
        if (!update && isTrue(appConfiguration.getGrantTypesAndResponseTypesAutofixEnabled())) {
            if (isTrue(appConfiguration.getClientRegDefaultToCodeFlowWithRefresh())) {
                if (responseTypeSet.isEmpty() && grantTypeSet.isEmpty()) {
                    responseTypeSet.add(ResponseType.CODE);
                }
                if (responseTypeSet.contains(ResponseType.CODE)) {
                    grantTypeSet.add(GrantType.AUTHORIZATION_CODE);
                    grantTypeSet.add(GrantType.REFRESH_TOKEN);
                }
                if (grantTypeSet.contains(GrantType.AUTHORIZATION_CODE)) {
                    responseTypeSet.add(ResponseType.CODE);
                    grantTypeSet.add(GrantType.REFRESH_TOKEN);
                }
            }
            if (responseTypeSet.contains(ResponseType.TOKEN) || responseTypeSet.contains(ResponseType.ID_TOKEN)) {
                grantTypeSet.add(GrantType.IMPLICIT);
            }
            if (grantTypeSet.contains(GrantType.IMPLICIT)) {
                responseTypeSet.add(ResponseType.TOKEN);
            }

            responseTypeSet.retainAll(appConfiguration.getAllResponseTypesSupported());
            grantTypeSet.retainAll(appConfiguration.getGrantTypesSupported());

            Set<GrantType> dynamicGrantTypeDefault = appConfiguration.getDynamicGrantTypeDefault();
            grantTypeSet.retainAll(dynamicGrantTypeDefault);
        }

        logger.debug("Setting responseTypeSet:{}, grantTypeSet:{}",responseTypeSet, grantTypeSet);
        client.setResponseTypes(responseTypeSet.toArray(new ResponseType[0]));
        client.setGrantTypes(grantTypeSet.toArray(new GrantType[0]));

        Set<String> contactsSet = new HashSet<>(Arrays.asList(client.getContacts()));
        logger.debug("Setting client.getContacts():{}, contactsSet:{}",client.getContacts(), contactsSet);
        if (contactsSet != null && !contactsSet.isEmpty()) {
            client.setContacts(contactsSet.toArray(new String[0]));
        }

        logger.debug("Setting client.getTokenEndpointAuthMethod():{}",client.getTokenEndpointAuthMethod());
        if (StringUtils.isBlank(client.getTokenEndpointAuthMethod())) {
            // If omitted, the default is client_secret_basic
            client.setTokenEndpointAuthMethod(AuthenticationMethod.CLIENT_SECRET_BASIC.toString());
        }

        logger.debug("Verifying client.getDefaultAcrValues():{}",client.getDefaultAcrValues());
        Set<String> defaultAcrSet = new HashSet<>(Arrays.asList(client.getDefaultAcrValues()));
        if (defaultAcrSet != null && !defaultAcrSet.isEmpty()) {
            client.setDefaultAcrValues(defaultAcrSet.toArray(new String[defaultAcrSet.size()]));
        }
        logger.debug("Final client.getDefaultAcrValues():{}",client.getDefaultAcrValues());
        
        logger.debug("Verifying client.getGroups():{}",client.getGroups());
        Set<String> groupSet = new HashSet<>(Arrays.asList(client.getGroups()));
        if (groupSet != null && !groupSet.isEmpty()) {
            client.setGroups(new HashSet<>(groupSet).toArray(new String[0])); // remove duplicates
        }
        logger.debug("Final client.getDefaultAcrValues():{}",client.getGroups());

        logger.debug("Verifying client.getPostLogoutRedirectUris():{}",client.getPostLogoutRedirectUris());
        Set<String> postLogoutRedirectUriSet = new HashSet<>(Arrays.asList(client.getPostLogoutRedirectUris()));
        if (postLogoutRedirectUriSet != null && !postLogoutRedirectUriSet.isEmpty()) {
            client.setPostLogoutRedirectUris(
                    postLogoutRedirectUriSet.toArray(new String[postLogoutRedirectUriSet.size()]));
        }
        logger.debug("Final client.getPostLogoutRedirectUris():{}",client.getPostLogoutRedirectUris());

        Set<String> requestUriSet = new HashSet<>(Arrays.asList(client.getRequestUris()));
        if (requestUriSet != null && !requestUriSet.isEmpty()) {
            client.setRequestUris(requestUriSet.toArray(new String[requestUriSet.size()]));
        }

        logger.debug("Verifying client.getAuthorizedOrigins():{}",client.getAuthorizedOrigins());
        Set<String> authorizedOriginSet = new HashSet<>(Arrays.asList(client.getAuthorizedOrigins()));
        if (authorizedOriginSet != null && !authorizedOriginSet.isEmpty()) {
            client.setAuthorizedOrigins(authorizedOriginSet.toArray(new String[authorizedOriginSet.size()]));
        }
        logger.debug("Final  client.getAuthorizedOrigins():{}",client.getAuthorizedOrigins());
        
        logger.debug("Verifying client.getScopes():{}",client.getScopes());
        String[] scopeArr = client.getScopes();
        List<String> scopes = Arrays.asList(scopeArr);
        if (grantTypeSet.contains(GrantType.RESOURCE_OWNER_PASSWORD_CREDENTIALS)
                && !appConfiguration.getDynamicRegistrationAllowedPasswordGrantScopes().isEmpty()) {
            scopes = Lists.newArrayList(scopes);
            scopes.retainAll(appConfiguration.getDynamicRegistrationAllowedPasswordGrantScopes());
        }
        List<String> scopesDn;
        if (scopes != null && !scopes.isEmpty()
                && isTrue(appConfiguration.getDynamicRegistrationScopesParamEnabled())) {
            List<String> defaultScopes = scopeService.getDefaultScopesDn();
            List<String> requestedScopes = scopeService.getScopesDn(scopes);
            Set<String> allowedScopes = new HashSet<>();

            for (String requestedScope : requestedScopes) {
                if (defaultScopes.contains(requestedScope)) {
                    allowedScopes.add(requestedScope);
                }
            }

            scopesDn = new ArrayList<>(allowedScopes);
            client.setScopes(scopesDn.toArray(new String[scopesDn.size()]));
        } else {
            scopesDn = scopeService.getDefaultScopesDn();
            client.setScopes(scopesDn.toArray(new String[scopesDn.size()]));
        }
        logger.debug("Final client.getScopes():{}",client.getScopes());
        
        logger.debug("Verifying client.getClaims():{}",client.getClaims());
        List<String> claims = Arrays.asList(client.getClaims());
        if (claims != null && !claims.isEmpty()) {
            List<String> claimsDn = attributeService.getAttributesDn(claims);
            client.setClaims(claimsDn.toArray(new String[claimsDn.size()]));
        }
        logger.debug("Final client.getClaims():{}",client.getClaims());

        logger.debug("Final client.getAttributes().getAuthorizedAcrValues():{}",client.getAttributes().getAuthorizedAcrValues());
        if (client.getAttributes().getAuthorizedAcrValues() != null
                && client.getAttributes().getAuthorizedAcrValues().isEmpty()) {
            List<String> authorizedAcrValues = client.getAttributes().getAuthorizedAcrValues();
            if (authorizedAcrValues != null && !authorizedAcrValues.isEmpty()) {
                authorizedAcrValues = new ArrayList<>(new HashSet<>(authorizedAcrValues)); // Remove repeated elements
                client.getAttributes().setAuthorizedAcrValues(authorizedAcrValues);
            }
        }
        logger.debug("Final client.getAttributes().getAuthorizedAcrValues():{}",client.getAttributes().getAuthorizedAcrValues());
        return client;
    }
}
