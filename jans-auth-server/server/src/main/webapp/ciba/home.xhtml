<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
    <html xmlns="http://www.w3.org/1999/xhtml">

    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>oxAuth - CIBA</title>

        <!-- Material Design Theming -->
        <link rel="stylesheet" href="https://code.getmdl.io/1.1.3/material.orange-indigo.min.css" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
        <script src="https://code.getmdl.io/1.1.3/material.min.js"></script>

        <link type="text/css" rel="stylesheet" href="#{webConfigurationService.cssLocation}/site.css"/>
        <link type="text/css" rel="stylesheet" href="#{webConfigurationService.cssLocation}/authorize.css"/>
        <link type="text/css" rel="stylesheet" href="#{webConfigurationService.cssLocation}/font-awesome.css"/>
        <link rel="stylesheet" href="#{request.contextPath}/stylesheet/ciba.css" />

        <link rel="manifest" href="#{request.contextPath}/ciba/manifest.json" />
    </head>
    <body>
    <div class="demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header">

        <!-- Header section containing title -->
        <header class="mdl-layout__header mdl-color-text--white mdl-color--green-700">
            <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">
                <div class="mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--8-col-desktop">
                    <h3>oxAuth - CIBA</h3>
                </div>
            </div>
        </header>

        <main class="mdl-layout__content mdl-color--grey-100">
            <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">

                <h:messages id="globalMessages" globalOnly="true" styleClass="message"
                            errorClass="errormsg" infoClass="infomsg" warnClass="warnmsg"
                            rendered="#{showGlobalMessages != 'false'}"/>

                <!-- Container for the Table of content -->
                <div class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop">
                    <div class="mdl-card__supporting-text mdl-color-text--grey-600">
                        <div>
                            <h4>Authenticate User</h4>
                            <p id="oxAuthIdToken" style="word-break: break-all;"></p>
                            <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                                    onclick="authenticateUser()">Authenticate User</button>
                        </div>

                        <!-- div to display the generated Instance ID token -->
                        <div id="token_div" style="display: none;">
                            <h4>Instance ID Token</h4>
                            <p id="token" style="word-break: break-all;"></p>
                            <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                                    onclick="deleteToken()">Delete Token</button>
                        </div>
                        <!-- div to display the UI to allow the request for permission to
                             notify the user. This is shown if the app has not yet been
                             granted permission to notify. -->
                        <div id="permission_div" style="display: none;">
                            <h4>Needs Permission</h4>
                            <p id="token"></p>
                            <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                                    onclick="requestPermission()">Request Permission</button>
                        </div>
                        <!-- div to display messages received by this app. -->
                        <div id="messages"></div>
                    </div>
                </div>

                <h:panelGroup layout="block" rendered="#{not empty facesContext.messageList and cookie['X-Correlation-Id'] != null}">
                    <br/>
                    <p style="font-size: 0.7em">
                        <strong>Correlation Id: </strong> <h:outputText value="#{cookie['X-Correlation-Id'].value}" />
                    </p>
                </h:panelGroup>

            </div>
        </main>
    </div>

    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/7.6.1/firebase-app.js"></script>

    <!-- Add Firebase products that you want to use -->
    <script src="https://www.gstatic.com/firebasejs/7.6.1/firebase-messaging.js"></script>

    <script>
        // Your web app's Firebase configuration
        var firebaseConfig = {
            apiKey: "#{ cibaAuthorizeAction.apiKey }",
            authDomain: "#{ cibaAuthorizeAction.authDomain }",
            databaseURL: "#{ cibaAuthorizeAction.databaseURL }",
            projectId: "#{ cibaAuthorizeAction.projectId }",
            storageBucket: "#{ cibaAuthorizeAction.storageBucket }",
            messagingSenderId: "#{ cibaAuthorizeAction.messagingSenderId }",
            appId: "#{ cibaAuthorizeAction.appId }"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        // [START get_messaging_object]
        // Retrieve Firebase Messaging object.
        const messaging = firebase.messaging();
        // [END get_messaging_object]
        // [START set_public_vapid_key]
        // Add the public key generated from the console here.
        messaging.usePublicVapidKey("#{ cibaAuthorizeAction.publicVapidKey }");
        // [END set_public_vapid_key]
        // IDs of divs that display Instance ID token UI or request permission UI.
        const tokenDivId = 'token_div';
        const permissionDivId = 'permission_div';

        var oxAuthIdToken = null;
        var idTokenHintLoaded = false;
        if (self.document.location.hash) {
            var hash = self.document.location.hash.substring(1);
            hash = decodeURI(hash.replace(/\+/g, " "));
            var params = hash.split("&amp;");

            if (params != null) {
                for (var i = 0; i &lt; params.length; i++) {
                    var param = params[i].split("=");

                    if (param[0] == "access_token") {
                        var accessToken = param[1];
                        //alert(accessToken);
                    } else if (param[0] == "id_token") {
                        oxAuthIdToken = param[1];

                        document.cookie = "id_token_hint = " + oxAuthIdToken + ";secure";
                        var tokenElement = document.querySelector('#oxAuthIdToken');
                        tokenElement.textContent = oxAuthIdToken;
                        idTokenHintLoaded = true;
                    }
                }
            }
        }
        if (!idTokenHintLoaded) {
            oxAuthIdToken = getCookie('id_token_hint');
            var tokenElement = document.querySelector('#oxAuthIdToken');
            tokenElement.textContent = oxAuthIdToken;
            idTokenHintLoaded = true;
        }

        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for(var i = 0; i &lt; ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

        // [START refresh_token]
        // Callback fired if Instance ID token is updated.
        messaging.onTokenRefresh(function() {
            messaging.getToken().then(function(refreshedToken) {
                console.log('Token refreshed.');
                // Indicate that the new Instance ID token has not yet been sent to the
                // app server.
                setTokenSentToServer(false);
                // Send Instance ID token to app server.
                sendTokenToServer(refreshedToken);
                // [START_EXCLUDE]
                // Display new Instance ID token and clear UI of all previous messages.
                resetUI();
                // [END_EXCLUDE]
            }).catch(function(err) {
                console.log('Unable to retrieve refreshed token ', err);
                showToken('Unable to retrieve refreshed token ', err);
            });
        });
        // [END refresh_token]
        // [START receive_message]
        // Handle incoming messages. Called when:
        // - a message is received while the app has focus
        // - the user clicks on an app notification created by a service worker
        //   `messaging.setBackgroundMessageHandler` handler.
        messaging.onMessage(function(payload) {
            console.log('Message received. ', payload);
            // [START_EXCLUDE]
            // Update the UI to include the received message.
            appendMessage(payload);
            window.location.href = payload.notification.click_action;
            // [END_EXCLUDE]
        });
        // [END receive_message]
        function resetUI() {
            clearMessages();
            showToken('loading...');
            // [START get_token]
            // Get Instance ID token. Initially this makes a network call, once retrieved
            // subsequent calls to getToken will return from cache.
            messaging.getToken().then(function(currentToken) {
                if (currentToken) {
                    sendTokenToServer(currentToken);
                    updateUIForPushEnabled(currentToken);
                } else {
                    // Show permission request.
                    console.log('No Instance ID token available. Request permission to generate one.');
                    // Show permission UI.
                    updateUIForPushPermissionRequired();
                    setTokenSentToServer(false);
                }
            }).catch(function(err) {
                console.log('An error occurred while retrieving token. ', err);
                showToken('Error retrieving Instance ID token. ', err);
                setTokenSentToServer(false);
            });
            // [END get_token]
        }
        function showToken(currentToken) {
            // Show token in console and UI.
            var tokenElement = document.querySelector('#token');
            tokenElement.textContent = currentToken;
        }
        // Send the Instance ID token your application server, so that it can:
        // - send messages back to this app
        // - subscribe/unsubscribe the token from topics
        function sendTokenToServer(currentToken) {
            if (!isTokenSentToServer()) {
                console.log('Sending token to server...');

                var http = new XMLHttpRequest();
                var url = "#{ cibaAuthorizeAction.backchannelDeviceRegistrationEndpoint }";
                var params = 'id_token_hint=' + oxAuthIdToken + '&amp;device_registration_token=' + currentToken;
                http.open('POST', url, true);
                //Send the proper header information along with the request
                http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                http.onreadystatechange = function() {
                    if (http.readyState == 4) {
                        if(http.status == 200)
                            console.log("Token sent to server successfully.");
                        else
                            console.log("Error sending the IID Token to the server.");
                    }
                }
                http.send(params);
                setTokenSentToServer(true);
            } else {
                console.log('Token already sent to server so won\'t send it again ' +
                    'unless it changes');
            }
        }
        function isTokenSentToServer() {
            return window.localStorage.getItem('sentToServer') === '1';
        }
        function setTokenSentToServer(sent) {
            window.localStorage.setItem('sentToServer', sent ? '1' : '0');
        }
        function showHideDiv(divId, show) {
            const div = document.querySelector('#' + divId);
            if (show) {
                div.style = 'display: visible';
            } else {
                div.style = 'display: none';
            }
        }

        function authenticateUser() {
            console.log('Authenticating user...');

            var authRequest = '#{ cibaAuthorizeAction.authRequest }';

            window.location.href = authRequest;
        }

        function requestPermission() {
            console.log('Requesting permission...');
            // [START request_permission]
            Notification.requestPermission().then(function(permission) {
                if (permission === 'granted') {
                    console.log('Notification permission granted.');
                    // TODO(developer): Retrieve an Instance ID token for use with FCM.
                    // [START_EXCLUDE]
                    // In many cases once an app has been granted notification permission,
                    // it should update its UI reflecting this.
                    resetUI();
                    // [END_EXCLUDE]
                } else {
                    console.log('Unable to get permission to notify.');
                }
            });
            // [END request_permission]
        }

        function deleteToken() {
            // Delete Instance ID token.
            // [START delete_token]
            messaging.getToken().then(function(currentToken) {
                messaging.deleteToken(currentToken).then(function() {
                    console.log('Token deleted.');
                    setTokenSentToServer(false);
                    // [START_EXCLUDE]
                    // Once token is deleted update UI.
                    resetUI();
                    // [END_EXCLUDE]
                }).catch(function(err) {
                    console.log('Unable to delete token. ', err);
                });
                // [END delete_token]
            }).catch(function(err) {
                console.log('Error retrieving Instance ID token. ', err);
                showToken('Error retrieving Instance ID token. ', err);
            });
        }
        // Add a message to the messages element.
        function appendMessage(payload) {
            const messagesElement = document.querySelector('#messages');
            const dataHeaderELement = document.createElement('h5');
            const dataElement = document.createElement('pre');
            dataElement.style = 'overflow-x:hidden;';
            dataHeaderELement.textContent = 'Received message:';
            dataElement.textContent = JSON.stringify(payload, null, 2);
            messagesElement.appendChild(dataHeaderELement);
            messagesElement.appendChild(dataElement);
        }
        // Clear the messages element of all children.
        function clearMessages() {
            const messagesElement = document.querySelector('#messages');
            while (messagesElement.hasChildNodes()) {
                messagesElement.removeChild(messagesElement.lastChild);
            }
        }
        function updateUIForPushEnabled(currentToken) {
            showHideDiv(tokenDivId, true);
            showHideDiv(permissionDivId, false);
            showToken(currentToken);
        }
        function updateUIForPushPermissionRequired() {
            showHideDiv(tokenDivId, false);
            showHideDiv(permissionDivId, true);
        }
        resetUI();
    </script>
    </body>
    </html>
</ui:composition>