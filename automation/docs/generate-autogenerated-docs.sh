#!/bin/bash
# Improved version of generate-autogenerated-docs.sh with error handling and dependency checks
set -euo pipefail

# The below variable represents the top level directory of the repository
MAIN_DIRECTORY_LOCATION=$1
echo "Generate autogenerated documents with improved error handling"

# Function to check if Maven is available
check_maven() {
    if ! command -v mvn &> /dev/null; then
        echo "ERROR: Maven (mvn) is not installed or not in PATH"
        echo "Please install Maven before running this script"
        return 1
    fi
    echo "Maven found: $(mvn --version | head -1)"
    return 0
}

# Function to check if Java is available
check_java() {
    if ! command -v java &> /dev/null; then
        echo "ERROR: Java is not installed or not in PATH"
        echo "Please install Java 11+ before running this script"
        return 1
    fi
    echo "Java found: $(java -version 2>&1 | head -1)"
    return 0
}

# Function to verify directory structure
verify_directories() {
    local required_dirs=(
        "$MAIN_DIRECTORY_LOCATION/jans-core"
        "$MAIN_DIRECTORY_LOCATION/jans-auth-server"
        "$MAIN_DIRECTORY_LOCATION/jans-fido2"
        "$MAIN_DIRECTORY_LOCATION/jans-scim"
        "$MAIN_DIRECTORY_LOCATION/jans-config-api"
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/properties"
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/feature-flags"
    )

    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            echo "ERROR: Required directory not found: $dir"
            return 1
        fi
    done
    echo "All required directories verified"
    return 0
}

# Function to compile a Maven module with error handling
compile_maven_module() {
    local pom_path=$1
    local module_name=$2
    local extra_args=${3:-""}

    echo "Compiling $module_name..."
    if ! mvn -q -f "$pom_path" $extra_args clean compile; then
        echo "ERROR: Failed to compile $module_name at $pom_path"
        return 1
    fi
    echo "Successfully compiled $module_name"
    return 0
}

# Function to move generated files with error handling
move_generated_file() {
    local source_path=$1
    local dest_path=$2
    local file_description=$3

    if [[ -f "$source_path" ]]; then
        if mv "$source_path" "$dest_path"; then
            echo "Successfully moved $file_description to $dest_path"
        else
            echo "ERROR: Failed to move $file_description from $source_path to $dest_path"
            return 1
        fi
    else
        echo "WARNING: Generated file not found: $source_path ($file_description)"
        echo "This might indicate the Maven compilation didn't generate the expected output"
        return 1
    fi
    return 0
}

# Main execution
main() {
    echo "Starting autogenerated docs generation process..."

    # Verify prerequisites
    if ! check_java; then
        exit 1
    fi

    if ! check_maven; then
        exit 1
    fi

    if ! verify_directories; then
        exit 1
    fi

    # Create backup of existing documentation if it exists
    backup_dir="$MAIN_DIRECTORY_LOCATION/docs-backup-$(date +%Y%m%d-%H%M%S)"
    if [[ -d "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json" ]]; then
        echo "Creating backup of existing documentation..."
        cp -r "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json" "$backup_dir"
        echo "Backup created at: $backup_dir"
    fi

    # Compile jans-core to pick-up any changes in annotation processors
    if ! compile_maven_module "$MAIN_DIRECTORY_LOCATION/jans-core/pom.xml" "jans-core" "-DskipTests install"; then
        echo "FATAL: Failed to compile jans-core, cannot continue"
        exit 1
    fi

    # Compile modules where classes that use these annotations exist
    # This will generate markdown files under target/classes directory in respective module
    compile_maven_module "$MAIN_DIRECTORY_LOCATION/jans-auth-server/pom.xml" "jans-auth-server" || echo "WARNING: jans-auth-server compilation failed"
    compile_maven_module "$MAIN_DIRECTORY_LOCATION/jans-fido2/pom.xml" "jans-fido2" || echo "WARNING: jans-fido2 compilation failed"
    compile_maven_module "$MAIN_DIRECTORY_LOCATION/jans-scim/pom.xml" "jans-scim" || echo "WARNING: jans-scim compilation failed"
    compile_maven_module "$MAIN_DIRECTORY_LOCATION/jans-config-api/pom.xml" "jans-config-api" "-DskipTests" || echo "WARNING: jans-config-api compilation failed"

    # Move markdown files generated in respective modules by @DocFeatureFlag and @DocProperty annotations
    echo "Moving generated documentation files..."

    # Note: The paths in the original script seem incorrect for the current directory structure
    # The original script references docs/admin/reference/json/properties but the actual path is docs/janssen-server/reference/json/properties

    move_generated_file \
        "$MAIN_DIRECTORY_LOCATION/jans-auth-server/model/target/classes/janssenauthserver-properties.md" \
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/properties/" \
        "Janssen Auth Server properties documentation" || echo "WARNING: Failed to move auth server properties"

    move_generated_file \
        "$MAIN_DIRECTORY_LOCATION/jans-auth-server/model/target/classes/janssenauthserver-feature-flags.md" \
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/feature-flags/" \
        "Janssen Auth Server feature flags documentation" || echo "WARNING: Failed to move auth server feature flags"

    move_generated_file \
        "$MAIN_DIRECTORY_LOCATION/jans-fido2/model/target/classes/fido2-properties.md" \
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/properties/" \
        "FIDO2 properties documentation" || echo "WARNING: Failed to move FIDO2 properties"

    move_generated_file \
        "$MAIN_DIRECTORY_LOCATION/jans-scim/model/target/classes/scim-properties.md" \
        "$MAIN_DIRECTORY_LOCATION/docs/janssen-server/reference/json/properties/" \
        "SCIM properties documentation" || echo "WARNING: Failed to move SCIM properties"

    echo "Autogenerated docs generation completed!"
    echo "Check the warnings above to see if any files were not generated or moved successfully."
}

# Run main function
main "$@"