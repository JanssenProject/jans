# IMPORTANT: Do not use this swagger doc to generate your client. Use the accompanying jans-scim-openapi 
# file which conforms to OAS 3. This file was written first and then converted to OAS using converter.swagger.io. 
# The response of /.search endpoint was enhanced there to use "oneOf" for inheritance, see 
# https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/
# Also some examples for endpoint parameters were added (seem not to be supported in 2.0). 

swagger: '2.0'

info:
  version: "5.0.0"
  title: SCIM API
  description: |
    Janssen SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality
    (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.
  license:
    name: Janssen License
    url: https://github.com/JanssenProject/blob/master/LICENSE

host: jenkins-ldap.jans.io

basePath: /jans-scim/restv1/v2
schemes:
 - https

tags:
 - name: user
   description: Endpoints for management of User resources
 - name: group
   description: Endpoints for management of Group resources
 - name: fido devices
   description: Endpoints for management of Fido devices
 - name: fido2 devices
   description: Endpoints for management of Fido2 devices
 - name: global search
   description: Search from service root
 - name: discovery
   description: Endpoints to facilitate discovery of SCIM service provider features 

produces:
  - application/scim+json
  - application/json
    
paths:

  /Groups:
    get:
      tags:
        - group
      operationId: get-groups

      description: Query Group resources (see section 3.4.2 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/groups.read]

      parameters:
        - 
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        - 
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: filter
          in: query
          description: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644
          type: string
        - 
          name: startIndex
          in: query
          description: The 1-based index of the first query result
          type: integer
        - 
          name: count
          in: query
          description: Specifies the desired maximum number of query results per page
          type: integer
        - 
          name: sortBy
          in: query
          description: The attribute whose value will be used to order the returned responses
          type: string
        - 
          name: sortOrder
          in: query
          description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending"
          type: string

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupListResponse'
        400:
          description: Parameter count exceeds the maximum allowed value or the filter supplied was unparsable
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - group
      operationId: create-group
      consumes:
        - application/scim+json
        - application/json

      description: Allows creating a Group resource via POST (see section 3.3 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/groups.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: group
          in: body
          description: Payload that represents the Group to create
          required: true
          schema:
            $ref: '#/definitions/GroupResource'

      responses:
        201:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupResource'
        400:
          description: An invalid value was passed in the payload
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: There is a conflict with an already existing group. Uniqueness is assumed over displayName  
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Groups/{id}:
    get:
      tags:
        - group
      operationId: get-group-by-id

      description: Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/groups.read]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupResource'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - group
      operationId: update-group-by-id
      consumes:
        - application/scim+json
        - application/json

      description: | 
        Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&#58; every
        attribute value found in the payload sent will replace the one in the existing resource representation. Attributes 
        not passed in the payload will be left intact.
      security:
        - scim_oauth: [https://jans.io/scim/groups.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: group
          in: body
          description: Payload with the data to replace in the existing group identified by the id param
          required: true
          schema:
            $ref: '#/definitions/GroupResource'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupResource'
        400:
          description: |
            An invalid value was passed in the payload or there was an attempt to update an immutable attribute
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: There is a conflict with an already existing group. Uniqueness is assumed over displayName  
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      tags:
        - group
      operationId: patch-group-by-id
      consumes:
        - application/scim+json
        - application/json

      description: | 
        Updates one or more attributes of a Group resource using a sequence of additions, removals, and 
        replacements operations. See section 3.5.2 of RFC 7644
      security:
        - scim_oauth: [https://jans.io/scim/groups.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: request
          in: body
          description: Payload describing the patch operations to apply upon the resource identified by param id
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupResource'
        400:
          description: |
            One or more operations supplied in the request are specified incorrectly, there were attempts to
            modify immutable attributes, or the resulting resource cannot pass intrinsic validations
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - group
      operationId: delete-group-by-id

      description: Deletes a group resource (see section 3.6 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/groups.write]

      parameters:
        -
          name: id
          in: path
          required: true
          type: string
          description: Identifier of the resource to delete

      responses:
        204:
          description: Successful operation. Empty response
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Groups/.search:
    post:
      tags:
        - group
      operationId: search-group
      consumes:
        - application/scim+json
        - application/json

      description: Query Group resources (see section 3.4.2 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/groups.read]
      
      parameters:
        -
          name: searchRequest
          in: body
          description: Payload that represents the search criteria
          required: true
          schema:
            $ref: '#/definitions/SearchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupListResponse'
        400:
          description: |
            Parameter count exceeds the maximum allowed value, the filter supplied was unparsable,
            or invalid schema in search request
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
      
  /FidoDevices:
    get:
      tags:
        - fido devices
      operationId: get-fido-devices

      description: Query Fido resources
      security:
        - scim_oauth: [https://jans.io/scim/fido.read]

      parameters:
        - 
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        - 
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: userId
          in: query
          description: Used to restrict the search to fido resources owned by a specific user
          type: string
        - 
          name: filter
          in: query
          description: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644
          type: string
        - 
          name: startIndex
          in: query
          description: The 1-based index of the first query result
          type: integer
        - 
          name: count
          in: query
          description: Specifies the desired maximum number of query results per page
          type: integer
        - 
          name: sortBy
          in: query
          description: The attribute whose value will be used to order the returned responses
          type: string
        - 
          name: sortOrder
          description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending"
          in: query
          type: string

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/FidoListResponse'
        400:
          description: Parameter count exceeds the maximum allowed value or the filter supplied was unparsable
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: If userId param was supplied and the user is not known 
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
            
  /FidoDevices/{id}:
    get:
      tags:
        - fido devices
      operationId: get-fido-device-by-id

      description: Retrieves a U2F/Super Gluu device by Id 
      security:
        - scim_oauth: [https://jans.io/scim/fido.read]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: userId
          in: query
          description: Identifier (inum) of the device owner. This param is not required when underlying database is LDAP
          type: string
        -
          name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/FidoDeviceResource'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - fido devices
      operationId: update-fido-device-by-id
      consumes:
        - application/scim+json
        - application/json
        
      description: | 
        Updates a Fido resource. Update works in a replacement fashion&#58; every
        attribute value found in the payload sent will replace the one in the existing resource representation. Attributes 
        not passed in the payload will be left intact.
      security:
        - scim_oauth: [https://jans.io/scim/fido.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: fidoDeviceResource
          in: body
          description: Payload with the data to replace in the existing device identified by the id param
          required: true
          schema:
            $ref: '#/definitions/FidoDeviceResource'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/FidoDeviceResource'
        400:
          description: |
            An invalid value was passed in the payload or there was an attempt to update an immutable attribute
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - fido devices
      operationId: delete-fido-device-by-id

      description: Deletes a Fido resource
      security:
        - scim_oauth: [https://jans.io/scim/fido.write]

      parameters:
        -
          name: id
          in: path
          required: true
          type: string
          description: Identifier of the resource to delete

      responses:
        204:
          description: Successful operation. Empty response
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /FidoDevices/.search:
    post:
      tags:
        - fido devices
      operationId: search-fido-device
      consumes:
        - application/scim+json
        - application/json

      description: Query Fido resources
      security:
        - scim_oauth: [https://jans.io/scim/fido.read]
      
      parameters:
        - 
          name: userId
          in: query
          description: Used to restrict the search to fido resources owned by a specific user
          type: string
        -
          name: searchRequest
          in: body
          description: Payload that represents the search criteria
          required: true
          schema:
            $ref: '#/definitions/SearchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/FidoListResponse'
        400:
          description: |
            Parameter count exceeds the maximum allowed value, the filter supplied was unparsable,
            or invalid schema in search request
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: If userId param was supplied and the user is not known 
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Fido2Devices:
    get:
      tags:
        - fido2 devices
      operationId: get-fido2-devices

      description: Query Fido 2 resources
      security:
        - scim_oauth: [https://jans.io/scim/fido2.read]

      parameters:
        - 
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        - 
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: userId
          in: query
          description: Used to restrict the search to fido 2 resources owned by a specific user
          type: string
        - 
          name: filter
          in: query
          description: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644
          type: string
        - 
          name: startIndex
          in: query
          description: The 1-based index of the first query result
          type: integer
        - 
          name: count
          in: query
          description: Specifies the desired maximum number of query results per page
          type: integer
        - 
          name: sortBy
          in: query
          description: The attribute whose value will be used to order the returned responses
          type: string
        - 
          name: sortOrder
          in: query
          description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending"
          type: string

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Fido2ListResponse'
        400:
          description: Parameter count exceeds the maximum allowed value or the filter supplied was unparsable
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: If userId param was supplied and the user is not known 
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Fido2Devices/{id}:
    get:
      tags:
        - fido2 devices
      operationId: get-fido2-device-by-id

      description: Retrieves a Fido 2 device by Id
      security:
        - scim_oauth: [https://jans.io/scim/fido2.read]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: userId
          in: query
          description: Identifier (inum) of the device owner. This param is not required when underlying database is LDAP
          type: string
        -
          name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Fido2DeviceResource'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - fido2 devices
      operationId: update-fido2-device-by-id
      consumes:
        - application/scim+json
        - application/json
        
      description: | 
        Updates a Fido 2 resource. Update works in a replacement fashion&#58; every
        attribute value found in the payload sent will replace the one in the existing resource representation. Attributes 
        not passed in the payload will be left intact.
      security:
        - scim_oauth: [https://jans.io/scim/fido2.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: fidoDeviceResource
          in: body
          description: Payload with the data to replace in the existing device identified by the id param
          required: true
          schema:
            $ref: '#/definitions/Fido2DeviceResource'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Fido2DeviceResource'
        400:
          description: |
            An invalid value was passed in the payload or there was an attempt to update an immutable attribute
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - fido2 devices
      operationId: delete-fido2-device-by-id

      description: Deletes a Fido 2 resource
      security:
        - scim_oauth: [https://jans.io/scim/fido2.write]

      parameters:
        -
          name: id
          in: path
          required: true
          type: string
          description: Identifier of the resource to delete

      responses:
        204:
          description: Successful operation. Empty response
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Fido2Devices/.search:
    post:
      tags:
        - fido2 devices
      operationId: search-fido2-device
      consumes:
        - application/scim+json
        - application/json

      description: Query Fido 2 resources
      security:
        - scim_oauth: [https://jans.io/scim/fido2.read]
      
      parameters:
        - 
          name: userId
          in: query
          description: Used to restrict the search to fido 2 resources owned by a specific user
          type: string
        -
          name: searchRequest
          in: body
          description: Payload that represents the search criteria
          required: true
          schema:
            $ref: '#/definitions/SearchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Fido2ListResponse'
        400:
          description: |
            Parameter count exceeds the maximum allowed value, the filter supplied was unparsable,
            or invalid schema in search request
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: If userId param was supplied and the user is not known 
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
            
  /Users:
    get:
      tags:
        - user
      operationId: get-users

      description: Query User resources (see section 3.4.2 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/users.read]

      parameters:
        - 
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        - 
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        - 
          name: filter
          in: query
          description: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644
          type: string
        - 
          name: startIndex
          in: query
          description: The 1-based index of the first query result
          type: integer
        - 
          name: count
          in: query
          description: Specifies the desired maximum number of query results per page
          type: integer
        - 
          name: sortBy
          in: query
          description: The attribute whose value will be used to order the returned responses
          type: string
        - 
          name: sortOrder
          in: query
          description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending"
          type: string

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserListResponse'
        400:
          description: Parameter count exceeds the maximum allowed value or the filter supplied was unparsable
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - user
      operationId: create-user
      consumes:
        - application/scim+json
        - application/json

      description: Allows creating a User resource via POST (see section 3.3 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/users.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: user
          in: body
          description: Payload that represents the Group to create
          required: true
          schema:
            $ref: '#/definitions/UserResource'

      responses:
        201:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserResource'
        400:
          description: An invalid value was passed in the payload
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: There is a conflict with an already existing user. Uniqueness is assumed over userName  
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Users/{id}:
    get:
      tags:
        - user
      operationId: get-user-by-id

      description: Retrieves a User resource by Id (see section 3.4.1 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/users.read]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserResource'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      tags:
        - user
      operationId: update-user-by-id
      consumes:
        - application/scim+json
        - application/json

      description: | 
        Updates a User resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&#58; every
        attribute value found in the payload sent will replace the one in the existing resource representation. Attributes 
        not passed in the payload will be left intact.
      security:
        - scim_oauth: [https://jans.io/scim/users.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: user
          in: body
          description: Payload with the data to replace in the existing user identified by the id param
          required: true
          schema:
            $ref: '#/definitions/UserResource'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserResource'
        400:
          description: |
            An invalid value was passed in the payload or there was an attempt to update an immutable attribute
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: There is a conflict with an already existing group. Uniqueness is assumed over displayName  
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      tags:
        - user
      operationId: patch-user-by-id
      consumes:
        - application/scim+json
        - application/json

      description: | 
        Updates one or more attributes of a User resource using a sequence of additions, removals, and 
        replacements operations. See section 3.5.2 of RFC 7644
      security:
        - scim_oauth: [https://jans.io/scim/users.write]

      parameters:
        -
          name: attributes
          in: query
          description: A comma-separated list of attribute names to return in the response
          type: string
        -
          name: excludedAttributes
          in: query
          description: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list)
          type: string
        -
          name: id
          in: path
          required: true
          type: string
        -
          name: request
          in: body
          description: Payload describing the patch operations to apply upon the resource identified by param id
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserResource'
        400:
          description: |
            One or more operations supplied in the request are specified incorrectly, there were attempts to
            modify immutable attributes, or the resulting resource cannot pass intrinsic validations
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - user
      operationId: delete-user-by-id

      description: Deletes a user resource
      security:
        - scim_oauth: [https://jans.io/scim/users.write]

      parameters:
        -
          name: id
          in: path
          required: true
          type: string
          description: Identifier of the resource to delete

      responses:
        204:
          description: Successful operation. Empty response
        404:
          description: Id passed unknown
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Users/.search:
    post:
      tags:
        - user
      operationId: search-user
      consumes:
        - application/scim+json
        - application/json

      description: Query User resources (see section 3.4.2 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/users.read]
      
      parameters:
        -
          name: searchRequest
          in: body
          description: Payload that represents the search criteria
          required: true
          schema:
            $ref: '#/definitions/SearchRequest'

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/UserListResponse'
        400:
          description: |
            Parameter count exceeds the maximum allowed value, the filter supplied was unparsable,
            or invalid schema in search request
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /.search:
    post:
      tags:
        - global search
      operationId: search-resources
      consumes:
        - application/scim+json
        - application/json

      description: |
        Search (from system root) for one or more resource (see section 3.4.3 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/all-resources.search]
        
      parameters:
        -
          name: searchRequest
          in: body
          description: Payload that represents the search criteria
          required: true
          schema:
            $ref: '#/definitions/SearchRequest'

      responses:
        200:
          description: Successful operation
        400:
          description: |
            Parameter count exceeds the maximum allowed value, the filter supplied was unparsable,
            or invalid schema in search request
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /Bulk:
    post:
      consumes:
        - application/scim+json
        - application/json

      description: Send several resource operations in a single request (see section 3.7 of RFC 7644)
      security:
        - scim_oauth: [https://jans.io/scim/bulk]
      
      parameters:
        -
          name: request
          in: body
          description: Payload describing the operations to perform
          required: true
          schema:
            $ref: '#/definitions/BulkRequest'

      responses:
        200:
          description: |
            Successful operation. Every individual operation will report its own output status.
            Reponses are only included for failed operations.
          schema:
            $ref: '#/definitions/BulkData'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /ServiceProviderConfig:
    get:
      tags:
        - discovery
      operationId: get-service-provider-config
      description: Describes the SCIM specification features available (see section 5 of RFC 7644)
      produces:
        - application/scim+json

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/ServiceProviderConfigResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'

  /ResourceTypes:
    get:
      tags:
        - discovery
      operationId: get-resource-types
      description: |
        This endpoint is used to discover the types of resources available (see section 4 of RFC 7644)
      produces:
        - application/scim+json

      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/ResourceTypeListResponse'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
      
  /ResourceTypes/{resource}:
    get:
      tags:
        - discovery
      operationId: get-resource-type-by-id
      description: |
        Describes the endpoint, schemas and extensions supported by a specific kind of resource.
        It returns a specific portion of the ouput of the more general /Resources endpoint
      produces:
        - application/scim+json
      
      parameters:
        -
          name: resource
          in: path
          required: true
          type: string
          enum:
            - User
            - Group
            - FidoDevice
            - Fido2Device
            
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/ResourceType'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
    
  /Schemas:
    get:
      tags:
        - discovery
      operationId: get-schemas
      description: |
        Endpoint used to retrieve information about schemas supported (see section 
        4 of RFC 7644)
      produces:
        - application/scim+json
      
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/SchemaListResponse'        
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
    
  /Schemas/{uri}:
    get:
      tags:
        - discovery
      operationId: get-schema-by-uri
      description: Retrieves information about a specific resource
      produces:
        - application/scim+json 
      
      parameters:
        -
          name: uri
          in: path
          required: true
          description: Schema URI of a particular resource type 
          type: string
          enum:
            - urn:ietf:params:scim:schemas:core:2.0:User
            - urn:ietf:params:scim:schemas:extension:gluu:2.0:User
            - urn:ietf:params:scim:schemas:core:2.0:Group
            - urn:ietf:params:scim:schemas:core:2.0:Fido2Device
            - urn:ietf:params:scim:schemas:core:2.0:FidoDevice
            
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/SchemaResource'
        500:
          description: There was an unexpected failure executing the operation
          schema:
            $ref: '#/definitions/ErrorResponse'
    
definitions:
  SearchRequest:
    description: See section 3.4.3 of RFC 7644
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:api:messages:2.0:SearchRequest"
      attributes:
        type: array
        description: A list of attribute names to return in the response
        items:
          type: string
      excludedAttributes:
        type: array
        description: When specified, the response will contain a default set of attributes minus those listed here
        items:
          type: string
      filter:
        type: string
        description: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644
        example: userName eq "jhon" and meta.lastModified gt "2011-05-13T04:42:34Z"
      sortBy:
        type: string
        description: The attribute whose value will be used to order the returned responses
      sortOrder:
        type: string
        description: Order in which the sortBy param is applied. Allowed values are "ascending" and "descending"
      startIndex:
        type: integer
        description: The 1-based index of the first query result
      count:
        type: integer
        description: Specifies the desired maximum number of query results per page  
  ErrorResponse:
    description: See section 3.12 of RFC 7644
    type: object
    required:
      - status
      - schema
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:api:messages:2.0:Error"
      status:
        type: string
        description: HTTP status code as string
      scimType:
        type: string
        description: A detail error keyword. See table 9 of RFC 7644
      detail:
        type: string
        description: A detailed human-readable message of the error
  AuthenticationScheme:
    description: See section 5 of RFC 7643
    type: object
    required:
    - type
    - name
    - description
    properties:
      type:
        type: string
        example: oauth2
      name:
        type: string
      description:
        type: string
      specUri:
        type: string
      documentationUri:
        type: string
      primary:
        type: boolean
  ServiceProviderConfigResponse:
    description: See section 5 of RFC 7643
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig"
      meta:
        type: object
        properties:
          resourceType:
            type: string
          location:
            type: string
      documentationUri:
        type: string
      patch:
        type: object
        properties:
          supported:
            type: boolean
      bulk:
        type: object
        properties:
          supported:
            type: boolean
          maxOperations:
            type: integer
          maxPayloadSize:
            type: integer
      filter:
        type: object
        properties:
          supported:
            type: boolean
          maxResults:
            type: integer   
      changePassword:
        type: object
        properties:
          supported:
            type: boolean
      sort:
        type: object
        properties:
          supported:
            type: boolean
      etag:
        type: object
        properties:
          supported:
            type: boolean
      authenticationSchemes:
        type: array
        items:
          $ref: "#/definitions/AuthenticationScheme"
  ResourceType:
    description: See section 6 of RFC 7643
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
      id:
        type: string
      meta:
        type: object
        properties:
          resourceType:
            type: string
          location:
            type: string
      name:
        type: string
      description:
        type: string
      endpoint:
        type: string
      schema:
        type: string
      schemaExtensions:
        type: object
        properties:
          schema:
            type: string
          required:
            type: boolean
  SchemaAttribute:
    description: A recursive definition. Note how property subAttributes reuses SchemaAttribute for its definition
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      subAttributes:
        type: array
        items:
          $ref: "#/definitions/SchemaAttribute"
      multiValued:
        type: boolean
      description:
        type: string
      required:
        type: string
      canonicalValues:
        type: array
        items:
          type: string
      caseExact:
        type: boolean
      mutability:
        type: string
      returned:
        type: string
      uniqueness:
        type: string
      referenceTypes:
        type: array
        items:
          type: string
  SchemaResource:
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:schemas:core:2.0:Schema"
      id:
        type: string
      meta:
        type: object
        properties:
          resourceType:
            type: string
          location:
            type: string
      name:
        type: string
      description:
        type: string
      attributes:
        type: array
        items:
          $ref: "#/definitions/SchemaAttribute"
  BasicListResponse:
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:api:messages:2.0:ListResponse"
      totalResults:
        type: integer
        description: Total number of results returned by the search. The value may be larger than the number of resources returned due to pagination
      startIndex:
        type: integer
        description: The 1-based index of the first result in the current set of search results
      itemsPerPage:
        type: integer
        description: The number of resources returned in a results page
  GroupListResponse:
    description: Results for groups search. See section 3.4.2.4 of RFC 7644
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/GroupResource"
  FidoListResponse:
    description: Results for fido devices search
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/FidoDeviceResource"
  Fido2ListResponse:
    description: Results for fido 2 devices search
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/Fido2DeviceResource"
  UserListResponse:
    description: Results for users search. See section 3.4.2.4 of RFC 7644
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/UserResource"
  ResourceTypeListResponse:
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/ResourceType"
  SchemaListResponse:
    allOf: 
      - $ref: '#/definitions/BasicListResponse'
      - type: object
      - properties:
          Resources:
            type: array
            items:
              $ref: "#/definitions/SchemaResource"
  PatchOperation:
    description: See section 3.5.2 of RFC 7644
    type: object
    required:
      - op
    properties:
      op:
        type: string
        description: The kind of operation to perform
        enum:
          - add
          - remove
          - replace
      path:
        type: string
        description: Required when op is remove, optional otherwise
      value:
        type: object
        description: Only required when op is add or replace
  PatchRequest:
    type: object
    description: Stores one or more patch operations
    required:
      - Operations
    properties:
      schemas:
        type: array
        items:
          type: string
          example: "urn:ietf:params:scim:api:messages:2.0:PatchOp"
      Operations:
        type: array
        items:
          $ref: '#/definitions/PatchOperation'
  BulkOperation:
    description: See section 3.7 of RFC 7644
    type: object
    properties:
      method:
        type: string
        example: PUT
      bulkId:
        type: string
        description: |
          Used to bind the id generated for a created resource (via POST) to a named variable for later reuse
      path:
        type: string
        description: Path of the endpoint the operation uses relative to the server root, eg. /Users  
      data:
        type: object
        description: Payload associated to this operation
      location:
        type: string
        description: Used in responses of POST operations
      response:
        type: object
      status:
        type: string
  BulkData:
    type: object
    description: Used to encapsulate one or more succesive SCIM operations in a single request
    properties:
      schemas:
        type: array
        items:
          type: string
      Operations:
        type: array
        items:
          $ref: '#/definitions/BulkOperation'
  BulkRequest:
    allOf: 
      - $ref: '#/definitions/BulkData'
      - type: object
      - properties:
          failOnErrors:
            type: integer
            description: The number of errors that can be accepted before the Bulk request is terminated and a response is returned
  Meta:
    description: Descriptive information about a resource. See section 3.1 of RFC 7643
    type: object
    properties:
      resourceType:
        type: string
      created:
        type: string
      lastModified:
        type: string
      location:
        type: string
  Member:
    type: object
    description: Represents a member of a Group resource
    properties:
      $ref:
        type: string
        description: URI of the SCIM resource
      type:
        type: string
        description: The type of member. Only "User" is allowed
      display:
        type: string
        description: A human readable name, primarily used for display purposes
      value:
        type: string
        description: Identifier (ID) of the resource
  Name:
    description: See section 4.1.1 of RFC 7643
    type: object
    properties:
      familyName:
        type: string
      givenName:
        type: string
      middleName:
        type: string
      honorificPrefix:
        type: string
        description: A "title" like "Ms.", "Mrs."
      honorificSuffix:
        type: string
        description: Name suffix, like "Junior", "The great", "III"
      formatted:
        type: string
        description: Full name, including all middle names, titles, and suffixes as appropriate
  Email:
    description: See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        example: gossow@nsfw.com
      display:
        type: string
      type:
        type: string
        example: work
      primary:
        type: boolean
        description: Denotes if this is the preferred e-mail among others, if any
  PhoneNumber:
    description: See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        example: +1-555-555-8377
      display:
        type: string
      type:
        type: string
        example: fax
      primary:
        type: boolean
        description: Denotes if this is the preferred phone number among others, if any 
  InstantMessagingAddress:
    description: See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
      display:
        type: string
      type:
        type: string
        example: gtalk
      primary:
        type: boolean
        description: Denotes if this is the preferred messaging addressed among others, if any
  Photo:
    description: Points to a resource location representing the user's image. See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        example: "https://pics.nsfw.com/gossow.png"
      display:
        type: string
      type:
        type: string
        example: thumbnail
      primary:
        type: boolean
        description: Denotes if this is the preferred photo among others, if any
  Address:
    description: Physical mailing address for this user. See section 4.1.2 of RFC 7643
    type: object
    properties:
      formatted:
        type: string
        description: Full mailing address, formatted for display or use with a mailing label
      streetAddress:
        type: string
        example: 56 Acacia Avenue
      locality:
        type: string
        description: City or locality of the address
      region:
        type: string
        description: State or region of the address
      postalCode:
        type: string
        description: Zip code
      country:
        type: string
        description: Country expressed in ISO 3166-1 "alpha-2" code format
        example: UK
      type:
        type: string
        example: home
      primary:
        type: boolean
        description: Denotes if this is the preferred address among others, if any
  Group:
    description: See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        description: Group identifier
        example: 180ee84f0671b1
      $ref:
        type: string
        description: URI associated to the group
        example: "https://nsfw.com/scim/restv1/v2/Groups/180ee84f0671b1"
      display:
        type: string
        example: Cult managers
      type:
        type: string
        description: Describes how the group membership was derived
        example: direct
  Entitlement:
    description: Entitlements represent things a user has, like rights. See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        example: Stakeholder
      display:
        type: string
      type:
        type: string
      primary:
        type: boolean
        description: Denotes if this is the preferred entitlement among others, if any
  Role:
    description: See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        example: Project manager
      display:
        type: string
      type:
        type: string
      primary:
        type: boolean
        description: Denotes if this is the preferred role among others, if any
  X509Certificate:
    description: A certificate associated with the user. See section 4.1.2 of RFC 7643
    type: object
    properties:
      value:
        type: string
        description: DER-encoded X.509 certificate
      display:
        type: string
      type:
        type: string
      primary:
        type: boolean
        description: Denotes if this is the preferred certificate among others, if any
  BaseResource:
    type: object
    properties:
      schemas:
        type: array
        items:
          type: string
        description: URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes present in the current structure
      id:
        type: string
        description: A unique identifier for a SCIM resource. See section 3.1 of RFC 7643
      meta:
        $ref: '#/definitions/Meta'
  GroupResource:
    description: Represents a group resource. See section 4.2 of RFC 7643
    allOf: 
      - $ref: '#/definitions/BaseResource'
      - type: object
      - properties:
          displayName:
            type: string
            description: Group name suitable for display to end-users
          members:
            type: array
            items:
              $ref: '#/definitions/Member'
  FidoDeviceResource:
    description: Represents a device enrollment like an U2F security key or a Super Gluu device
    allOf: 
      - $ref: '#/definitions/BaseResource'
      - type: object
      - properties:
          userId:
            description: Identifies the owner of the enrollment
            type: string
          creationDate:
            description: Date of enrollment in ISO format
            type: string
            format: date-time
          application:
            description: Associated U2F application ID
            type: string
          counter:
            description: Value used in the Fido U2F endpoints
            type: integer
          deviceData:
            description: A Json representation of low-level attributes of this enrollment
            type: string
          deviceHashCode:
            type: integer
          deviceKeyHandle:
            type: string
          deviceRegistrationConf:
            type: string
          lastAccessTime:
            description: When this device was last used (eg. in order to log into an application) 
            type: string
            format: date-time
          status: 
            type: string
            enum:
              - active
              - compromised
          displayName:
            description: Device name suitable for display to end-users
            type: string
          description:
            type: string
  Fido2DeviceResource:
    description: Represents a Fido 2 device enrollment
    allOf: 
      - $ref: '#/definitions/BaseResource'
      - type: object
      - properties:
          userId:
            description: Identifies the owner of the enrollment
            type: string
          creationDate:
            description: Date of enrollment in ISO format
            type: string
            format: date-time
          counter:
            description: Value used in the Fido 2 endpoints
            type: integer
          status: 
            type: string
            enum:
              - registered
              - pending
          displayName:
            type: string
            description: Device name suitable for display to end-users
  UserResource:
    description: Represents a user resource. See section 4.1 of RFC 7643
    allOf: 
      - $ref: '#/definitions/BaseResource'
      - type: object
      - properties:
          externalId:
            type: string
            description: Identifier of the resource useful from the perspective of the provisioning client. See section 3.1 of RFC 7643
          userName:
            type: string
            description: Identifier for the user, typically used by the user to directly authenticate (id and externalId are opaque identifiers generally not known by users)
          name:
            $ref: '#/definitions/Name'
          displayName:
            type: string
            description: Name of the user suitable for display to end-users
          nickName:
            type: string
            description: Casual way to address the user in real life
          profileUrl:
            type: string
            description: URI pointing to a location representing the User's online profile
          title:
            type: string
            example: Vice President
          userType:
            type: string
            description: Used to identify the relationship between the organization and the user
            example: Contractor
          preferredLanguage:
            type: string
            description: Preferred language as used in the Accept-Language HTTP header
            example: en
          locale:
            type: string
            description: Used for purposes of localizing items such as currency and dates
            example: en-US
          timezone:
            type: string
            example: America/Los_Angeles
          active:
            type: boolean
          password:
            type: string
          emails:
            type: array
            items:
              $ref: '#/definitions/Email'
          phoneNumbers:
            type: array
            items:
              $ref: '#/definitions/PhoneNumber'
          ims:
            type: array
            items:
              $ref: '#/definitions/InstantMessagingAddress'
          photos:
            type: array
            items:
              $ref: '#/definitions/Photo'
          addresses:
            type: array
            items:
              $ref: '#/definitions/Address'
          groups:
            type: array
            items:
              $ref: '#/definitions/Group'
          entitlements:
            type: array
            items:
              $ref: '#/definitions/Entitlement'
          roles:
            type: array
            items:
              $ref: '#/definitions/Role'
          x509Certificates:
            type: array
            items:
              $ref: '#/definitions/X509Certificate'
          urn:ietf:params:scim:schemas:extension:gluu:2.0:User:
            description: Extended attributes
            type: object

securityDefinitions:
  scim_oauth:
    type: oauth2
    description: Endpoints protected by a bearer token passed in the Authorization header.
    flow: application
    tokenUrl: https://jenkins-ldap.jans.io/jans-auth/restv1/token
    scopes:
      https://jans.io/scim/users.read: Query user resources
      https://jans.io/scim/users.write: Modify user resources
      https://jans.io/scim/groups.read: Query group resources
      https://jans.io/scim/groups.write: Modify group resources
      https://jans.io/scim/fido.read: Query fido resources
      https://jans.io/scim/fido.write: Modify fido resources
      https://jans.io/scim/fido2.read: Query fido 2 resources
      https://jans.io/scim/fido2.write: Modify fido 2 resources
      https://jans.io/scim/all-resources.search: Access the root .search endpoint 
      https://jans.io/scim/bulk: Send requests to the bulk endpoint
