#!/usr/bin/env bash
#
# Startup script for node under *nix systems (it works under NT/cygwin too).

##################################################
# Set the name which is used by other variables.
# Defaults to the file name without extension.
##################################################
NAME=$(echo $(basename $0) | sed -e 's/^[SK][0-9]*//' -e 's/\.sh$//')

# To get the service to restart correctly on reboot, uncomment below (3 lines):
# ========================
# chkconfig: 3 99 99
# description: Node webserver
# processname: node
# ========================

# Configuration files
#
# /etc/default/$NAME
#   If it exists, this is read at the start of script. It may perform any
#   sequence of shell commands, like setting relevant environment variables.
#
# $HOME/.$NAMErc (e.g. $HOME/.noderc)
#   If it exists, this is read at the start of script. It may perform any
#   sequence of shell commands, like setting relevant environment variables.
#
# /etc/$NAME.conf
#   If found, and no configurations were given on the command line,
#   the file will be used as this script's configuration.
#   Each line in the file may contain:
#     - A comment denoted by the pound (#) sign as first non-blank character.
#     - The path to a regular file, which will be passed to node as a
#       config.xml file.
#     - The path to a directory. Each *.xml file in the directory will be
#       passed to node as a config.xml file.
#     - All other lines will be passed, as-is to the start.jar
#
#   The files will be checked for existence before being passed to node.
#
# Configuration variables
#
# NODE
#   Command to invoke Node. If not set, node (from the PATH) will be used.
#
# NODE_OPTIONS
#   Extra options to pass to the NODE
#
# NODE_HOME
#   Where Node is installed. If not set, the script will try go
#   guess it by looking at the invocation path for the script
#   The node system property "node.home" will be
#   set to this value for use by configure.xml files, f.e.:
#
# NODE_BASE
#   Where your Node base directory is.
#
# NODE_APP
#   Node application startup script
#
#   For example
#      NODE_APP=app.js
#
# NODE_RUN
#   Where the $NAME.pid file should be stored. It defaults to the
#   first available of /var/run, /usr/var/run, NODE_BASE and /tmp
#   if not set.
#
# NODE_PID
#   The Node PID file, defaults to $NODE_RUN/$NAME.pid
#
# NODE_ARGS
#   The default arguments to pass to Node.
#
# APP_ARGS
#   The default arguments to pass to Application.
#
# NODE_USER
#   if set, then used as a username to run the server as
#
# NODE_SHELL
#   If set, then used as the shell by su when starting the server.  Will have
#   no effect if start-stop-daemon exists.  Useful when NODE_USER does not
#   have shell access, e.g. /bin/false
#

usage()
{
    echo "Usage: ${0##*/} [-d] {start|stop|run|restart|check|supervise} [ CONFIGS ... ] "
    exit 1
}

[ $# -gt 0 ] || usage


##################################################
# Some utility functions
##################################################
findDirectory()
{
  local L OP=$1
  shift
  for L in "$@"; do
    [ "$OP" "$L" ] || continue
    printf %s "$L"
    break
  done
}

running()
{
  if [ -f "$1" ]
  then
    local PID=$(cat "$1" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null
    return
  fi
  rm -f "$1"
  return 1
}

started()
{
  # wait for 60s to see "STARTED" in PID file, needs node-started.xml as argument
  for T in 1 2 3 4 5 6 7 9 10 11 12 13 14 15
  do
    sleep 4
    [ -z "$(grep STARTED $1 2>/dev/null)" ] || return 0
    [ -z "$(grep STOPPED $1 2>/dev/null)" ] || return 1
    [ -z "$(grep FAILED $1 2>/dev/null)" ] || return 1
    local PID=$(cat "$2" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null || return 1
    echo -n ". "
  done

  return 1;
}


readConfig()
{
  (( DEBUG )) && echo "Reading $1.."
  source "$1"
}



##################################################
# Get the action & configs
##################################################
CONFIGS=()
NO_START=0
DEBUG=0

while [[ $1 = -* ]]; do
  case $1 in
    -d) DEBUG=1 ;;
  esac
  shift
done
ACTION=$1
shift

##################################################
# Read any configuration files
##################################################
ETC=/etc
if [ $UID != 0 ]
then
  ETC=$HOME/etc
fi

for CONFIG in {/etc,~/etc}/default/${NAME}{,9} $HOME/.${NAME}rc; do
  if [ -f "$CONFIG" ] ; then
    readConfig "$CONFIG"
  fi
done


##################################################
# Set tmp if not already set.
##################################################
TMPDIR=${TMPDIR:-/tmp}

##################################################
# Node's hallmark
##################################################
NODE_INSTALL_TRACE_FILE="node"


##################################################
# No NODE_HOME yet? We're out of luck!
##################################################
if [ -z "$NODE_HOME" ]; then
  echo "** ERROR: NODE_HOME not set, you need to set it or install in a standard location"
  exit 1
fi

cd "$NODE_HOME"
NODE_HOME=$PWD


##################################################
# Set NODE_BASE
##################################################
if [ -z "$NODE_BASE" ]; then
  echo "** ERROR: NODE_BASE not set, you need to set it or install in a standard location"
  exit 1
fi

cd "$NODE_BASE"
NODE_BASE=$PWD


#####################################################
# Check that Node is where we think it is
#####################################################
if [ ! -r "$NODE_HOME/bin/$NODE_INSTALL_TRACE_FILE" ]
then
  echo "** ERROR: Oops! Node doesn't appear to be installed in $NODE_HOME"
  echo "** ERROR:  $NODE_HOME/bin/$NODE_INSTALL_TRACE_FILE is not readable!"
  exit 1
fi

##################################################
# Try to find this script's configuration file,
# but only if no configurations were given on the
# command line.
##################################################
if [ -z "$NODE_CONF" ]
then
  if [ -f $ETC/${NAME}.conf ]
  then
    NODE_CONF=$ETC/${NAME}.conf
  elif [ -f "$NODE_BASE/etc/node.conf" ]
  then
    NODE_CONF=$NODE_BASE/etc/node.conf
  elif [ -f "$NODE_HOME/etc/node.conf" ]
  then
    NODE_CONF=$NODE_HOME/etc/node.conf
  fi
fi

#####################################################
# Find a location for the pid file
#####################################################
if [ -z "$NODE_RUN" ]
then
  NODE_RUN=$(findDirectory -w /var/run /usr/var/run $NODE_BASE /tmp)
fi

#####################################################
# Find a pid and state file
#####################################################
if [ -z "$NODE_PID" ]
then
  NODE_PID="$NODE_RUN/${NAME}.pid"
fi

if [ -z "$NODE_STATE" ]
then
  NODE_STATE=$NODE_BASE/${NAME}.state
fi

case "`uname`" in
CYGWIN*) NODE_STATE="`cygpath -w $NODE_STATE`";;
esac


NODE_ARGS=(${NODE_ARGS[*]})
APP_ARGS=(${APP_ARGS[*]})

##################################################
# Get the list of config.xml files from node.conf
##################################################
if [ -f "$NODE_CONF" ] && [ -r "$NODE_CONF" ]
then
  while read -r CONF
  do
    if expr "$CONF" : '#' >/dev/null ; then
      continue
    fi

    if [ -d "$CONF" ]
    then
      # assume it's a directory with configure.xml files
      # for example: /etc/node.d/
      # sort the files before adding them to the list of NODE_ARGS
      for XMLFILE in "$CONF/"*.xml
      do
        if [ -r "$XMLFILE" ] && [ -f "$XMLFILE" ]
        then
          NODE_ARGS=(${NODE_ARGS[*]} "$XMLFILE")
        else
          echo "** WARNING: Cannot read '$XMLFILE' specified in '$NODE_CONF'"
        fi
      done
    else
      # assume it's a command line parameter (let start.jar deal with its validity)
      NODE_ARGS=(${NODE_ARGS[*]} "$CONF")
    fi
  done < "$NODE_CONF"
fi

##################################################
# Setup NODE if unset
##################################################
if [ -z "$NODE" ]
then
  NODE=$(which node)
fi

if [ -z "$NODE" ]
then
  echo "Cannot find a Node. Please set either set NODE or put node in your PATH." >&2
  exit 1
fi

#####################################################
# See if NODE_LOGS is defined
#####################################################
if [ -z "$NODE_LOGS" ] && [ -d $NODE_BASE/logs ]
then
  NODE_LOGS=$NODE_BASE/logs
fi
if [ -z "$NODE_LOGS" ] && [ -d $NODE_HOME/logs ]
then
  NODE_LOGS=$NODE_HOME/logs
fi
if [ "$NODE_LOGS" ]
then

  case "`uname`" in
  CYGWIN*) NODE_LOGS="`cygpath -w $NODE_LOGS`";;
  esac

  NODE_OPTIONS=(${NODE_OPTIONS[*]} "NODE_LOGGING_DIR=$NODE_LOGS")
fi

#####################################################
# Are we running on Windows? Could be, with Cygwin/NT.
#####################################################
case "`uname`" in
CYGWIN*) PATH_SEPARATOR=";";;
*) PATH_SEPARATOR=":";;
esac


#####################################################
# Add Node properties to Node options.
#####################################################

case "`uname`" in
CYGWIN*)
NODE_HOME="`cygpath -w $NODE_HOME`"
NODE_BASE="`cygpath -w $NODE_BASE`"
TMPDIR="`cygpath -w $TMPDIR`"
;;
esac

NODE_OPTIONS=(${NODE_OPTIONS[*]})

#####################################################
# This is how the Node server will be started
#####################################################

NODE_START=$NODE_BASE/$NODE_APP

case "`uname`" in
CYGWIN*) NODE_START="`cygpath -w $NODE_START`";;
esac

RUN_NODE_ARGS=(${NODE_OPTIONS[@]})
RUN_ARGS=(${NODE_ARGS[*]} "$NODE_START" ${APP_ARGS[*]})
RUN_CMD=(${NODE_OPTIONS[@]} "$NODE" ${RUN_ARGS[@]})

#####################################################
# Comment these out after you're happy with what
# the script is doing.
#####################################################
if (( DEBUG ))
then
  echo "NODE_HOME     =  $NODE_HOME"
  echo "NODE_BASE     =  $NODE_BASE"
  echo "NODE_CONF     =  $NODE_CONF"
  echo "NODE_PID      =  $NODE_PID"
  echo "NODE_START    =  $NODE_START"
  echo "NODE_ARGS     =  ${NODE_ARGS[*]}"
  echo "NODE_OPTIONS   =  ${NODE_OPTIONS[*]}"
  echo "NODE           =  $NODE"
  echo "RUN_CMD        =  ${RUN_CMD[*]}"
fi

##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
    echo -n "Starting Node: "

    if (( NO_START )); then
      echo "Not starting ${NAME} - NO_START=1";
      exit
    fi

    if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1
    then
      unset CH_USER
      if [ -n "$NODE_USER" ]
      then
        CH_USER="-c$NODE_USER"
      fi

      start-stop-daemon -S -p"$NODE_PID" $CH_USER -d"$NODE_BASE" -b -m -a "/bin/bash" -- -c "exec /usr/bin/env ${NODE_OPTIONS[*]} $NODE ${RUN_ARGS[*]} start-log-file=$NODE_LOGS/start.log >> $NODE_LOGS/start.log 2>&1"

    else

      if running $NODE_PID
      then
        echo "Already Running $(cat $NODE_PID)!"
        exit 1
      fi

      if [ -n "$NODE_USER" ] && [ `whoami` != "$NODE_USER" ]
      then
        unset SU_SHELL
        if [ "$NODE_SHELL" ]
        then
          SU_SHELL="-s $NODE_SHELL"
        fi

        touch "$NODE_PID"
        chown "$NODE_USER" "$NODE_PID"
        # FIXME: Broken solution: wordsplitting, pathname expansion, arbitrary command execution, etc.
        su - "$NODE_USER" $SU_SHELL -c "
          exec /usr/bin/env ${RUN_CMD[*]} start-log-file=$NODE_LOGS/start.log >> $NODE_LOGS/start.log 2>&1 &
          disown \$!
          echo \$! > '$NODE_PID'"
      else
        "${RUN_CMD[@]}" > /dev/null &
        disown $!
        echo $! > "$NODE_PID"
      fi

    fi

    if expr "${NODE_ARGS[*]}" : '.*node-started.xml.*' >/dev/null
    then
      if started "$NODE_STATE" "$NODE_PID"
      then
        echo "OK `date`"
      else
        echo "FAILED `date`"
        exit 1
      fi
    else
      echo "ok `date`"
    fi

    ;;

  stop)
    echo -n "Stopping Node: "
    if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1; then
      start-stop-daemon -K -p"$NODE_PID" -d"$NODE_HOME" -a "$NODE" -s HUP

      TIMEOUT=30
      while running "$NODE_PID"; do
        if (( TIMEOUT-- == 0 )); then
          start-stop-daemon -K -p"$NODE_PID" -d"$NODE_HOME" -a "$NODE" -s KILL
        fi

        sleep 1
      done
    else
      if [ ! -f "$NODE_PID" ] ; then
        echo "ERROR: no pid found at $NODE_PID"
        exit 1
      fi

      PID=$(cat "$NODE_PID" 2>/dev/null)
      if [ -z "$PID" ] ; then
        echo "ERROR: no pid id found in $NODE_PID"
        exit 1
      fi
      kill "$PID" 2>/dev/null

      TIMEOUT=30
      while running $NODE_PID; do
        if (( TIMEOUT-- == 0 )); then
          kill -KILL "$PID" 2>/dev/null
        fi

        sleep 1
      done
    fi

    rm -f "$NODE_PID"
    rm -f "$NODE_STATE"
    echo OK

    ;;

  restart)
    NODE_SH=$0
    > "$NODE_STATE"
    if [ ! -f $NODE_SH ]; then
      if [ ! -f $NODE_HOME/bin/node.sh ]; then
        echo "$NODE_HOME/bin/node.sh does not exist."
        exit 1
      fi
      NODE_SH=$NODE_HOME/bin/node.sh
    fi

    "$NODE_SH" stop "$@"
    "$NODE_SH" start "$@"

    ;;

  supervise)
    #
    # Under control of daemontools supervise monitor which
    # handles restarts and shutdowns via the svc program.
    #
    exec "${RUN_CMD[@]}"

    ;;

  run|demo)
    echo "Running Node: "

    if running "$NODE_PID"
    then
      echo Already Running $(cat "$NODE_PID")!
      exit 1
    fi

    exec "${RUN_CMD[@]}"
    ;;

  check|status)
    if running "$NODE_PID"
    then
      echo "Node running pid=$(< "$NODE_PID")"
    else
      echo "Node NOT running"
    fi
    echo
    echo "NODE_HOME     =  $NODE_HOME"
    echo "NODE_BASE     =  $NODE_BASE"
    echo "NODE_CONF     =  $NODE_CONF"
    echo "NODE_PID      =  $NODE_PID"
    echo "NODE_START    =  $NODE_START"
    echo "NODE_LOGS     =  $NODE_LOGS"
    echo "NODE_STATE    =  $NODE_STATE"
    echo "CLASSPATH      =  $CLASSPATH"
    echo "NODE           =  $NODE"
    echo "NODE_OPTIONS   =  ${NODE_OPTIONS[*]}"
    echo "NODE_ARGS     =  ${NODE_ARGS[*]}"
    echo "RUN_CMD        =  ${RUN_CMD[*]}"
    echo

    if running "$NODE_PID"
    then
      exit 0
    fi
    exit 1

    ;;

  *)
    usage

    ;;
esac

exit 0
