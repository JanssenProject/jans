#!/bin/sh
#
# init script for a Java application
#

export JAVA_HOME=/opt/jre
export PATH=$JAVA_HOME/bin:$PATH

service_name=`basename $0`
config_api_command="java -jar -Djans.base=/etc/jans /opt/jans/jans-config-api/jans-config-api-runner.jar"

# Check the application status
#
# This function checks if the application is running
check_status() {

	# Running ps with some arguments to check if the PID exists
	# -C : specifies the command name
	# -o : determines how columns must be displayed
	# h : hides the data header
	s=`ps -fea | grep "$config_api_command" | grep -v grep | awk '{print $2}'`
	
	# If somethig was returned by the ps command, this function returns the PID
	if [ "$s" ] ; then
		echo "$s"
		return
	fi
	
	# In any another case, return 0
	echo "0"
}

started_with_systemctl() {
	if [ "x`systemctl status $service_name|grep 'active (running)'`" != "x" ]; then
		echo "y"
	else
		echo "n"
	fi
}

# Starts the application
start() {

	# At first checks if the application is already started calling the check_status
	# function
	pid=`check_status`
	
	if [ $pid -ne 0 ] ; then
		echo "The service $service_name is already running..."
		if [ "`started_with_systemctl`" = "y" ]; then
			sleep 2
			echo ""
			echo "The service $service_name was started with systemctl."
			echo "Here is the status:"
			sleep 2
			echo ""
			systemctl status $service_name
		else
    			echo "PID: [$pid]"
		fi
  		exit 1
	fi
	
	# If the application isn't running, starts it
	echo -n "Starting $service_name: "
	
	# Redirects default and error output to a log file
	cd /opt/jans/jans-config-api/
	`$config_api_command` > /dev/null 2>&1 &
	echo "OK"
}

# Stops the application
stop() {

	pid=`check_status`
	
	if [ $pid -eq 0 ] ; then
		echo "The service $service_name is already stopped..."
		exit 0
	elif [ "`started_with_systemctl`" = "y" ]; then
		echo "The service $service_name was started with systemctl."
		echo "It's not advisable to stop services started with systemctl directly using the script."
		echo "Please use below command to stop the service: "
		echo ""
		echo ""
		echo "systemctl stop $service_name"
		echo ""
		exit 1
	fi
	
	# Kills the application process
	echo -n "Stopping $service_name: "
	kill -s TERM $pid
	echo "OK"
}

# Show the application status
status() {

	pid=`check_status`

	if [ $pid -ne 0 ] ; then
		if [ "x`systemctl status $service_name|grep 'active (running)'`" != "x" ]; then
			systemctl status $service_name
		else
			echo "The service $service_name is running..."
			echo "PID: [$pid]"
		fi
	else
		echo "The service $service_name is not running..."
	fi
}

# Main logic, a simple case to call functions
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: systemctl {start|stop|restart|status} $service_name"
    exit 1
esac

exit 0
