# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
# -- OAuth Authorization Server, the OpenID Connect Provider, the UMA Authorization Server--this is the main Internet facing component of Gluu. It's the service that returns tokens, JWT's and identity assertions. This service must be Internet facing.
# -- Configure the HorizontalPodAutoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
  # -- metrics if targetCPUUtilizationPercentage is not set
  metrics: []
  # -- Scaling Policies
  behavior: {}
# -- Add custom normal and secret envs to the service
usrEnvs:
  # -- Add custom normal envs to the service
  # variable1: value1
  normal: {}
  # -- Add custom secret envs to the service
  # variable1: value1
  secret: {}
# -- Add custom dns policy
dnsPolicy: ""
# -- Add custom dns config
dnsConfig: {}
image:
  # -- Image pullPolicy to use for deploying.
  pullPolicy: IfNotPresent
  # -- Image  to use for deploying.
  repository:  janssenproject/auth-server
  # -- Image  tag to use for deploying.
  tag: 1.0.0-beta.14
  # -- Image Pull Secrets
  pullSecrets: [ ]
# -- Service replica number.
replicas: 1
# -- Resource specs.
resources:
  limits:
    # -- CPU limit.
    cpu: 2500m
    # -- Memory limit.
    memory: 2500Mi
  requests:
    # -- CPU request.
    cpu: 2500m
    # -- Memory request.
    memory: 2500Mi
service:
  # -- The name of the oxauth port within the oxauth service. Please keep it as default.
  name: http-auth
  # -- Port of the oxauth service. Please keep it as default.
  port: 8080
  # -- Default set to None If you want to make sure that connections from a particular client are passed to the same Pod each time, you can select the session affinity based on the client's IP addresses by setting this to ClientIP
  sessionAffinity: None
  # -- the maximum session sticky time if sessionAffinity is ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
# -- Configure the liveness healthcheck for the auth server if needed.
livenessProbe:
  # -- Executes the python3 healthcheck.
  # https://github.com/GluuFederation/docker-oxauth/blob/4.3/scripts/healthcheck.py
  exec:
    command:
      - python3
      - /app/scripts/healthcheck.py
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
# -- Configure the readiness healthcheck for the auth server if needed.
# https://github.com/GluuFederation/docker-oxauth/blob/4.3/scripts/healthcheck.py
readinessProbe:
  exec:
    command:
      - python3
      - /app/scripts/healthcheck.py
  initialDelaySeconds: 25
  periodSeconds: 25
  timeoutSeconds: 5
volumes: []
# -- Configure any additional volumesMounts that need to be attached to the containers
volumeMounts: []

# -- Additional labels that will be added across all resources definitions in the format of {mylabel: "myapp"}
additionalLabels: { }
# -- Additional annotations that will be added across all resources  in the format of {cert-manager.io/issuer: "letsencrypt-prod"}. key app is taken
additionalAnnotations: { }
