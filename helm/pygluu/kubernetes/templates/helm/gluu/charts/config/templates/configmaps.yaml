# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Release.Name }}-config-cm
  namespace: {{ .Release.Namespace }}
  labels:
    APP_NAME: configurator
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
data:
  # Jetty header size in bytes in the auth server
  CN_JETTY_REQUEST_HEADER_SIZE: {{ .Values.configmap.cnJettyRequestHeaderSize | quote }}
  # Distribution
  CN_DISTRIBUTION: {{ .Values.global.distribution | quote }}
  {{ if .Values.global.cnObExtSigningJwksUri }}
  CN_OB_EXT_SIGNING_JWKS_URI: {{ .Values.global.cnObExtSigningJwksUri | quote }}
  CN_OB_AS_TRANSPORT_ALIAS: {{ .Values.global.cnObTransportAlias | quote }}
  CN_OB_EXT_SIGNING_ALIAS: {{ .Values.global.cnObExtSigningAlias | quote }}
  # force the AS to use a specific signing key
  CN_OB_STATIC_KID: {{ .Values.global.cnObStaticSigningKeyKid | quote }}
  {{- end }}
  {{ if or (eq .Values.global.configSecretAdapter "google") (eq .Values.global.cnPersistenceType "spanner") }}
  # [google_envs] Envs related to using Google
  GOOGLE_APPLICATION_CREDENTIALS: {{ .Values.global.cnGoogleApplicationCredentials | quote }}
  GOOGLE_PROJECT_ID: {{ .Values.configmap.cnGoogleProjectId | quote }}
  {{- end }}
  {{ if eq .Values.global.cnPersistenceType "spanner" }}
  # [google_spanner_envs] Envs related to using Google Secret Manager to store config and secret layer
  CN_GOOGLE_SPANNER_INSTANCE_ID: {{ .Values.configmap.cnGoogleSpannerInstanceId | quote }}
  CN_GOOGLE_SPANNER_DATABASE_ID: {{ .Values.configmap.cnGoogleSpannerDatabaseId | quote }}
  # [google_spanner_envs] END
  {{- end }}
  {{ if eq .Values.global.configSecretAdapter "google" }}
  # [google_secret_manager_envs] Envs related to using Google Secret Manager to store config and secret layer
  CN_SECRET_GOOGLE_SECRET_VERSION_ID: {{ .Values.configmap.cnSecretGoogleSecretVersionId | quote }}
  CN_SECRET_GOOGLE_SECRET_MANAGER_PASSPHRASE: {{ .Values.configmap.cnGoogleSecretManagerPassPhrase | quote }}
  CN_SECRET_GOOGLE_SECRET_NAME_PREFIX: {{ .Values.configmap.cnSecretGoogleSecretNamePrefix | quote }}
  CN_CONFIG_GOOGLE_SECRET_VERSION_ID: {{ .Values.configmap.cnConfigGoogleSecretVersionId | quote }}
  CN_CONFIG_GOOGLE_SECRET_NAME_PREFIX: {{ .Values.configmap.cnConfigGoogleSecretNamePrefix | quote }}
  # [google_secret_manager_envs] END
  {{- end }}
  CN_SQL_DB_DIALECT: {{ .Values.configmap.cnSqlDbDialect }}
  CN_SQL_DB_HOST: {{ .Values.configmap.cnSqlDbHost }}
  CN_SQL_DB_PORT: {{ .Values.configmap.cnSqlDbPort | quote }}
  CN_SQL_DB_NAME: {{ .Values.configmap.cnSqlDbName }}
  CN_SQL_DB_USER: {{ .Values.configmap.cnSqlDbUser }}
  CN_SQL_DB_TIMEZONE: {{ .Values.configmap.cnSqlDbTimezone }}
  CN_SQL_PASSWORD_FILE: {{ .Values.configmap.cnSqlPasswordFile }}
  CN_CONFIG_ADAPTER: {{ .Values.global.configAdapterName }}
  CN_SECRET_ADAPTER: {{ .Values.global.configSecretAdapter }}
  CN_CONFIG_KUBERNETES_NAMESPACE: {{ .Release.Namespace | quote }}
  CN_SECRET_KUBERNETES_NAMESPACE: {{ .Release.Namespace | quote }}
  CN_CONFIG_KUBERNETES_CONFIGMAP: {{ .Values.configmap.cnConfigKubernetesConfigMap }}
  CN_SECRET_KUBERNETES_SECRET: {{ .Values.configmap.cnSecretKubernetesSecret }}
  CN_CONTAINER_METADATA: {{ .Values.configmap.containerMetadataName | quote }}
  CN_MAX_RAM_PERCENTAGE: {{ .Values.configmap.cnMaxRamPercent | quote }}
  CN_CACHE_TYPE: {{ .Values.configmap.cnCacheType | quote }}
  {{- if not .Values.global.jackrabbit.enabled }}
  CN_DOCUMENT_STORE_TYPE: LOCAL
  {{- else }}
  CN_DOCUMENT_STORE_TYPE: {{ .Values.configmap.cnDocumentStoreType | quote }}
  {{- end }}
  CN_JACKRABBIT_SYNC_INTERVAL: {{ .Values.configmap.cnJackrabbitSyncInterval | quote }}
  {{- if .Values.configmap.cnJackrabbitUrl }}
  CN_JACKRABBIT_URL: {{ .Values.configmap.cnJackrabbitUrl | quote }}
  {{- else }}
  CN_JACKRABBIT_URL: {{ cat "http://" ( .Values.global.jackrabbit.jackRabbitServiceName ) ":8080" | quote | nospace }}
  {{- end }}
  DOMAIN: {{ .Values.global.fqdn | quote }}
  CN_AUTH_SERVER_BACKEND: {{ cat ( index .Values "global" "auth-server" "authServerServiceName" ) ":8080" | quote | nospace }}
  CN_AUTH_APP_LOGGERS: {{ index .Values "global" "auth-server" "appLoggers"
  | toJson
  | replace "authLogTarget" "auth_log_target"
  | replace "authLogLevel" "auth_log_level"
  | replace "httpLogTarget" "http_log_target"
  | replace "httpLogLevel" "http_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "persistenceDurationLogTarget" "persistence_duration_log_target"
  | replace "persistenceDurationLogLevel" "persistence_duration_log_level"
  | replace "ldapStatsLogTarget" "ldap_stats_log_target"
  | replace "ldapStatsLogLevel" "ldap_stats_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | replace "auditStatsLogTarget" "audit_log_target"
  | replace "auditStatsLogLevel" "audit_log_level"
  | squote
  }}
  {{- if index .Values "global" "client-api" "enabled" }}
  CN_CLIENT_API_SERVER_URL: {{ cat ( index .Values "global" "client-api" "clientApiServerServiceName" ) ":8443" | quote | nospace }}
  CN_CLIENT_API_BIND_IP_ADDRESSES: {{ .Values.configmap.cnClientApiBindIpAddresses | quote }}
  CN_CLIENT_API_APP_LOGGERS: {{ index .Values "global" "client-api" "appLoggers"
  | toJson
  | replace "clientApiLogTarget" "client_api_log_target"
  | replace "clientApiLogLevel" "client_api_log_level"
  | squote
  }}
  {{- end }}
  {{- if index .Values "global" "config-api" "enabled" }}
  CN_CONFIG_API_APP_LOGGERS: {{ index .Values "global" "config-api" "appLoggers"
  | toJson
  | replace "configApiLogTarget" "config_api_log_target"
  | replace "configApiLogLevel" "config_api_log_level"
  | squote
  }}
  {{- end }}
  {{- if and (not .Values.global.isFqdnRegistered ) (or (eq .Values.global.storageClass.provisioner "kubernetes.io/aws-ebs") (eq .Values.global.storageClass.provisioner "openebs.io/local")) }}
  LB_ADDR: {{ .Values.configmap.lbAddr }}
  {{- end }}
  CN_PERSISTENCE_TYPE: {{ .Values.global.cnPersistenceType }}
  {{- if or (eq .Values.global.cnPersistenceType "ldap") (eq .Values.global.cnPersistenceType "hybrid")  }}
  # used only if CN_PERSISTENCE_TYPE is ldap or hybrid
  {{- if .Values.configmap.cnLdapUrl }}
  CN_LDAP_URL: {{ .Values.configmap.cnLdapUrl | quote }}
  {{- else }}
  CN_LDAP_URL: {{ cat ( .Values.global.opendj.ldapServiceName ) ":1636" | quote | nospace }}
  {{- end }}
  {{- else if or (eq .Values.global.cnPersistenceType "couchbase") (eq .Values.global.cnPersistenceType "hybrid") }}
  #  used only if CN_PERSISTENCE_TYPE is couchbase or hybrid
  CN_COUCHBASE_URL: {{ .Values.configmap.cnCouchbaseUrl }}
  CN_COUCHBASE_BUCKET_PREFIX: {{ .Values.configmap.cnCouchbaseBucketPrefix }}
  CN_COUCHBASE_INDEX_NUM_REPLICA: {{ .Values.configmap.cnCouchbaseIndexNumReplica | quote }}
  CN_COUCHBASE_USER: {{ .Values.configmap.cnCouchbaseUser }}
  CN_COUCHBASE_CERT_FILE: {{ .Values.configmap.cnCouchbaseCertFile | quote }}
  CN_COUCHBASE_PASSWORD_FILE: {{ .Values.configmap.cnCouchbasePasswordFile | quote }}
  CN_COUCHBASE_SUPERUSER: {{ .Values.configmap.cnCouchbaseSuperUser }}
  CN_COUCHBASE_SUPERUSER_PASSWORD_FILE: {{ .Values.configmap.cnCouchbaseSuperUserPasswordFile | quote }}
  {{- end }}
  CN_KEY_ROTATION_FORCE: "false"
  CN_KEY_ROTATION_CHECK: "3600"
  CN_KEY_ROTATION_INTERVAL: "48"
  CN_SSL_CERT_FROM_SECRETS: "true"
  CN_CONTAINER_MAIN_NAME: {{ .Release.Name }}-auth-server
  # options: default/user/site/cache/statistic used only if CN_PERSISTENCE_TYPE is hybrid or hybrid
  {{- if or (eq .Values.global.cnPersistenceType "hybrid") (eq .Values.global.cnPersistenceType "ldap") }}
   # must the same as the opendj service name
  CN_CERT_ALT_NAME: {{ .Values.global.opendj.ldapServiceName }} #{{ template "cn.fullname" . }}-service
  CN_PERSISTENCE_LDAP_MAPPING: {{ .Values.configmap.cnPersistenceLdapMapping | quote }}
  {{- end }}
  CN_OXTRUST_CONFIG_GENERATION: {{ .Values.cnOxtrustConfigGeneration | quote }}
  {{ if .Values.global.cnJackrabbitCluster }}
  CN_JACKRABBIT_ADMIN_ID: {{ .Values.configmap.cnJackrabbitAdminId | quote }}
  CN_JACKRABBIT_ADMIN_PASSWORD_FILE: {{ .Values.configmap.cnJackrabbitAdminPasswordFile | quote }}
  CN_JACKRABBIT_CLUSTER: {{ .Values.global.cnJackrabbitCluster | quote }}
  CN_JACKRABBIT_POSTGRES_USER: {{ .Values.configmap.cnJackrabbitPostgresUser | quote }}
  CN_JACKRABBIT_POSTGRES_PASSWORD_FILE: {{ .Values.configmap.cnJackrabbitPostgresPasswordFile | quote }}
  CN_JACKRABBIT_POSTGRES_HOST: {{ .Values.configmap.cnJackrabbitPostgresHost | quote }}
  CN_JACKRABBIT_POSTGRES_PORT: {{ .Values.configmap.cnJackrabbitPostgresPort | quote }}
  CN_JACKRABBIT_POSTGRES_DATABASE: {{ .Values.configmap.cnJackrabbitPostgresDatabaseName | quote }}
  # CN_JACKRABBIT_PASSWORD_FILE: {{ .Values.configmap.cnJcaPasswordFile | quote }} NOT IMPLEMENTED
  {{- end }}
  # Auto enable installation of some services
  CN_CASA_ENABLED: {{ .Values.configmap.cnCasaEnabled | quote }}
  CN_PASSPORT_ENABLED: {{ .Values.configmap.cnPassportEnabled | quote }}
  {{- if .Values.global.oxshibboleth.enabled }}
  CN_SAML_ENABLED: {{ .Values.configmap.cnSamlEnabled | quote }}
  {{- end }}
  CN_CLIENT_API_APPLICATION_CERT_CN: {{ .Values.configmap.cnClientApiApplicationCertCn | quote }}
  CN_CLIENT_API_ADMIN_CERT_CN: {{ .Values.configmap.cnClientApiAdminCertCn | quote }}
  {{ if eq .Values.configmap.cnCacheType "REDIS" }}
  CN_REDIS_URL: {{ .Values.configmap.cnRedisUrl | quote }}
  CN_REDIS_TYPE: {{ .Values.configmap.cnRedisType | quote }}
  CN_REDIS_USE_SSL: {{ .Values.configmap.cnRedisUseSsl | quote }}
  CN_REDIS_SSL_TRUSTSTORE: {{ .Values.configmap.cnRedisSslTruststore | quote }}
  CN_REDIS_SENTINEL_GROUP: {{ .Values.configmap.cnRedisSentinelGroup | quote }}
  {{- end }}
  {{- if .Values.global.istio.enabled }}
  CN_COUCHBASE_TRUSTSTORE_ENABLE: "false"
  CN_LDAP_USE_SSL: "false"
  {{- end }}
  {{- if .Values.global.scim.enabled }}
  CN_SCIM_ENABLED: {{ .Values.global.scim.enabled | quote }}
  CN_SCIM_PROTECTION_MODE: {{ .Values.configmap.cnScimProtectionMode | quote }}
  CN_SCIM_APP_LOGGERS: {{ .Values.global.scim.appLoggers
  | toJson
  | replace "scimLogTarget" "scim_log_target"
  | replace "scimLogLevel" "scim_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | replace "persistenceDurationLogTarget" "persistence_duration_log_target"
  | replace "persistenceDurationLogLevel" "persistence_duration_log_level"
  | replace "ldapStatsLogTarget" "ldap_stats_log_target"
  | replace "ldapStatsLogLevel" "ldap_stats_log_level"
  | replace "scriptLogTarget" "script_log_target"
  | replace "scriptLogLevel" "script_log_level"
  | squote
  }}
  {{- end }}
  {{- if .Values.global.fido2.enabled }}
  CN_FIDO2_APP_LOGGERS: {{ .Values.global.fido2.appLoggers
  | toJson
  | replace "fido2LogTarget" "fido2_log_target"
  | replace "fido2LogLevel" "fido2_log_level"
  | replace "persistenceLogTarget" "persistence_log_target"
  | replace "persistenceLogLevel" "persistence_log_level"
  | squote
  }}
  {{- end }}
  {{- if index .Values "global" "admin-ui" "enabled" }}
  # ADMIN-UI
  ADMIN_UI_JWKS: {{ cat "http://" ( index .Values "global" "auth-server" "authServerServiceName" ) ":8080/jans-auth/restv1/jwks" | quote | nospace }}
  CN_CONFIG_API_PLUGINS: "admin-ui,scim"
  {{- end }}
---

apiVersion: v1
data:
  tls_generator.py: |-
    from kubernetes import config, client
    import logging

    log_format = '%(asctime)s - %(name)8s - %(levelname)5s - %(message)s'
    logging.basicConfig(format=log_format, level=logging.INFO)
    logger = logging.getLogger("tls-generator")

    # use the serviceAccount k8s gives to pods
    config.load_incluster_config()
    core_cli = client.CoreV1Api()

    def patch_or_create_namespaced_secret(name, literal, value_of_literal, namespace="default",
                                          secret_type="Opaque", second_literal=None, value_of_second_literal=None,
                                          data=None):
        """Patch secret and if not exist create
        :param name:
        :param literal:
        :param value_of_literal:
        :param namespace:
        :param secret_type:
        :param second_literal:
        :param value_of_second_literal:
        :param data:
        :return:
        """
        # Instantiate the Secret object
        body = client.V1Secret()
        metadata = client.V1ObjectMeta(name=name)
        body.data = data
        if not data:
            body.data = {literal: value_of_literal}
        body.metadata = metadata
        body.type = secret_type
        if second_literal:
            body.data = {literal: value_of_literal, second_literal: value_of_second_literal}
        try:
            core_cli.patch_namespaced_secret(name, namespace, body)
            logger.info('Secret  {} in namespace {} has been patched'.format(name, namespace))
            return
        except client.rest.ApiException as e:
            if e.status == 404 or not e.status:
                try:
                    core_cli.create_namespaced_secret(namespace=namespace, body=body)
                    logger.info('Created secret {} of type {} in namespace {}'.format(name, secret_type, namespace))
                    return True
                except client.rest.ApiException as e:
                    logger.exception(e)
                    return False
            logger.exception(e)
            return False

    # check if gluu secret exists
    def get_certs(secret_name, namespace):
        """

        :param namespace:
        :return:  ssl cert and key from gluu secrets
        """
        ssl_cert = None
        ssl_key = None
        if core_cli.read_namespaced_secret(secret_name, namespace):
            ssl_cert = core_cli.read_namespaced_secret(secret_name, namespace).data['ssl_cert']
            ssl_key = core_cli.read_namespaced_secret(secret_name, namespace).data['ssl_key']

        return ssl_cert, ssl_key


    def main():
        namespace = {{.Release.Namespace | quote}}
        secret_name = {{ .Values.configmap.cnSecretKubernetesSecret | quote }}
        cert, key = get_certs(secret_name, namespace)
        # global vars
        name = "tls-certificate"

        # if istio is enabled
        {{- if.Values.global.istio.ingress}}
        namespace = {{.Values.global.istio.namespace | quote}}
        {{- end}}

        if cert and key:
            patch_or_create_namespaced_secret(name=name,
                                              namespace=namespace,
                                              literal="tls.crt",
                                              value_of_literal=cert,
                                              secret_type="kubernetes.io/tls",
                                              second_literal="tls.key",
                                              value_of_second_literal=key)
        else:
            logger.error("No certificate or key was found in secrets.")

    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: {{ include "config.fullname" . }}-tls-script
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}

---

apiVersion: v1
data:
  updatelbip.py: |-
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    # Update the IP of the load balancer automatically

    """
     License terms and conditions for Gluu Cloud Native Edition:
     https://www.apache.org/licenses/LICENSE-2.0
    """

    import socket
    import os
    import logging
    import time

    logger = logging.getLogger("update-lb-ip")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    fmt = logging.Formatter('%(levelname)s - %(asctime)s - %(message)s')
    ch.setFormatter(fmt)
    logger.addHandler(ch)


    def backup(hosts):
        timenow = time.strftime("%c")
        timestamp = "Backup occurred %s \n" % timenow
        logger.info("Backing up hosts file to /etc/hosts.back ...")
        with open('/etc/hosts.back', 'a+') as f:
            f.write(timestamp)
            for line in hosts:
                f.write(line)


    def get_hosts(lb_addr, domain):
        ip_list = []
        hosts_list = []
        ais = socket.getaddrinfo(lb_addr, 0, 0, 0, 0)
        for result in ais:
            ip_list.append(result[-1][0])
        ip_list = list(set(ip_list))
        for ip in ip_list:
            add_host = ip + " " + domain
            hosts_list.append(add_host)

        return hosts_list


    def main():
        try:
            while True:
                lb_addr = os.environ.get("LB_ADDR", "")
                domain = os.environ.get("DOMAIN", "demoexample.gluu.org")
                host_file = open('/etc/hosts', 'r').readlines()
                hosts = get_hosts(lb_addr, domain)
                stop = []
                for host in hosts:
                    for i in host_file:
                        if host.replace(" ", "") in i.replace(" ", ""):
                            stop.append("found")
                if len(stop) != len(hosts):
                    backup(host_file)
                    logger.info("Writing new hosts file")
                    with open('/etc/hosts', 'w') as f:
                        for line in host_file:
                            if domain not in line:
                                f.write(line)
                        for host in hosts:
                            f.write(host)
                            f.write("\n")
                        f.write("\n")
                time.sleep(300)
        except KeyboardInterrupt:
            logger.warning("Canceled by user; exiting ...")


    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-updatelbip
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "config.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}