installer-settings:
  currentVersion: ""
  upgrade:
    targetVersion: ""
    image:
      repository: ""
      tag: ""
  acceptLicense: ""
  namespace: ""
  releaseName: ""
  nginxIngress:
    releaseName: ""
    namespace: ""
  nodes:
    names: ""
    zones: ""
    ips: ""
  images:
    edit: ""
  aws:
    lbType: ""
    arn:
      enabled: ""
      arnAcmCert: ""
    vpcCidr: "0.0.0.0/0"
  couchbase:
    clusterName: ""
    namespace: ""
    lowResourceInstall: ""
    install: ""
    customFileOverride: ""
    backup:
      incrementalSchedule: ""
      fullSchedule: ""
      retentionTime: ""
      storageSize: ""
    subjectAlternativeName: ""
    commonName: ""
    totalNumberOfExpectedUsers: ""
    totalNumberOfExpectedTransactionsPerSec: ""
    volumeType: ""
  volumeProvisionStrategy: ""
  ldap:
    multiClusterIds: []
    subsequentCluster: ""
    backup:
      fullSchedule: ""
  jackrabbit:
    clusterMode: ""
  postgres:
    install: ""
    namespace: ""
  sql:
    install: ""
    namespace: ""
  google:
    useSecretManager: ""
  redis:
    install: ""
    namespace: ""
  openbanking:
    hasCnObTransportTrustStore: false
    cnObTransportTrustStoreP12password: ""
  confirmSettings: false
auth-server:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/auth-server
    tag: 1.0.0_b9
    pullSecrets: []
  replicas: 1
  resources:
    limits:
      cpu: 2500m
      memory: 2500Mi
    requests:
      cpu: 2500m
      memory: 2500Mi
  livenessProbe:
    exec:
      command:
      - python3
      - /app/scripts/healthcheck.py
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  readinessProbe:
    exec:
      command:
      - python3
      - /app/scripts/healthcheck.py
    initialDelaySeconds: 25
    periodSeconds: 25
    timeoutSeconds: 5
  volumes: []
  volumeMounts: []
auth-server-key-rotation:
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/certmanager
    tag: 1.0.0_b9
    pullSecrets: []
  keysLife: 48
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 300m
      memory: 300Mi
  volumes: []
  volumeMounts: []
client-api:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/client-api
    tag: 1.0.0_b9
    pullSecrets: []
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 400Mi
    requests:
      cpu: 1000m
      memory: 400Mi
  livenessProbe:
    exec:
      command:
      - curl
      - -k
      - https://localhost:8443/health-check
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  readinessProbe:
    tcpSocket:
      port: 1636
    initialDelaySeconds: 60
    timeoutSeconds: 5
    periodSeconds: 25
  volumes: []
  volumeMounts: []
config:
  usrEnvs:
    normal: {}
    secret: {}
  adminPassword: Test1234#
  city: Austin
  configmap:
    cnJettyRequestHeaderSize: 8192
    cnSqlDbDialect: mysql
    cnSqlDbHost: my-release-mysql.default.svc.cluster.local
    cnSqlDbPort: 3306
    cnSqlDbName: jans
    cnSqlDbUser: jans
    cnSqlDbTimezone: UTC
    cnSqlPasswordFile: /etc/jans/conf/sql_password
    cnSqldbUserPassword: Test1234#
    cnCacheType: NATIVE_PERSISTENCE
    cnClientApiAdminCertCn: client-api
    cnClientApiApplicationCertCn: client-api
    cnClientApiBindIpAddresses: "*"
    cnConfigKubernetesConfigMap: cn
    cnCouchbaseBucketPrefix: jans
    cnCouchbaseCertFile: /etc/certs/couchbase.crt
    cnCouchbaseCrt: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
    cnCouchbaseIndexNumReplica: 0
    cnCouchbasePassword: P@ssw0rd
    cnCouchbasePasswordFile: /etc/jans/conf/couchbase_password
    cnCouchbaseSuperUser: admin
    cnCouchbaseSuperUserPassword: Test1234#
    cnCouchbaseSuperUserPasswordFile: /etc/jans/conf/couchbase_superuser_password
    cnCouchbaseUrl: cbjans.default.svc.cluster.local
    cnCouchbaseUser: jans
    cnJackrabbitAdminPasswordFile: /etc/jans/conf/jackrabbit_admin_password
    cnGoogleSecretManagerServiceAccount: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
    cnGoogleProjectId: google-project-to-save-config-and-secrets-to
    cnGoogleSpannerInstanceId: ""
    cnGoogleSpannerDatabaseId: ""
    cnSecretGoogleSecretVersionId: "latest"
    cnSecretGoogleSecretNamePrefix: jans
    cnGoogleSecretManagerPassPhrase: Test1234#
    cnConfigGoogleSecretVersionId: "latest"
    cnConfigGoogleSecretNamePrefix: jans
    cnLdapUrl: "opendj:1636"
    cnMaxRamPercent: "75.0"
    cnScimProtectionMode: "OAUTH"
    cnPersistenceLdapMapping: default
    cnRedisSentinelGroup: ""
    cnRedisSslTruststore: ""
    cnRedisType: STANDALONE
    cnRedisUrl: "redis.redis.svc.cluster.local:6379"
    cnRedisUseSsl: false
    cnSecretKubernetesSecret: cn
    lbAddr: ""
  countryCode: US
  email: support@jans.io
  image:
    repository: janssenproject/configuration-manager
    tag: 1.0.0_b9
    pullSecrets: []
  ldapPassword: P@ssw0rds
  orgName: Janssen
  redisPassword: P@assw0rd
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 300m
      memory: 300Mi
  state: TX
  volumes: []
  volumeMounts: []
  dnsPolicy: ""
  dnsConfig: {}
  migration:
    enabled: false
    migrationDir: /ce-migration
    migrationDataFormat: ldif
config-api:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/config-api
    tag: 1.0.0_b9
    pullSecrets: []
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 400Mi
    requests:
      cpu: 1000m
      memory: 400Mi
  livenessProbe:
    httpGet:
      path: /jans-config-api/api/v1/health/live
      port: 8074
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: jans-config-api/api/v1/health/ready
      port: 8074
    initialDelaySeconds: 25
    periodSeconds: 25
    timeoutSeconds: 5
  volumes: []
  volumeMounts: []
fido2:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/fido2
    tag: 1.0.0_b9
    pullSecrets: []
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi
  livenessProbe:
    httpGet:
      path: /jans-fido2/sys/health-check
      port: http-fido2
    initialDelaySeconds: 25
    periodSeconds: 25
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /jans-fido2/sys/health-check
      port: http-fido2
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  volumes: []
  volumeMounts: []
global:
  usrEnvs:
    normal: {}
    secret: {}
  alb:
    ingress: false
  auth-server:
    authServerServiceName: auth-server
    enabled: true
  auth-server-key-rotation:
    enabled: false
  awsStorageType: io1
  azureStorageAccountType: Standard_LRS
  azureStorageKind: Managed
  casa:
    casaServiceName: casa
  client-api:
    clientApiServerServiceName: client-api
    enabled: false
  cloud:
    testEnviroment: false
  cnPersistenceType: ldap
  cnObExtSigningJwksUri: ""
  cnObExtSigningJwksCrt: ""
  cnObExtSigningJwksKey: ""
  cnObExtSigningJwksKeyPassPhrase: ""
  cnObExtSigningAlias: ""
  cnObStaticSigningKeyKid: ""
  cnObTransportCrt: ""
  cnObTransportKey: ""
  cnObTransportKeyPassPhrase: ""
  cnObTransportAlias: ""
  cnObTransportTrustStore: ""
  config:
    enabled: true
  configAdapterName: kubernetes
  configSecretAdapter: kubernetes
  cnGoogleApplicationCredentials: /etc/jans/conf/google-credentials.json
  config-api:
    configApiServerServiceName: config-api
    enabled: true
  fqdn: demoexample.jans.io
  fido2:
    fido2ServiceName: fido2
    enabled: false
  gcePdStorageType: pd-standard
  isFqdnRegistered: false
  istio:
    enabled: false
    ingress: false
    namespace: istio-system
  lbIp: ""
  nginx-ingress:
    enabled: true
  opendj:
    enabled: false
    ldapServiceName: opendj
  oxpassport:
    oxPassportServiceName: oxpassport
  distribution: default
  persistence:
    enabled: true
  scim:
    scimServiceName: scim
    enabled: false
  storageClass:
    allowVolumeExpansion: true
    allowedTopologies: []
    mountOptions:
    - debug
    # -- parameters:
    #fsType: ""
    #kind: ""
    #pool: ""
    #storageAccountType: ""
    #type: ""
    parameters: {}
    provisioner: microk8s.io/hostpath
    reclaimPolicy: Retain
    volumeBindingMode: WaitForFirstConsumer
  upgrade:
    enabled: false
nginx-ingress:
  ingress:
    adminUiEnabled: true
    adminUiLabels: {}
    openidConfigEnabled: true
    openidConfigLabels: {}
    uma2ConfigEnabled: true
    uma2ConfigLabels: {}
    webfingerEnabled: true
    webfingerLabels: {}
    webdiscoveryEnabled: true
    webdiscoveryLabels: {}
    scimConfigEnabled: false
    scimConfigLabels: {}
    scimEnabled: false
    scimLabels: {}
    configApiEnabled: true
    configApiLabels: {}
    u2fConfigEnabled: true
    u2fConfigLabels: {}
    fido2ConfigEnabled: false
    fido2ConfigLabels: {}
    authServerEnabled: true
    authServerLabels: {}
    authServerProtectedToken: false
    authServerProtectedTokenLabels: {}
    authServerProtectedRegister: false
    authServerProtectedRedisterLabels: {}
    additionalLabels: {}
    additionalAnnotations: {}
    path: /
    hosts:
    - demoexample.jans.io
    # -- Secrets holding HTTPS CA cert and key.
    tls:
    - secretName: tls-certificate
      hosts:
      - demoexample.jans.io

# -- OpenDJ is a directory server which implements a wide range of Lightweight Directory Access Protocol and related standards, including full compliance with LDAPv3 but also support for Directory Service Markup Language (DSMLv2).Written in Java, OpenDJ offers multi-master replication, access control, and many extensions.
opendj:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: gluufederation/opendj
    tag: 5.0.0_dev
    pullSecrets: []
  multiCluster:
    enabled: false
    serfAdvertiseAddrSuffix: "regional.jans.org:30946"
    serfKey: Z51b6PgKU1MZ75NCZOTGGoc0LP2OF3qvF6sjxHyQCYk=
    serfPeers:
    - "jans-opendj-regional-0-regional.jans.org:30946"
    - "jans-opendj-regional-0-regional.jans.org:31946"
    # -- The number of opendj non scalabble statefulsets to create. Each pod created must be resolvable as it follows
    # the patterm RELEASE-NAME-opendj-regional-{{statefulset pod number}}-{{ $.Values.multiCluster.serfAdvertiseAddrSuffix }}
    # If set to 1, with a release name of jans,  the address of the pod would be jans-opendj-regional-0-regional.jans.org
    replicaCount: 1
    clusterId: ""
    namespaceIntId: 0
  persistence:
    size: 5Gi
  ports:
    tcp-admin:
      nodePort: ""
      port: 4444
      protocol: TCP
      targetPort: 4444
    tcp-ldap:
      nodePort: ""
      port: 1389
      protocol: TCP
      targetPort: 1389
    tcp-ldaps:
      nodePort: ""
      port: 1636
      protocol: TCP
      targetPort: 1636
    tcp-repl:
      nodePort: ""
      port: 8989
      protocol: TCP
      targetPort: 8989
    tcp-serf:
      nodePort: ""
      port: 7946
      protocol: TCP
      targetPort: 7946
    udp-serf:
      nodePort: ""
      port: 7946
      protocol: UDP
      targetPort: 7946
  replicas: 1
  resources:
    limits:
      cpu: 1500m
      memory: 2000Mi
    requests:
      cpu: 1500m
      memory: 2000Mi
  livenessProbe:
    exec:
      command:
      - python3
      - /app/scripts/healthcheck.py
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 20
  readinessProbe:
    exec:
      command:
      - python3
      - /app/scripts/healthcheck.py
    initialDelaySeconds: 25
    timeoutSeconds: 5
    periodSeconds: 25
    failureThreshold: 20
  volumes: []
  volumeMounts: []
persistence:
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/persistence-loader
    tag: 1.0.0_b9
    pullSecrets: []
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 300m
      memory: 300Mi
  volumes: []
  volumeMounts: []
scim:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    metrics: []
    behavior: {}
  usrEnvs:
    normal: {}
    secret: {}
  dnsPolicy: ""
  dnsConfig: {}
  image:
    pullPolicy: IfNotPresent
    repository: janssenproject/scim
    tag: 1.0.0_b9
    pullSecrets: []
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    requests:
      cpu: 1000m
      memory: 1000Mi
  livenessProbe:
    httpGet:
      path: /jans-scim/sys/health-check
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /jans-scim/sys/health-check
      port: 8080
    initialDelaySeconds: 25
    periodSeconds: 25
    timeoutSeconds: 5
  volumes: []
  volumeMounts: []
