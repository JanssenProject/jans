{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"type": "object",
	"properties": {
		"auth-server": {
			"description": "OAuth Authorization Server, the OpenID Connect Provider, the UMA Authorization Server--this is the main Internet facing component of Janssen. It's the service that returns tokens, JWT's and identity assertions. This service must be Internet facing.",
			"type": "object",
			"properties": {}
		},
		"auth-server-key-rotation": {
			"description": "Responsible for regenerating auth-keys per x hours",
			"type": "object",
			"properties": {}
		},
		"casa": {
			"description": "Gluu Casa (\"Casa\") is a self-service web portal for end-users to manage authentication and authorization preferences for their account in a Gluu Server.",
			"type": "object",
			"properties": {}
		},
		"client-api": {
			"description": "Middleware API to help application developers call an OAuth, OpenID or UMA server. You may wonder why this is necessary. It makes it easier for client developers to use OpenID signing and encryption features, without becoming crypto experts. This API provides some high level endpoints to do some of the heavy lifting.",
			"type": "object",
			"properties": {}
		},
		"config": {
			"description": "Configuration parameters for setup",
			"type": "object",
			"properties": {
				"adminPass": {
					"description": "Admin password to login to the UI",
					"$ref": "#/definitions/password"
				},
				"city": {
					"description": "City of the company or individual. Used in generating the self-signed certificate",
					"type": "string",
					"pattern": "^[a-zA-Z]+$"
				},
				"configmap": {
					"description": "Configuration parameters mapped to envs in a ConfigMap",
					"type": "object",
					"properties": {
						"cnAuthServerBackend": {
							"description": "Auth Server backend address",
							"type": "string",
							"pattern": "^[a-z0-9-:]+$"
						},
						"cnSqlDbDialect": {
							"description": "SQL dialect",
							"type": "string",
							"pattern": "^(mysql)$"
						},
						"cnSqlDbHost": {
							"description": "SQL server address or ip",
							"anyOf": [
								{"$ref": "#/definitions/url-pattern"},
								{"$ref": "#/definitions/ip-pattern"}
							]
						},
						"cnSqlDbPort": {
							"description": "SQL server port",
							"type": "integer"
						},
						"cnSqlDbName": {
							"description": "SQL server database name for Jans",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnSqlDbUser": {
							"description": "SQL server Jans username",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnSqlDbTimezone": {
							"description": "SQL server timezone",
							"type": "string",
							"pattern": "^(GMT|UTC|ECT|EET|ART|EAT|MET|NET|PLT|IST|BST|VST|CTT|JST|ACT|AET|SST|NST|MIT|HST|AST|PST|PNT|MST|CST|EST|IET|PRT|CNT|AGT|BET|CAT)$"
						},
						"cnSqlPasswordFile": {
							"description": "SQL server password file location. This file path must end with sql_password",
							"type": "string",
							"pattern": ".*sql_password\\b.*"
						},
						"cnSqldbUserPassword": {
							"description": "Password for user config.configmap.cnSqlDbUser.",
							"$ref": "#/definitions/password"
						},
						"cnCacheType": {
							"description": "Cache type. NATIVE_PERSISTENCE, REDIS. or IN_MEMORY. Defaults to NATIVE_PERSISTENCE",
							"type": "string",
							"pattern": "^(NATIVE_PERSISTENCE|REDIS|IN_MEMORY)$"
						},
						"cnCasaEnabled": {
							"description": "Enable Casa. Gluu Casa is a self-service web portal for end-users to manage authentication and authorization preferences for their account in a Gluu Server.",
							"type": "boolean"
						},
						"cnClientApiAdminCertCn": {
							"description": "Client-api OAuth client admin certificate common name. This should be left to the default value client-api",
							"type": "string",
							"pattern": "^[a-z-]+$"
						},
						"cnClientApiApplicationCertCn": {
							"description": "client-api OAuth client application certificate common name. This should be left to the default value client-api",
							"type": "string",
							"pattern": "^[a-z-]+$"
						},
						"cnClientApiBindIpAddresses": {
							"description": "client-api bind address. This limits what ip ranges can access the client-api. This should be left as * and controlled by a NetworkPolicy",
							"$ref": "#/definitions/ip-pattern"
						},
						"cnClientApiServerUrl": {
							"description": "client-api Oauth client address. This should be left intact in kubernetes as it uses the internal address format. ",
							"type": "string",
							"pattern": "^[a-z0-9-:]+$"
						},
						"cnConfigKubernetesConfigMap": {
							"description": "The name of the ConfigMap that will hold the configuration layer",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnCouchbaseBucketPrefix": {
							"description": "The prefix of couchbase buckets. This helps with seperation in between different environments and allows for the same couchbase cluster to be used by different setups of Janssen.",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnCouchbaseCertFile": {
							"description": "Location of `couchbase.crt` used by Couchbase SDK for tls termination. The file path must end with couchbase.crt. In mTLS setups this is not required.",
							"type": "string",
							"pattern": ".*couchbase.crt\\b.*"
						},
						"cnCouchbaseCrt": {
							"description": "Couchbase certificate authority string. This must be encoded using base64. This can also be found in your couchbase UI Security > Root Certificate. In mTLS setups this is not required.",
							"type": "string",
							"pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
						},
						"cnCouchbaseIndexNumReplica": {
							"description": "The number of replicas per index created. Please note that the number of index nodes must be one greater than the number of index replicas. That means if your couchbase cluster only has 2 index nodes you cannot place the number of replicas to be higher than 1.",
							"type": "integer"
						},
						"cnCouchbasePass": {
							"description": "Couchbase password for the restricted user config.configmap.cnCouchbaseUser  that is often used inside the services. The password must contain one digit, one uppercase letter, one lower case letter and one symbol ",
							"$ref": "#/definitions/password"
						},
						"cnCouchbasePasswordFile": {
							"description": "The location of the Couchbase restricted user config.configmap.cnCouchbaseUser password. The file path must end with couchbase_password",
							"type": "string",
							"pattern": ".*couchbase_password\\b.*"
						},
						"cnCouchbaseSuperUser": {
							"description": "The Couchbase super user (admin) user name. This user is used during initialization only.",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnCouchbaseSuperUserPass": {
							"description": "Couchbase password for the super user config.configmap.cnCouchbaseSuperUser  that is used during the initialization process. The password must contain one digit, one uppercase letter, one lower case letter and one symbol ",
							"$ref": "#/definitions/password"
						},
						"cnCouchbaseSuperUserPassFile": {
							"description": "The location of the Couchbase restricted user config.configmap.cnCouchbaseSuperUser password. The file path must end with couchbase_superuser_password",
							"type": "string",
							"pattern": ".*couchbase_superuser_password\\b.*"
						},
						"cnCouchbaseUrl": {
							"description": "Couchbase URL. Used only when global.cnPersistenceType is hybrid or couchbase. This should be in FQDN format for either remote or local Couchbase clusters. The address can be an internal address inside the kubernetes cluster",
							"$ref": "#/definitions/fqdn-pattern"
						},
						"cnCouchbaseUser": {
							"description": "Couchbase restricted user. Used only when global.cnPersistenceType is hybrid or couchbase.",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnExtSigningJwksCrt": {
							"description": "External signing jwks certificate authority string. This must be encoded using base64.",
							"type": "string",
							"pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
						},
						"cnExtSigningJwksKey": {
							"description": "External signing jwks key string. This must be encoded using base64.",
							"type": "string",
							"pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
						},
						"cnGoogleSecretManagerServiceAccount": {
							"description": "Service account with roles roles/secretmanager.admin base64 encoded string. This is used often inside the services to reach the configuration layer. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
						},
						"cnGoogleProjectId": {
							"description": "project id of the google project the secret manager belongs to. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": ""
						},
						"cnSecretGoogleSecretVersionId": {
							"description": "Secret version to be used for secret configuration. Defaults to latest and should normally always stay that way. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": "^([0-9]|latest)*$"
						},
						"cnSecretGoogleSecretNamePrefix": {
							"description": "Prefix for Janssen secret in Google Secret Manager. Defaults to jans. If left jans-secret secret will be created. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnGoogleSecretManagerPassPhrase": {
							"description": "Passphrase for Janssen secret in Google Secret Manager. This is used for encrypting and decrypting data from the Google Secret Manager. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"$ref": "#/definitions/password"
						},
						"cnConfigGoogleSecretVersionId": {
							"description": "Secret version to be used for configuration. Defaults to latest and should normally always stay that way. Used only when global.configAdapterName and global.configSecretAdapter is set to google. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": "^([0-9]|latest)*$"
						},
						"cnConfigGoogleSecretNamePrefix": {
							"description": "Prefix for Janssen configuration secret in Google Secret Manager. Defaults to jans. If left intact jans-configuration secret will be created. Used only when global.configAdapterName and global.configSecretAdapter is set to google.",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnDocumentStoreType": {
							"description": "Document store type to use for shibboleth files JCA or LOCAL. Note that if JCA is selected Apache Jackrabbit will be used. Jackrabbit also enables loading custom files across all services easily.",
							"type": "string",
							"pattern": "^(LOCAL|JCA)$"
						},
						"cnJackrabbitAdminId": {
							"description": "",
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnJackrabbitAdminIdFile": {
							"type": "string",
							"pattern": ".*jackrabbit_admin_id\\b.*"
						},
						"cnJackrabbitAdminPassFile": {
							"type": "string",
							"pattern": ".*jackrabbit_admin_password\\b.*"
						},
						"cnJackrabbitPostgresDatabaseName": {
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnJackrabbitPostgresHost": {
							"$ref": "#/definitions/fqdn-pattern"
						},
						"cnJackrabbitPostgresPasswordFile": {
							"type": "string",
							"pattern": ".*postgres_password\\b.*"
						},
						"cnJackrabbitPostgresPort": {
							"type": "integer"
						},
						"cnJackrabbitPostgresUser": {
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnJackrabbitSyncInterval": {
							"type": "integer"
						},
						"cnJackrabbitUrl": {
							"type": "string",
							"pattern": "^(http:\/\/)?[a-z0-9-:]+$"
						},
						"cnLdapUrl": {
							"type": "string",
							"pattern": "^[a-z0-9-:]+$"
						},
						"cnMaxRamPercent": {
							"type": "string",
							"pattern": "^(\\d{0,2}(\\.\\d{1,2})?|100(\\.0?)?)$"
						},
						"cnOxtrustApiEnabled": {
							"type": "boolean"
						},
						"cnOxtrustApiTestMode": {
							"type": "boolean"
						},
						"cnOxtrustBackend": {
							"type": "string",
							"pattern": "^[a-z0-9-:]+$"
						},
						"cnPassportEnabled": {
							"type": "boolean"
						},
						"cnPersistenceLdapMapping": {
							"type": "string",
							"pattern": "^(default|user|site|cache|statistic)$"
						},
						"cnRadiusEnabled": {
							"type": "boolean"
						},
						"cnRedisSentinelGroup": {
							"type": "string"
						},
						"cnRedisSslTruststore": {
							"type": "string"
						},
						"cnRedisType": {
							"type": "string",
							"pattern": "^(SHARDED|STANDALONE|CLUSTER|SENTINEL)$"
						},
						"cnRedisUrl": {
							"$ref": "#/definitions/url-pattern"
						},
						"cnRedisUseSsl": {
							"type": "boolean"
						},
						"cnSamlEnabled": {
							"type": "boolean"
						},
						"cnSecretKubernetesSecret": {
							"type": "string",
							"pattern": "^[a-z]+$"
						},
						"cnSyncCasaManifests": {
							"type": "boolean"
						},
						"cnSyncShibManifests": {
							"type": "boolean"
						},
						"containerMetadataName": {
							"type": "string",
							"pattern": "^(kubernetes)$"
						},
						"lbAddr": {
							"$ref": "#/definitions/url-pattern"
						},
						"ldapServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				},
				"countryCode": {
					"type": "string",
					"pattern": "^[A-Z]+$"
				},
				"email": {
					"$ref": "#/definitions/email-format"
				},
				"image": {
					"type": "object",
					"properties": {
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"ldapPass": {
					"$ref": "#/definitions/password"
				},
				"orgName": {
					"type": "string",
					"pattern": "^[a-zA-Z]+$"
				},
				"redisPass": {
					"$ref": "#/definitions/password"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"state": {
					"type": "string",
					"pattern": "^[a-zA-Z]+$"
				}
			}
		},
		"config-api": {
			"type": "object",
			"properties": {}
		},
		"cr-rotate": {
			"type": "object",
			"properties": {}
		},
		"fido2": {
			"type": "object",
			"properties": {}
		},
		"global": {
			"type": "object",
			"properties": {
				"alb": {
					"type": "object",
					"properties": {
						"ingress": {
							"type": "boolean"
						}
					}
				},
				"auth-server": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"auth-server-key-rotation": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"azureStorageAccountType": {
					"type": "string",
					"pattern": "^(Standard_LRS|Premium_LRS|StandardSSD_LRS|UltraSSD_LRS)$"
				},
				"azureStorageKind": {
					"type": "string",
					"pattern": "^(Managed)$"
				},
				"client-api": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"cloud": {
					"type": "object",
					"properties": {
						"testEnviroment": {
							"type": "boolean"
						}
					}
				},
				"cnJackrabbitCluster": {
					"type": "boolean"
				},
				"cnPersistenceType": {
					"type": "string",
					"pattern": "^(ldap|couchbase|hybrid|sql)$"
				},
				"config": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"configAdapterName": {
					"type": "string",
					"pattern": "^(kubernetes|google)$"
				},
				"configSecretAdapter": {
					"type": "string",
					"pattern": "^(kubernetes|google)$"
				},
				"cnGoogleApplicationCredentials": {
					"type": "string",
					"pattern": ".*google-credentials.json\\b.*"
				},
				"config-api": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"cr-rotate": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"domain": {
					"$ref": "#/definitions/fqdn-pattern"
				},
				"fido2": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"gcePdStorageType": {
					"type": "string",
					"pattern": "^(pd-standard|pd-balanced|pd-ssd)$"
				},
				"isDomainRegistered": {
					"type": "boolean"
				},
				"istio": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						},
						"ingress": {
							"type": "boolean"
						},
						"namespace": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						}
					}
				},
				"jackrabbit": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"lbIp": {
					"$ref": "#/definitions/ip-pattern"
				},
				"nginx-ingress": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"opendj": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"oxshibboleth": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"distribution": {
					"type": "string",
					"pattern": "^(default|openbanking)$"
				},
				"persistence": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"scim": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				},
				"storageClass": {
					"type": "object",
					"properties": {
						"allowVolumeExpansion": {
							"type": "boolean"
						},
						"allowedTopologies": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"mountOptions": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"parameters": {
							"type": "object",
							"properties": {
								"fsType": {
									"type": "string"
								},
								"kind": {
									"type": "string"
								},
								"pool": {
									"type": "string"
								},
								"storageAccountType": {
									"type": "string"
								},
								"type": {
									"type": "string"
								}
							}
						},
						"provisioner": {
							"type": "string"
						},
						"reclaimPolicy": {
							"type": "string"
						},
						"volumeBindingMode": {
							"type": "string"
						}
					}
				},
				"upgrade": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						}
					}
				}
			}
		},
		"jackrabbit": {
			"type": "object",
			"properties": {}
		},
		"nginx-ingress": {
			"type": "object",
			"properties": {}
		},
		"opendj": {
			"type": "object",
			"properties": {}
		},
		"oxpassport": {
			"type": "object",
			"properties": {}
		},
		"oxshibboleth": {
			"type": "object",
			"properties": {}
		},
		"persistence": {
			"type": "object",
			"properties": {}
		},
		"radius": {
			"type": "object",
			"properties": {}
		},
		"scim": {
			"type": "object",
			"properties": {}
		}
	},
	"allOf": [
		{
			"$ref": "#/definitions/auth-server-enabled"
		},
		{
			"$ref": "#/definitions/auth-server-key-rotation-enabled"
		},
		{
			"$ref": "#/definitions/casa-enabled"
		},
		{
			"$ref": "#/definitions/client-api-enabled"
		},
		{
			"$ref": "#/definitions/config-api-enabled"
		},
		{
			"$ref": "#/definitions/cr-rotate-enabled"
		},
		{
			"$ref": "#/definitions/fido2-enabled"
		},
		{
			"$ref": "#/definitions/jackrabbit-enabled"
		},
		{
			"$ref": "#/definitions/nginx-ingress-enabled"
		},
		{
			"$ref": "#/definitions/opendj-enabled"
		},
		{
			"$ref": "#/definitions/oxpassport-enabled"
		},
		{
			"$ref": "#/definitions/oxshibboleth-enabled"
		},
		{
			"$ref": "#/definitions/persistence-enabled"
		},
		{
			"$ref": "#/definitions/radius-enabled"
		},
		{
			"$ref": "#/definitions/scim-enabled"
		}


	],
	"definitions": {
		"password": {
			"anyOf": [
				{
					"type": "string",
					"minLength": 8,
					"pattern": "",
					"description": "Password does not meet requirements. The password must contain one digit, one uppercase letter, one lower case letter and one symbol",
					"errors": {
						"minLength": "Password minimum 6 character",
						"pattern": "Password does not meet requirements. The password must contain one digit, one uppercase letter, one lower case letter and one symbol"
					}
				},
				{
					"type": "string",
					"maxLength": 0
				}
			]
		},
		"password-pattern": {
			"type": "string",
			"minLength": 6,
			"pattern": "",
			"errors": {
				"minLength": "Password minimum 6 character",
				"pattern": "Password does not meet requirements. The password must contain one digit, one uppercase letter, one lower case letter and one symbol"
			}
		},
		"email-format": {
			"type": "string",
			"format": "email"
		},
		"fqdn-pattern": {
			"anyOf": [
				{
					"type": "string",
					"errors": {
						"pattern": "Setting not FQDN structured. Please enter a FQDN with the format demoexample.jans.io"
					}
				},
				{
					"type": "string",
					"maxLength": 0
				}
			]
		},
		"url-pattern": {
			"anyOf": [
				{
					"type": "string",
					"pattern": "(^|\\s)((https?:\\/\\/)?[\\w-]+(\\.[\\w-]+)+\\.?(:\\d+)?(\\/\\S*)?)",
					"errors": {
						"pattern": "URL pattern is not meeting standards."
					}
				},
				{
					"type": "string",
					"maxLength": 0
				}
			]
		},
		"ip-pattern": {
			"anyOf": [
				{
					"type": "string",
					"pattern": "^(\\*|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$",
					"errors": {
						"pattern": "Not a valid IP."
					}
				},
				{
					"type": "string",
					"maxLength": 0
				}
			]
		},
		"auth-server-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"auth-server": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"auth-server": {
				"required": [
				"image",
				"replicas",
				"resources",
				"service"
			],
				"properties": {
				"dnsPolicy": {
					"type": "string",
					"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
				},
				"dnsConfig": {
					"type": "object"
				},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"authServerServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}
			}}},
			"else": true
		},
		"auth-server-key-rotation-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"auth-server-key-rotation": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"auth-server-key-rotation": {
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
							"image": {
								"type": "object",
								"properties": {
									"pullPolicy": {
										"type": "string",
										"pattern": "^(Always|Never|IfNotPresent)$"
									},
									"repository": {
										"type": "string",
										"pattern": "^[a-z0-9-_/]+$"
									},
									"tag": {
										"type": "string",
										"pattern": "^[a-z0-9-_.]+$"
									}
								}
							},
							"keysLife": {
								"type": "integer"
							},
							"resources": {
								"type": "object",
								"properties": {
									"limits": {
										"type": "object",
										"properties": {
											"cpu": {
												"type": "string",
												"pattern": "^[0-9m]+$"
											},
											"memory": {
												"type": "string",
												"pattern": "^[0-9Mi]+$"
											}
										}
									},
									"requests": {
										"type": "object",
										"properties": {
											"cpu": {
												"type": "string",
												"pattern": "^[0-9m]+$"
											},
											"memory": {
												"type": "string",
												"pattern": "^[0-9Mi]+$"
											}
										}
									}
								}
							}
						},
						"required": [
							"image",
							"resources",
							"keysLife"
						]
					}
				}
			},
			"else": true
		},
		"casa-enabled": {
			"if": {
				"properties": {
					"config": {
						"properties": {
							"configmap": {
								"properties": {
									"cnCasaEnabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}

			},
			"then": {
				"properties": {
					"casa": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
							"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
							"replicas": {
					"type": "integer"
				},
							"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
							"service": {
					"type": "object",
					"properties": {
						"casaServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
						}
					}
				}
			},
			"else": true
		},
		"client-api-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"client-api": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"client-api": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
							"image": {
								"type": "object",
								"properties": {
									"pullPolicy": {
										"type": "string",
										"pattern": "^(Always|Never|IfNotPresent)$"
									},
									"repository": {
										"type": "string",
										"pattern": "^[a-z0-9-_/]+$"
									},
									"tag": {
										"type": "string",
										"pattern": "^[a-z0-9-_.]+$"
									}
								}
							},
							"replicas": {
								"type": "integer"
							},
							"resources": {
								"type": "object",
								"properties": {
									"limits": {
										"type": "object",
										"properties": {
											"cpu": {
												"type": "string",
												"pattern": "^[0-9m]+$"
											},
											"memory": {
												"type": "string",
												"pattern": "^[0-9Mi]+$"
											}
										}
									},
									"requests": {
										"type": "object",
										"properties": {
											"cpu": {
												"type": "string",
												"pattern": "^[0-9m]+$"
											},
											"memory": {
												"type": "string",
												"pattern": "^[0-9Mi]+$"
											}
										}
									}
								}
							},
							"service": {
								"type": "object",
								"properties": {
									"clientApiServerServiceName": {
										"type": "string",
										"pattern": "^[a-z0-9-]+$"
									}
								}
							}
						}
					}
				}
			},
			"else": true
		},
		"config-api-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"config-api": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"config-api": {
										"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
			"type": "object",
			"properties": {
				"dnsPolicy": {
					"type": "string",
					"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
				},
				"dnsConfig": {
					"type": "object"
				},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"configApiServerServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}
					}
				}
			},
			"else": true
		},
		"cr-rotate-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"cr-rotate": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"cr-rotate": {
			"properties": {
				"dnsPolicy": {
					"type": "string",
					"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
				},
				"dnsConfig": {
					"type": "object"
				},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"crRotateServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}
			}}},
			"else": true
		},
		"fido2-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"fido2": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"fido2": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
				"dnsPolicy": {
					"type": "string",
					"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
				},
				"dnsConfig": {
					"type": "object"
				},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"fido2ServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}
					}
				}
			},
			"else": true
		},
		"jackrabbit-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"jackrabbit": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"jackrabbit": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"secrets": {
					"type": "object",
					"properties": {
						"cnJackrabbitAdminPass": {
							"$ref": "#/definitions/password"
						},
						"cnJackrabbitPostgresPass": {
							"$ref": "#/definitions/password"
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"jackRabbitServiceName": {
							"pattern": "^[a-z0-9-]+$"
						}
					}
				},
				"storage": {
					"type": "object",
					"properties": {
						"size": {
							"type": "string",
							"pattern": "^[0-9]Gi+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"nginx-ingress-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"nginx-ingress": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"nginx-ingress": {
						"type": "object",
						  "properties": {
							"ingress": {
							  "type": "object",
								"required": [
								"openidConfigEnabled",
								"uma2ConfigEnabled",
								"webfingerEnabled",
								"webdiscoveryEnabled",
								"scimConfigEnabled",
								"scimEnabled",
								"configApiEnabled",
								"u2fConfigEnabled",
								"fido2ConfigEnabled",
								"authServerEnabled",
								"additionalAnnotations",
								"path",
								"hosts",
								"tls"
							  ],

							  "properties": {
								"openidConfigEnabled": {
								  "type": "boolean"
								},
								"uma2ConfigEnabled": {
								  "type": "boolean"
								},
								"webfingerEnabled": {
								  "type": "boolean"
								},
								"webdiscoveryEnabled": {
								  "type": "boolean"
								},
								"scimConfigEnabled": {
								  "type": "boolean"
								},
								"scimEnabled": {
								  "type": "boolean"
								},
								"configApiEnabled": {
								  "type": "boolean"
								},
								"u2fConfigEnabled": {
								  "type": "boolean"
								},
								"fido2ConfigEnabled": {
								  "type": "boolean"
								},
								"authServerEnabled": {
								  "type": "boolean"
								},
								"additionalAnnotations": {
								  "type": "object"
								},
								"hosts": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/fqdn-pattern"
									}
								},
								"path": {
									"type": "string"
								},
								"tls": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"hosts": {
												"type": "array",
												"items": {
													"$ref": "#/definitions/fqdn-pattern"
												}
											},
											"secretName": {
												"type": "string",
												"pattern": "^[a-z-]+$"
											}
										}
									}
								}
							  }
							}
						  }
					}
				}
			},
			"else": true
		},
		"opendj-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"opendj": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"opendj": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
				"dnsPolicy": {
					"type": "string",
					"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
				},
				"dnsConfig": {
					"type": "object"
				},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"multiCluster": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean"
						},
						"serfAdvertiseAddr": {
							"type": "string"
						},
						"serfKey": {
							"type": "string"
						},
						"serfPeers": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"persistence": {
					"type": "object",
					"properties": {
						"size": {
							"type": "string",
							"pattern": "^[0-9]Gi+$"
						}
					}
				},
				"ports": {
					"type": "object",
					"properties": {
						"tcp-admin": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						},
						"tcp-ldap": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						},
						"tcp-ldaps": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						},
						"tcp-repl": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						},
						"tcp-serf": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						},
						"udp-serf": {
							"type": "object",
							"properties": {
								"nodePort": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"protocol": {
									"type": "string"
								},
								"targetPort": {
									"type": "integer"
								}
							}
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string"
								},
								"memory": {
									"type": "string"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string"
								},
								"memory": {
									"type": "string"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"ldapServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"oxpassport-enabled": {
			"if": {
				"properties": {
					"config": {
						"properties": {
							"configmap": {
								"properties": {
									"cnPassportEnabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"oxpassport": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"oxPassportServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"oxshibboleth-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"oxshibboleth": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"oxshibboleth": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"oxShibbolethServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"persistence-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"persistence": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"persistence": {
						"required": [
							"image",
							"resources"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"radius-enabled": {
			"if": {
				"properties": {
					"config": {
						"properties": {
							"configmap": {
								"properties": {
									"cnRadiusEnabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"radius": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string",
							"pattern": "^(Always|Never|IfNotPresent)$"
						},
						"repository": {
							"type": "string",
							"pattern": "^[a-z0-9-_/]+$"
						},
						"tag": {
							"type": "string",
							"pattern": "^[a-z0-9-_.]+$"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string",
									"pattern": "^[0-9m]+$"
								},
								"memory": {
									"type": "string",
									"pattern": "^[0-9Mi]+$"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"oxTrustServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		},
		"scim-enabled": {
			"if": {
				"properties": {
					"global": {
						"properties": {
							"scim": {
								"properties": {
									"enabled": {
										"const": "true"
									}
								}
							}
						}
					}
				}
			},
			"then": {
				"properties": {
					"scim": {
						"required": [
							"image",
							"replicas",
							"resources",
							"service"
						],
						"type": "object",
						"properties": {
							"dnsPolicy": {
								"type": "string",
								"pattern": "^(Default|ClusterFirst|ClusterFirstWithHostNet|None|)$"
							},
							"dnsConfig": {
								"type": "object"
							},
				"image": {
					"type": "object",
					"properties": {
						"pullPolicy": {
							"type": "string"
						},
						"repository": {
							"type": "string"
						},
						"tag": {
							"type": "string"
						}
					}
				},
				"replicas": {
					"type": "integer"
				},
				"resources": {
					"type": "object",
					"properties": {
						"limits": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string"
								},
								"memory": {
									"type": "string"
								}
							}
						},
						"requests": {
							"type": "object",
							"properties": {
								"cpu": {
									"type": "string"
								},
								"memory": {
									"type": "string"
								}
							}
						}
					}
				},
				"service": {
					"type": "object",
					"properties": {
						"scimServiceName": {
							"type": "string",
							"pattern": "^[a-z0-9-]+$"
						}
					}
				}
			}

					}
				}
			},
			"else": true
		}
	}
}