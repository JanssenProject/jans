
# Required environment variables for generating Janssen server initial config
# -- Add custom normal and secret envs to the service.
usrEnvs:
  # -- Add custom normal envs to the service.
  # variable1: value1
  normal: {}
  # -- Add custom secret envs to the service.
  # variable1: value1
  secret: {}
# -- Admin password to log in to the UI.
adminPassword: Test1234#
# -- City. Used for certificate creation.
city: Austin
# -- Salt. Used for encoding/decoding sensitive data. If omitted or set to empty string, the value will be self-generated. Otherwise, a 24 alphanumeric characters are allowed as its value.
salt: ""
configmap:
  # -- Jetty header size in bytes in the auth server
  cnJettyRequestHeaderSize: 8192
  # -- SQL database dialect. `mysql` or `pgsql`
  cnSqlDbDialect: mysql
  # -- SQL database host uri.
  cnSqlDbHost: my-release-mysql.default.svc.cluster.local
  # -- SQL database port.
  cnSqlDbPort: 3306
  # -- SQL database name.
  cnSqlDbName: jans
  # -- SQL database username.
  cnSqlDbUser: jans
  # -- SQL database timezone.
  cnSqlDbTimezone: UTC
  # -- SQL password  injected in the secrets.
  cnSqldbUserPassword: Test1234#
  # -- Cache type. `NATIVE_PERSISTENCE`, `REDIS`. or `IN_MEMORY`. Defaults to `NATIVE_PERSISTENCE` .
  cnCacheType: NATIVE_PERSISTENCE
  containerMetadataName: kubernetes
  # -- The name of the Kubernetes ConfigMap that will hold the configuration layer
  cnConfigKubernetesConfigMap: cn
  # -- The prefix of couchbase buckets. This helps with separation in between different environments and allows for the same couchbase cluster to be used by different setups of Janssen.
  cnCouchbaseBucketPrefix: jans
  # -- Couchbase certificate authority string. This must be encoded using base64. This can also be found in your couchbase UI Security > Root Certificate. In mTLS setups this is not required.
  cnCouchbaseCrt: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- The number of replicas per index created. Please note that the number of index nodes must be one greater than the number of index replicas. That means if your couchbase cluster only has 2 index nodes you cannot place the number of replicas to be higher than 1.
  cnCouchbaseIndexNumReplica: 0
  # -- Couchbase password for the restricted user config.configmap.cnCouchbaseUser  that is often used inside the services. The password must contain one digit, one uppercase letter, one lower case letter and one symbol .
  cnCouchbasePassword: P@ssw0rd
  # -- The Couchbase super user (admin) user name. This user is used during initialization only.
  cnCouchbaseSuperUser: admin
  # -- Couchbase password for the super user config.configmap.cnCouchbaseSuperUser  that is used during the initialization process. The password must contain one digit, one uppercase letter, one lower case letter and one symbol
  cnCouchbaseSuperUserPassword: Test1234#
  # -- Couchbase URL. Used only when global.cnPersistenceType is hybrid or couchbase. This should be in FQDN format for either remote or local Couchbase clusters. The address can be an internal address inside the kubernetes cluster
  cnCouchbaseUrl: cbjanssen.default.svc.cluster.local
  # -- Couchbase restricted user. Used only when global.cnPersistenceType is hybrid or couchbase.
  cnCouchbaseUser: janssen
  # [google_envs] Envs related to using Google
  # -- Service account with roles roles/secretmanager.admin base64 encoded string. This is used often inside the services to reach the configuration layer. Used only when global.configAdapterName and global.configSecretAdapter is set to google.
  cnGoogleSecretManagerServiceAccount: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- Project id of the google project the secret manager belongs to. Used only when global.configAdapterName and global.configSecretAdapter is set to google.
  cnGoogleProjectId: google-project-to-save-config-and-secrets-to
  # [google_spanner_envs] Envs related to using Google Secret Manager to store config and secret layer
  # -- Google Spanner ID. Used only when global.cnPersistenceType is spanner.
  cnGoogleSpannerInstanceId: ""
  # -- Google Spanner Database ID. Used only when global.cnPersistenceType is spanner.
  cnGoogleSpannerDatabaseId: ""
  # [google_spanner_envs] END
  # [google_secret_manager_envs] Envs related to using Google Secret Manager to store config and secret layer
  # -- Secret version to be used for secret configuration. Defaults to latest and should normally always stay that way. Used only when global.configAdapterName and global.configSecretAdapter is set to google.
  cnGoogleSecretVersionId: "latest"
  # -- Prefix for Janssen secret in Google Secret Manager. Defaults to janssen. If left janssen-secret secret will be created. Used only when global.configAdapterName and global.configSecretAdapter is set to google.
  cnGoogleSecretNamePrefix: janssen
  # [google_secret_manager_envs] END
  # [google_envs] END
  # [aws_envs] Envs related to using AWS
  # [aws_secret_manager_envs]
  # AWS Access key id  that belong to a user/id with SecretsManagerReadWrite policy
  cnAwsAccessKeyId: ""
  # AWS Secret Access key that belong to a user/id with SecretsManagerReadWrite policy
  cnAwsSecretAccessKey: ""
  # The URL of AWS secretsmanager service (if omitted, will use the one in the specified default region. Example: https://secretsmanager.us-west-1.amazonaws.com). Used only when global.configAdapterName and global.configSecretAdapter is set to aws.
  cnAwsSecretsEndpointUrl: ""
  # The prefix name of the secrets. Used only when global.configAdapterName and global.configSecretAdapter is set to aws.
  cnAwsSecretsNamePrefix: janssen
  # The default AWS Region to use, for example, `us-west-1` or `us-west-2`.
  cnAwsDefaultRegion: us-west-1
  # The aws named profile to use. Has to be created first. This is a sensible default and it's good to leave it as is. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html
  cnAwsProfile: janssen
  # Example replicated region [{"Region": "us-west-1"}, {"Region": "us-west-2"}]
  cnAwsSecretsReplicaRegions: []
  # [aws_secret_manager_envs] END
  # [aws_envs] END
  # [vault_envs] Envs related to Hashicorp vault
  # -- Vault AppRole RoleID.
  cnVaultRoleId: ""
  # -- Vault AppRole SecretID.
  cnVaultSecretId: ""
  # -- Base URL of Vault.
  cnVaultAddr: http://localhost:8200
  # -- Verify connection to Vault.
  cnVaultVerify: false
  # -- Path to file contains Vault AppRole role ID.
  cnVaultRoleIdFile: /etc/certs/vault_role_id
  # -- Path to file contains Vault AppRole secret ID.
  cnVaultSecretIdFile: /etc/certs/vault_secret_id
  # -- Vault namespace used to access the secrets.
  cnVaultNamespace: ""
  # -- Path to Vault KV secrets engine.
  cnVaultKvPath: secret
  # -- Base prefix name used to access secrets.
  cnVaultPrefix: jans
  # -- Path to Vault AppRole.
  cnVaultAppRolePath: approle
  # [vault_envs] END
  # -- OpenDJ internal address. Leave as default. Used when `global.cnPersistenceType` is set to `ldap`.
  cnLdapUrl: "opendj:1636"
  # -- Value passed to Java option -XX:MaxRAMPercentage
  cnMaxRamPercent: "75.0"
  # -- Specify data that should be saved in each persistence (one of default, user, cache, site, token, or session; default to default). Note this environment only takes effect when `global.cnPersistenceType`  is set to `hybrid`.
  #{
  #  "default": "<couchbase|ldap|spanner|sql>",
  #  "user": "<couchbase|ldap|spanner|sql>",
  #  "site": "<couchbase|ldap|spanner|sql>",
  #  "cache": "<couchbase|ldap|spanner|sql>",
  #  "token": "<couchbase|ldap|spanner|sql>",
  #  "session": "<couchbase|ldap|spanner|sql>",
  #}
  cnPersistenceHybridMapping: "{}"
  # -- Redis Sentinel Group. Often set when `config.configmap.cnRedisType` is set to `SENTINEL`. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisSentinelGroup: ""
  # -- Redis SSL truststore. Optional. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisSslTruststore: ""
  # -- Redis service type. `STANDALONE` or `CLUSTER`. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisType: STANDALONE
  # -- Redis URL and port number <url>:<port>. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisUrl: "redis.redis.svc.cluster.local:6379"
  # -- Boolean to use SSL in Redis. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisUseSsl: false
  # -- Kubernetes secret name holding configuration keys. Used when global.configSecretAdapter is set to kubernetes which is the default.
  cnSecretKubernetesSecret: cn
  # -- Loadbalancer address for AWS if the FQDN is not registered.
  lbAddr: ""
  # -- OpenDJ certificate string. This must be encoded using base64.
  cnLdapCrt: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- OpenDJ key string. This must be encoded using base64.
  cnLdapKey: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- Quarkus transaction recovery. When using MySQL, there could be issue regarding XA_RECOVER_ADMIN; refer to https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin for details.
  quarkusTransactionEnableRecovery: true
  # -- Keycloak logging level
  kcLogLevel: INFO
  # -- Keycloak database vendor name (default to MySQL server). To use PostgreSQL server, change the value to postgres.
  kcDbVendor: mysql
  # -- Keycloak database username
  kcDbUsername: keycloak
  # -- Password for Keycloak database access
  kcDbPassword: Test1234#
  # -- Keycloak database schema name (note that PostgreSQL may using "public" schema).
  kcDbSchema: keycloak
  # -- Keycloak database host
  kcDbUrlHost: mysql.kc.svc.cluster.local
  # -- Keycloak database port (default to port 3306 for mysql).
  kcDbUrlPort: 3306
  # -- Keycloak database name
  kcDbUrlDatabase: keycloak
  # -- Keycloak database connection properties. If using postgresql, the value can be set to empty string.
  kcDbUrlProperties: "?useUnicode=true&characterEncoding=UTF-8&character_set_server=utf8mb4"
  # -- URL of OPA API
  cnOpaUrl: http://opa.opa.svc.cluster.cluster.local:8181/v1
  # -- Message type (one of POSTGRES, REDIS, or DISABLED)
  cnMessageType: DISABLED
# -- Country code. Used for certificate creation.
countryCode: US
# -- Email address of the administrator usually. Used for certificate creation.
email: support@jans.io
image:
  # -- Image  to use for deploying.
  repository: janssenproject/configurator
  # -- Image  tag to use for deploying.
  tag: 1.1.4_dev
  # -- Image Pull Secrets
  pullSecrets: [ ]
# -- LDAP admin password if OpennDJ is used for persistence.
ldapPassword: P@ssw0rds
# -- LDAP truststore password if OpenDJ is used for persistence
ldapTruststorePassword: changeit
# -- Organization name. Used for certificate creation.
orgName: Janssen
# -- Redis admin password if `config.configmap.cnCacheType` is set to `REDIS`.
redisPassword: P@assw0rd
# -- Resource specs.
resources:
  limits:
    # -- CPU limit.
    cpu: 300m
    # -- Memory limit.
    memory: 300Mi
  requests:
    # -- CPU request.
    cpu: 300m
    # -- Memory request.
    memory: 300Mi
# -- State code. Used for certificate creation.
state: TX
# -- Configure any additional volumes that need to be attached to the pod
volumes: []
# -- Configure any additional volumesMounts that need to be attached to the containers
volumeMounts: []
# Actions on lifecycle events such as postStart and preStop
# Example
# lifecycle:
#   postStart:
#     exec:
#       command: ["sh", "-c", "mkdir /opt/jans/jetty/jans-auth/custom/static/stylesheet/"]
lifecycle: {}
# -- Add custom dns policy
dnsPolicy: ""
# -- Add custom dns config
dnsConfig: {}
# -- CE to CN Migration section
migration:
 # -- Boolean flag to enable migration from CE
 enabled: false
 # -- Directory holding all migration files
 migrationDir: /ce-migration
 # -- migration data-format depending on persistence backend.
 # Supported data formats are ldif, couchbase+json, spanner+avro, postgresql+json, and mysql+json.
 migrationDataFormat: ldif

nameOverride: ""
fullNameOverride: ""

# -- Additional labels that will be added across all resources definitions in the format of {mylabel: "myapp"}
additionalLabels: { }
# -- Additional annotations that will be added across all resources  in the format of {cert-manager.io/issuer: "letsencrypt-prod"}. key app is taken
additionalAnnotations: { }
# -- Add custom scripts that have been mounted to run before the entrypoint.
# - /tmp/custom.sh
# - /tmp/custom2.sh
customScripts: [ ]
