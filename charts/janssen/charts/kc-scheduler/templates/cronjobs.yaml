{{ if and (index .Values "global" "kc-scheduler" "enabled") (.Values.global.saml.enabled) -}}
kind: CronJob
apiVersion: batch/v1
metadata:
  name: {{ include "kc-scheduler.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    APP_NAME: kc-scheduler
    release: {{ .Release.Name }}
{{ include "kc-scheduler.labels" . | indent 4 }}
{{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
{{- end }}
{{- if .Values.additionalAnnotations }}
  annotations:
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
spec:
  schedule: "@every {{ .Values.interval }}m"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
        {{- with .Values.image.pullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 8 }}
        {{- end }}
          dnsPolicy: {{ .Values.dnsPolicy | quote }}
        {{- with .Values.dnsConfig }}
          dnsConfig:
{{ toYaml . | indent 12 }}
        {{- end }}
          containers:
            - name: {{ include "kc-scheduler.name" . }}
              {{- if .Values.customScripts }}
              command:
                - /bin/sh
                - -c
                - |
                    {{- with .Values.customScripts }}
                    {{- toYaml . | replace "- " "" | nindent 20}}
                    {{- end }}
                    /app/scripts/entrypoint.sh
              {{- end}}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              env:
                {{- include "kc-scheduler.usr-envs" . | indent 16 }}
                {{- include "kc-scheduler.usr-secret-envs" . | indent 16 }}
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              lifecycle:
{{- toYaml .Values.lifecycle | nindent 16 }}
              volumeMounts:
              {{ if or (eq .Values.global.configSecretAdapter "aws") (eq .Values.global.configAdapterName "aws") }}
                - mountPath: {{ .Values.global.cnAwsSharedCredentialsFile }}
                  name: aws-shared-credential-file
                  subPath: aws_shared_credential_file
                - mountPath: {{ .Values.global.cnAwsConfigFile }}
                  name: aws-config-file
                  subPath: aws_config_file
                - mountPath: {{ .Values.global.cnAwsSecretsReplicaRegionsFile }}
                  name: aws-secrets-replica-regions
                  subPath: aws_secrets_replica_regions
              {{- end }}
              {{ if or (eq .Values.global.configSecretAdapter "google") (eq .Values.global.cnPersistenceType "spanner") }}
                - mountPath: {{ .Values.global.cnGoogleApplicationCredentials }}
                  name: google-sa
                  subPath: google-credentials.json
                {{- end }}
              {{ if eq .Values.global.configSecretAdapter "vault" }}
                - name: vault
                  mountPath: /etc/certs/vault_role_id
                  subPath: vault_role_id
                - name: vault
                  mountPath: /etc/certs/vault_secret_id
                  subPath: vault_secret_id
              {{- end }}
              {{- with .Values.volumeMounts }}
{{- toYaml . | nindent 16 }}
              {{- end }}
              envFrom:
                - configMapRef:
                    name: {{ .Release.Name }}-config-cm
                {{ if .Values.global.usrEnvs.secret }}
                - secretRef:
                    name: {{ .Release.Name }}-global-user-custom-envs
                {{- end }}
                {{ if .Values.global.usrEnvs.normal }}
                - configMapRef:
                    name: {{ .Release.Name }}-global-user-custom-envs
                {{- end }}
              {{- if and ( .Values.global.opendj.enabled ) (or (eq .Values.global.storageClass.provisioner "microk8s.io/hostpath" ) (eq .Values.global.storageClass.provisioner "k8s.io/minikube-hostpath")) }}
              resources: {}
              {{- else if .Values.global.cloud.testEnviroment }}
              resources: {}
              {{- else }}
              resources:
{{- toYaml .Values.resources | nindent 16 }}
              {{- end }}
          volumes:
          {{- with .Values.volumes }}
{{- toYaml . | nindent 12 }}
          {{- end }}
          {{ if or (eq .Values.global.configSecretAdapter "aws") (eq .Values.global.configAdapterName "aws") }}
            - name: aws-shared-credential-file
              secret:
                secretName: {{ .Release.Name }}-aws-config-creds
                items:
                  - key: aws_shared_credential_file
                    path: aws_shared_credential_file
            - name: aws-config-file
              secret:
                secretName: {{ .Release.Name }}-aws-config-creds
                items:
                  - key: aws_config_file
                    path: aws_config_file
            - name: aws-secrets-replica-regions
              secret:
                secretName: {{ .Release.Name }}-aws-config-creds
                items:
                  - key: aws_secrets_replica_regions
                    path: aws_secrets_replica_regions
          {{- end }}
          {{ if or (eq .Values.global.configSecretAdapter "google") (eq .Values.global.cnPersistenceType "spanner") }}
            - name: google-sa
              secret:
                secretName: {{ .Release.Name }}-google-sa
          {{- end }}
          {{ if eq .Values.global.configSecretAdapter "vault" }}
            - name: vault
              secret:
                secretName: {{ .Release.Name }}-vault
                items:
                - key: vault_role_id
                  path: vault_role_id
                - key: vault_secret_id
                  path: vault_secret_id
          {{- end }}
          restartPolicy: Never
          {{- if not .Values.global.isFqdnRegistered }}
          hostAliases:
            - ip: {{ .Values.global.lbIp }}
              hostnames:
                - {{ .Values.global.fqdn }}
          {{- end }}
{{- end }}
