{{- if .Values.backup.enabled }}
kind: CronJob
apiVersion: batch/v1
metadata:
  name: {{ include "opendj.fullname" . }}-backup
  namespace: {{ $.Release.Namespace }}
  labels:
{{ include "opendj.labels" $ | indent 4}}
{{- if $.Values.additionalLabels }}
{{ toYaml $.Values.additionalLabels | indent 4 }}
{{- end }}
{{- if or (.Values.additionalAnnotations) (.Values.global.opendj.customAnnotations.cronjob) }}
  annotations:
{{- if .Values.additionalAnnotations }}
{{ toYaml .Values.additionalAnnotations | indent 4 }}
{{- end }}
{{- if .Values.global.opendj.customAnnotations.cronjob }}
{{ toYaml .Values.global.opendj.customAnnotations.cronjob | indent 4 }}
{{- end }}
{{- end }}  
spec:
  schedule: {{ .Values.backup.cronJobSchedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          dnsPolicy: {{ .Values.dnsPolicy | quote }}
        {{- with .Values.dnsConfig }}
          dnsConfig:
    {{ toYaml . | indent 12 }}
        {{- end }}
          serviceAccountName: {{ .Values.global.serviceAccountName }}
          containers:
            - name: {{ include "opendj.fullname" . }}-backup
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              envFrom:
                - configMapRef:
                    name: {{ .Release.Name }}-config-cm
              ports:
              {{- range $key, $value := .Values.ports }}
                - containerPort: {{ $value.targetPort }}
                  name: {{ $key }}
              {{- end }}
              env:
                - name: LDAP_HOST
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Janssen was installed. This is normally cn.
                      # Found in Janssen chart under config.configmap.cnConfigKubernetesConfigMap
                      name: cn
                      key: ldap_init_host
                - name: LDAP_PORT
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Janssen was installed. This is normally cn.
                      # Found in Janssen chart under config.configmap.cnConfigKubernetesConfigMap
                      name: cn
                      key: ldap_init_port
                - name: LDAP_BIND_DN
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Janssen was installed. This is normally cn.
                      # Found in Janssen chart under config.configmap.cnConfigKubernetesConfigMap
                      name: cn
                      key: ldap_site_binddn
                - name: LDAP_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-ldap-cron-pass
                      key: password
              #  while true; do sleep 60; ldaplog=$(cat /opt/opendj/logs/server.out); startedstr="The Directory Server has started successfully";  if [ -z "${ldaplog##*$startedstr*}" ]; then break; fi; echo "Waiting for opendj server to start"; done
              command:
              - /bin/sh
              - -c
              - |
                # =========
                # FUNCTIONS
                # =========

                set_java_args() {
                    # not sure if we can omit `-server` safely
                    local java_args="-server"
                    java_args="${java_args} -XX:+UseContainerSupport -XX:MaxRAMPercentage=${CN_MAX_RAM_PERCENTAGE} ${CN_JAVA_OPTIONS}"
                    # set the env var so it is loaded by `start-ds` script
                    export OPENDJ_JAVA_ARGS=${java_args}
                }

                # ==========
                # ENTRYPOINT
                # ==========

                mkdir -p /opt/opendj/locks

                python3 /app/scripts/wait.py
                python3 /app/scripts/bootstrap.py

                # run OpenDJ server
                set_java_args
                exec /opt/opendj/bin/start-ds -N &
                sleep 300
                RANDOM_NUM=$(cat /dev/urandom | tr -cd '0-5' | head -c 1)
                LDAP_BACKUP_FILE=backup-$RANDOM_NUM.ldif
                /opt/opendj/bin/export-ldif --hostname "$LDAP_HOST" --port 4444 --bindDN "$LDAP_BIND_DN" --bindPassword "$LDAP_PASSWORD" --backendID userRoot --ldifFile /opt/opendj/ldif/$LDAP_BACKUP_FILE --trustAll
              volumeMounts:
              - name: ldap-certkey
                mountPath: {{ .Values.global.cnLdapCertFile }}
                subPath: opendj.crt
              - name: ldap-certkey
                mountPath: {{ .Values.global.cnLdapKeyFile }}
                subPath: opendj.key
              - name: ldap-pass
                mountPath: {{ .Values.global.cnLdapPasswordFile }}
                subPath: ldap_password
              - name: ldap-pass
                mountPath: {{ .Values.global.cnLdapTruststorePasswordFile }}
                subPath: ldap_truststore_password
          restartPolicy: Never
          volumes:
          - name: ldap-pass
            secret:
              secretName: {{ .Release.Name }}-ldap-pass
          - name: ldap-certkey
            secret:
              secretName: {{ .Release.Name }}-ldap-certkey
{{- end }}
