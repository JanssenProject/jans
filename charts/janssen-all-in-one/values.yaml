# -- Configuration parameters for setup and initial configuration secret and config layers used by Janssen services.
# -- Fully qualified domain name to be used for Janssen installation. This address will be used to reach Janssen services.
fqdn: demoexample.jans.io
# -- Admin password to log in to the UI.
adminPassword: Test1234#
# -- City. Used for certificate creation.
city: Austin
# -- Country code. Used for certificate creation.
countryCode: US
# -- Email address of the administrator usually. Used for certificate creation.
email: support@jans.io
# -- Organization name. Used for certificate creation.
orgName: Janssen
# -- Resource specs.
# -- State code. Used for certificate creation.
state: TX
# -- Persistence backend to run Janssen with couchbase|hybrid|sql|spanner.
cnPersistenceType: sql
# -- Salt. Used for encoding/decoding sensitive data. If omitted or set to empty string, the value will be self-generated. Otherwise, a 24 alphanumeric characters are allowed as its value.
salt: ""
configmap:
  # -- Jetty header size in bytes in the auth server
  cnJettyRequestHeaderSize: 8192
  # -- Schema name used by SQL database (default to empty-string; if using MySQL, the schema name will be resolved as the database name, whereas in PostgreSQL the schema name will be resolved as `"public"`).
  cnSqlDbSchema: ""
  # -- SQL database dialect. `mysql` or `pgsql`
  cnSqlDbDialect: mysql
  # -- SQL database host uri.
  cnSqlDbHost: my-release-mysql.default.svc.cluster.local
  # -- SQL database port.
  cnSqlDbPort: 3306
  # -- SQL database name.
  cnSqlDbName: jans
  # -- SQL database username.
  cnSqlDbUser: jans
  # -- SQL database timezone.
  cnSqlDbTimezone: UTC
  # -- SQL password  injected the secrets .
  cnSqldbUserPassword: Test1234#
  # -- Cache type. `NATIVE_PERSISTENCE`, `REDIS`. or `IN_MEMORY`. Defaults to `NATIVE_PERSISTENCE` .
  cnCacheType: NATIVE_PERSISTENCE
  # -- The name of the Kubernetes ConfigMap that will hold the configuration layer
  cnConfigKubernetesConfigMap: cn
  # -- The prefix of couchbase buckets. This helps with separation in between different environments and allows for the same couchbase cluster to be used by different setups of Janssen.
  cnCouchbaseBucketPrefix: jans
  # -- Couchbase certificate authority string. This must be encoded using base64. This can also be found in your couchbase UI Security > Root Certificate. In mTLS setups this is not required.
  cnCouchbaseCrt: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- The number of replicas per index created. Please note that the number of index nodes must be one greater than the number of index replicas. That means if your couchbase cluster only has 2 index nodes you cannot place the number of replicas to be higher than 1.
  cnCouchbaseIndexNumReplica: 0
  # -- Couchbase password for the restricted user config.configmap.cnCouchbaseUser  that is often used inside the services. The password must contain one digit, one uppercase letter, one lower case letter and one symbol .
  cnCouchbasePassword: P@ssw0rd
  # -- The Couchbase super user (admin) username. This user is used during initialization only.
  cnCouchbaseSuperUser: admin
  # -- Couchbase password for the superuser config.configmap.cnCouchbaseSuperUser  that is used during the initialization process. The password must contain one digit, one uppercase letter, one lower case letter and one symbol
  cnCouchbaseSuperUserPassword: Test1234#
  # -- Couchbase URL. Used only when cnPersistenceType is hybrid or couchbase. This should be in FQDN format for either remote or local Couchbase clusters. The address can be an internal address inside the kubernetes cluster
  cnCouchbaseUrl: cbjanssen.default.svc.cluster.local
  # -- Couchbase restricted user. Used only when cnPersistenceType is hybrid or couchbase.
  cnCouchbaseUser: janssen
  # [google_envs] Envs related to using Google
  # -- Service account with roles roles/secretmanager.admin base64 encoded string. This is used often inside the services to reach the configuration layer. Used only when configAdapterName and configSecretAdapter is set to google.
  cnGoogleSecretManagerServiceAccount: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- Project id of the Google project the secret manager belongs to. Used only when configAdapterName and configSecretAdapter is set to google.
  cnGoogleProjectId: google-project-to-save-config-and-secrets-to
  # [google_spanner_envs] Envs related to using Google Secret Manager to store config and secret layer
  # -- Google Spanner ID. Used only when cnPersistenceType is spanner.
  cnGoogleSpannerInstanceId: ""
  # -- Google Spanner Database ID. Used only when cnPersistenceType is spanner.
  cnGoogleSpannerDatabaseId: ""
  # [google_spanner_envs] END
  # [google_secret_manager_envs] Envs related to using Google Secret Manager to store config and secret layer
  # -- Secret version to be used for secret configuration. Defaults to latest and should normally always stay that way. Used only when configAdapterName and configSecretAdapter is set to google.
  cnGoogleSecretVersionId: "latest"
  # -- Prefix for Janssen secret in Google Secret Manager. Defaults to janssen. If left janssen-secret secret will be created. Used only when configAdapterName and configSecretAdapter is set to google.
  cnGoogleSecretNamePrefix: janssen
  # [google_secret_manager_envs] END
  # [google_envs] END
  # [aws_envs] Envs related to using AWS
  # [aws_secret_manager_envs]
  # AWS Access key id  that belong to a user/id with SecretsManagerReadWrite policy
  cnAwsAccessKeyId: ""
  # AWS Secret Access key that belong to a user/id with SecretsManagerReadWrite policy
  cnAwsSecretAccessKey: ""
  # The URL of AWS secretsmanager service (if omitted, will use the one in the specified default region. Example: https://secretsmanager.us-west-1.amazonaws.com). Used only when configAdapterName and configSecretAdapter is set to aws.
  cnAwsSecretsEndpointUrl: ""
  # The prefix name of the secrets. Used only when configAdapterName and configSecretAdapter is set to aws.
  cnAwsSecretsNamePrefix: janssen
  # The default AWS Region to use, for example, `us-west-1` or `us-west-2`.
  cnAwsDefaultRegion: us-west-1
  # The aws named profile to use. Has to be created first. This is a sensible default and it's good to leave it as is. https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html
  cnAwsProfile: janssen
  # Example replicated region [{"Region": "us-west-1"}, {"Region": "us-west-2"}]
  cnAwsSecretsReplicaRegions: []
  # [aws_secret_manager_envs] END
  # [aws_envs] END
  # -- Value passed to Java option -XX:MaxRAMPercentage
  cnMaxRamPercent: "75.0"
  # -- SCIM protection mode OAUTH|TEST|UMA
  cnScimProtectionMode: "OAUTH"
  # -- Redis Sentinel Group. Often set when `config.configmap.cnRedisType` is set to `SENTINEL`. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisSentinelGroup: ""
  # -- Redis SSL truststore. Optional. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisSslTruststore: ""
  # -- Redis service type. `STANDALONE` or `CLUSTER`. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisType: STANDALONE
  # -- Redis URL and port number <url>:<port>. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisUrl: "redis.redis.svc.cluster.local:6379"
  # -- Boolean to use SSL in Redis. Can be used when  `config.configmap.cnCacheType` is set to `REDIS`.
  cnRedisUseSsl: false
  # -- Kubernetes secret name holding configuration keys. Used when configSecretAdapter is set to kubernetes which is the default.
  cnSecretKubernetesSecret: cn
  # -- Load balancer address for AWS if the FQDN is not registered.
  lbAddr: ""
  # -- OpenDJ certificate string. This must be encoded using base64.
  cnLdapCrt: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- OpenDJ key string. This must be encoded using base64.
  cnLdapKey: SWFtTm90YVNlcnZpY2VBY2NvdW50Q2hhbmdlTWV0b09uZQo=
  # -- Quarkus transaction recovery. When using MySQL, there could be issue regarding XA_RECOVER_ADMIN; refer to https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin for details.
  quarkusTransactionEnableRecovery: true
  # -- Keycloak logging level
  kcLogLevel: INFO
  # -- Keycloak proxy mode (for most deployments, this doesn't need to be changed)
  kcProxy: edge
  # -- Keycloak database vendor name (default to MySQL server). To use PostgreSQL server, change the value to postgres.
  kcDbVendor: mysql
  # -- Keycloak database username
  kcDbUsername: keycloak
  # -- Password for Keycloak database access
  kcDbPassword: Test1234#
  # -- Keycloak database schema name (note that PostgreSQL may using "public" schema).
  kcDbSchema: keycloak
  # -- Keycloak database host
  kcDbUrlHost: mysql.kc.svc.cluster.local
  # -- Keycloak database port (default to port 3306 for mysql).
  kcDbUrlPort: 3306
  # -- Keycloak database name
  kcDbUrlDatabase: keycloak
  # -- Keycloak database connection properties. If using postgresql, the value can be set to empty string.
  kcDbUrlProperties: "?useUnicode=true&characterEncoding=UTF-8&character_set_server=utf8mb4"
  # -- URL of OPA server
  cnOpaUrl: http://opa.opa.svc.cluster.cluster.local:8181/v1
  # -- Message type (one of POSTGRES, REDIS, or DISABLED)
  cnMessageType: DISABLED
nameOverride: ""
fullNameOverride: ""
# -- Redis admin password if `configmap.cnCacheType` is set to `REDIS`.
redisPassword: P@assw0rd
config:
  # -- Boolean flag to enable/disable the configuration job. This normally should never be false
  enabled: true
persistence:
  # -- Boolean flag to enable/disable the persistence job.
  enabled: true




alb:
  # -- switches the service to Nodeport for ALB ingress
  ingress: false
# -- Parameters used globally across all services helm charts.
auth-server:
  # -- Boolean flag to enable/disable auth-server chart. You should never set this to false.
  enabled: true
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e auth-server-script ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- jans-auth.log target
    authLogTarget: "STDOUT"
    # -- jans-auth.log level
    authLogLevel: "INFO"
    # -- http_request_response.log target
    httpLogTarget: "FILE"
    # -- http_request_response.log level
    httpLogLevel: "INFO"
    # -- jans-auth_persistence.log target
    persistenceLogTarget: "FILE"
    # -- jans-auth_persistence.log level
    persistenceLogLevel: "INFO"
    # -- jans-auth_persistence_duration.log target
    persistenceDurationLogTarget: "FILE"
    # -- jans-auth_persistence_duration.log level
    persistenceDurationLogLevel: "INFO"
    # -- jans-auth_persistence_ldap_statistics.log target
    ldapStatsLogTarget: "FILE"
    # -- jans-auth_persistence_ldap_statistics.log level
    ldapStatsLogLevel: "INFO"
    # -- jans-auth_script.log target
    scriptLogTarget: "FILE"
    # -- jans-auth_script.log level
    scriptLogLevel: "INFO"
    # -- jans-auth_script.log target
    auditStatsLogTarget: "FILE"
    # -- jans-auth_audit.log level
    auditStatsLogLevel: "INFO"
  # -- space-separated key algorithm for signing (default to `RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512`)
  authSigKeys: "RS256 RS384 RS512 ES256 ES384 ES512 PS256 PS384 PS512"
  # -- space-separated key algorithm for encryption (default to `RSA1_5 RSA-OAEP`)
  authEncKeys: "RSA1_5 RSA-OAEP"
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # -- Enable Auth server endpoints /jans-auth
    authServerEnabled: true
    # -- Enable endpoint /.well-known/openid-configuration
    openidConfigEnabled: true
    # -- Enable endpoint /device-code
    deviceCodeEnabled: true
    # -- Enable endpoint /firebase-messaging-sw.js
    firebaseMessagingEnabled: true
    # -- Enable endpoint /.well-known/uma2-configuration
    uma2ConfigEnabled: true
    # -- Enable endpoint /.well-known/webfinger
    webfingerEnabled: true
    # -- Enable endpoint /.well-known/simple-web-discovery
    webdiscoveryEnabled: true
    # -- Enable endpoint /.well-known/fido-configuration
    u2fConfigEnabled: true
  # -- Enable jans-lock as service running inside auth-server
  lockEnabled: false
# -- Responsible for regenerating auth-keys per x hours
auth-server-key-rotation:
  # -- Add custom normal and secret envs to the service
  usrEnvs:
    # -- Add custom normal envs to the service
    # variable1: value1
    normal: {}
    # -- Add custom secret envs to the service
    # variable1: value1
    secret: {}
  # -- Add custom dns policy
  dnsPolicy: ""
  # -- Add custom dns config
  dnsConfig: {}
  image:
    # -- Image pullPolicy to use for deploying.
    pullPolicy: IfNotPresent
    # -- Image  to use for deploying.
    repository: ghcr.io/janssenproject/jans/certmanager
    # -- Image  tag to use for deploying.
    tag: 1.0.23_dev
    # -- Image Pull Secrets
    pullSecrets: [ ]
  # -- Auth server key rotation keys life in hours
  keysLife: 48
  # -- Set key selection strategy used by Auth server
  keysStrategy: NEWER
  # -- Delay (in seconds) before pushing private keys to Auth server
  keysPushDelay: 0
  # -- Set key selection strategy after pushing private keys to Auth server (only takes effect when keysPushDelay value is greater than 0)
  keysPushStrategy: NEWER
  # -- Resource specs.
  resources:
    limits:
      # -- CPU limit.
      cpu: 300m
      # -- Memory limit.
      memory: 300Mi
    requests:
      # -- CPU request.
      cpu: 300m
      # -- Memory request.
      memory: 300Mi
  # -- Configure any additional volumes that need to be attached to the pod
  volumes: []
  # -- Configure any additional volumesMounts that need to be attached to the containers
  volumeMounts: []
  # Actions on lifecycle events such as postStart and preStop
  # Example
  # lifecycle:
  #   postStart:
  #     exec:
  #       command: ["sh", "-c", "mkdir /opt/jans/jetty/jans-auth/custom/static/stylesheet/"]
  lifecycle: {}

  # -- Additional labels that will be added across the gateway in the format of {mylabel: "myapp"}
  additionalLabels: { }
  # -- Additional annotations that will be added across the gateway in the format of {cert-manager.io/issuer: "letsencrypt-prod"}
  additionalAnnotations: {}
  # -- Boolean flag to enable/disable the auth-server-key rotation cronjob.
  enabled: true
  # -- Add custom scripts that have been mounted to run before the entrypoint.
  # - /tmp/custom.sh
  # - /tmp/custom2.sh
  customScripts: [ ]
casa:
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e casa ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- casa.log target
    casaLogTarget: "STDOUT"
    # -- casa.log level
    casaLogLevel: "INFO"
    # -- casa timer log target
    timerLogTarget: "FILE"
    # -- casa timer log level
    timerLogLevel: "INFO"
  # -- Name of the casa service. Please keep it as default.
  casaServiceName: casa
  # -- Boolean flag to enable/disable the casa chart.
  enabled: true
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # -- Enable casa endpoints /casa
    casaEnabled: false
config-api:
  # -- Name of the config-api service. Please keep it as default.
  configApiServerServiceName: config-api
  # -- Boolean flag to enable/disable the config-api chart.
  enabled: true
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e config-api_persistence ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- configapi.log target
    configApiLogTarget: "STDOUT"
    # -- configapi.log level
    configApiLogLevel: "INFO"
    # -- config-api_persistence.log target
    persistenceLogTarget: "FILE"
    # -- config-api_persistence.log level
    persistenceLogLevel: "INFO"
    # -- config-api_persistence_duration.log target
    persistenceDurationLogTarget: "FILE"
    # -- config-api_persistence_duration.log level
    persistenceDurationLogLevel: "INFO"
    # -- config-api_persistence_ldap_statistics.log target
    ldapStatsLogTarget: "FILE"
    # -- config-api_persistence_ldap_statistics.log level
    ldapStatsLogLevel: "INFO"
    # -- config-api_script.log target
    scriptLogTarget: "FILE"
    # -- config-api_script.log level
    scriptLogLevel: "INFO"
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # Enable config API endpoints /jans-config-api
    configApiEnabled: true
  # -- Comma-separated values of enabled plugins (supported plugins are "admin-ui","fido2","scim","user-mgt","jans-link","kc-saml")
  plugins: "admin-ui,fido2,scim,user-mgt"
fido2:
  # -- Name of the fido2 service. Please keep it as default.
  fido2ServiceName: fido2
  # -- Boolean flag to enable/disable the fido2 chart.
  enabled: true
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e fido2 ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- fido2.log target
    fido2LogTarget: "STDOUT"
    # -- fido2.log level
    fido2LogLevel: "INFO"
    # -- fido2_persistence.log target
    persistenceLogTarget: "FILE"
    # -- fido2_persistence.log level
    persistenceLogLevel: "INFO"
    # -- fido2_persistence_duration.log target
    persistenceDurationLogTarget: "FILE"
    # -- fido2_persistence_duration.log level
    persistenceDurationLogLevel: "INFO"
    # -- fido2_script.log target
    scriptLogTarget: "FILE"
    # -- fido2_script.log level
    scriptLogLevel: "INFO"
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # -- Enable endpoint /.well-known/fido2-configuration
    fido2ConfigEnabled: false
scim:
  # -- Name of the scim service. Please keep it as default.
  scimServiceName: scim
  # -- Boolean flag to enable/disable the SCIM chart.
  enabled: true
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e jans-scim ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- jans-scim.log target
    scimLogTarget: "STDOUT"
    # -- jans-scim.log level
    scimLogLevel: "INFO"
    # -- jans-scim_persistence.log target
    persistenceLogTarget: "FILE"
    # -- jans-scim_persistence.log level
    persistenceLogLevel: "INFO"
    # -- jans-scim_persistence_duration.log target
    persistenceDurationLogTarget: "FILE"
    # -- jans-scim_persistence_duration.log level
    persistenceDurationLogLevel: "INFO"
    # -- jans-scim_persistence_ldap_statistics.log target
    ldapStatsLogTarget: "FILE"
    # -- jans-scim_persistence_ldap_statistics.log level
    ldapStatsLogLevel: "INFO"
    # -- jans-scim_script.log target
    scriptLogTarget: "FILE"
    # -- jans-scim_script.log level
    scriptLogLevel: "INFO"
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # -- Enable endpoint /.well-known/scim-configuration
    scimConfigEnabled: false
    # -- Enable SCIM endpoints /jans-scim
    scimEnabled: false
link:
  # -- Name of the link service. Please keep it as default.
  linkServiceName: link
  # -- Boolean flag to enable/disable the link chart.
  enabled: false
  # -- App loggers can be configured to define where the logs will be redirected to and the level of each in which it should be displayed.
  appLoggers:
    # -- Enable log prefixing which enables prepending the STDOUT logs with the file name. i.e link-persistence ===> 2022-12-20 17:49:55,744 INFO
    enableStdoutLogPrefix: "true"
    # -- cacherefresh.log target
    linkLogTarget: "STDOUT"
    # -- cacherefresh.log level
    linkLogLevel: "INFO"
    # -- cacherefresh_persistence.log target
    persistenceLogTarget: "FILE"
    # -- cacherefresh_persistence.log level
    persistenceLogLevel: "INFO"
    # -- cacherefresh_persistence_duration.log target
    persistenceDurationLogTarget: "FILE"
    # -- cacherefresh_persistence_duration.log level
    persistenceDurationLogLevel: "INFO"
    # -- cacherefresh_persistence_ldap_statistics.log target
    ldapStatsLogTarget: "FILE"
    # -- cacherefresh_persistence_ldap_statistics.log level
    ldapStatsLogLevel: "INFO"
    # -- cacherefresh_script.log target
    scriptLogTarget: "FILE"
    # -- cacherefresh_script.log level
    scriptLogLevel: "INFO"
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # Enable link endpoints /jans-link
    linkEnabled: true
saml:
  # -- Name of the saml service. Please keep it as default.
  samlServiceName: saml
  # -- Boolean flag to enable/disable the saml chart.
  enabled: false
  # -- Enable endpoints in either istio or nginx ingress depending on users choice
  ingress:
    # Enable saml endpoints /kc
    samlEnabled: false


# Global properties
# -- Boolean flag to enable mapping lbIp  to fqdn inside pods on clouds that provide static ip for load balancers. On cloud that provide only addresses to the LB this flag will enable a script to actively scan config.configmap.lbAddr and update the hosts file inside the pods automatically.
isFqdnRegistered: false
# -- The Loadbalancer IP created by nginx or istio on clouds that provide static IPs. This is not needed if `fqdn` is globally resolvable.
lbIp: 22.22.22.22
# -- Boolean flag if enabled will strip resources requests and limits from all services.
testEnviroment: false
# -- The config backend adapter that will hold Janssen configuration layer. aws|google|kubernetes
configAdapterName: kubernetes
# -- The config backend adapter that will hold Janssen secret layer. aws|google|kubernetes
configSecretAdapter: kubernetes
# -- Base64 encoded service account. The sa must have roles/secretmanager.admin to use Google secrets and roles/spanner.databaseUser to use Spanner. Leave as this is a sensible default.
cnGoogleApplicationCredentials: /etc/jans/conf/google-credentials.json
# The location of the shared credentials file used by the client (see https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html).Leave as this is a sensible default.
cnAwsSharedCredentialsFile: /etc/jans/conf/aws_shared_credential_file
# The location of the config file used by the client (see https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html). Leave as this is a sensible default.
cnAwsConfigFile: /etc/jans/conf/aws_config_file
# The location of file contains replica regions definition (if any). This file is mostly used in primary region. Example of contents of the file: `[{"Region": "us-west-1"}]`.  Used only when configAdapterName and configSecretAdapter is set to aws. Leave as this is a sensible default.
cnAwsSecretsReplicaRegionsFile: /etc/jans/conf/aws_secrets_replica_regions
# -- Port used by Prometheus JMX agent (default to empty string). To enable Prometheus JMX agent, set the value to a number.
cnPrometheusPort: ""
# -- Document store type to use for shibboleth files DB.
cnDocumentStoreType: DB
# -- Path to SQL password file
cnSqlPasswordFile: /etc/jans/conf/sql_password
# -- Path to Couchbase password file
cnCouchbasePasswordFile: /etc/jans/conf/couchbase_password
# -- Path to Couchbase superuser password file
cnCouchbaseSuperuserPasswordFile: /etc/jans/conf/couchbase_superuser_password
# -- Path to file contains password for database access
kcDbPasswordFile: /etc/jans/conf/kc_db_password
# -- Path to file contains Keycloak admin credentials (username and password)
kcAdminCredentialsFile: /etc/jans/conf/kc_admin_creds

# ingress properties
istio:
  # -- Boolean flag that enables using istio side-cars with Janssen services.
  enabled: false
  # -- Boolean flag that enables using istio gateway for Janssen. This assumes istio ingress is installed and hence the LB is available.
  ingress: false
  # -- The namespace istio is deployed in. The is normally istio-system.
  namespace: istio-system
  # -- Additional labels that will be added across the gateway in the format of {mylabel: "myapp"}
  additionalLabels: { }
  # -- Additional annotations that will be added across the gateway in the format of {cert-manager.io/issuer: "letsencrypt-prod"}
  additionalAnnotations: { }
  # -- Override the gateway that can be created by default. This is used when istio ingress has already been setup and the gateway exists.
  gateways: [ ]
  tlsSecretName: istio-tls-certificate
certManager:
  # Enable deploying a certificate that uses dns01 challenge instead of passing an annotation nginx-ingress.ingress.additionalAnnotations for nginx http01 challenge.
  certificate:
    enabled: false
    issuerKind: ClusterIssuer
    # Issuer name which you will create manually. Can be letsencrypt-production.
    issuerName: ""
    issuerGroup: cert-manager.io
    tlsSecretName: tls-certificate
nginx-ingress:
  # -- Boolean flag to enable/disable the nginx-ingress definitions chart.
  enabled: true
  ingress:
    # -- openid-configuration ingress resource labels. key app is taken
    openidConfigLabels: { }
    # -- openid-configuration ingress resource additional annotations.
    openidAdditionalAnnotations: { }
    # -- device-code ingress resource labels. key app is taken
    deviceCodeLabels: { }
    # -- device-code ingress resource additional annotations.
    deviceCodeAdditionalAnnotations: { }
    # -- Firebase Messaging ingress resource labels. key app is taken
    firebaseMessagingLabels: { }
    # -- Firebase Messaging ingress resource additional annotations.
    firebaseMessagingAdditionalAnnotations: { }
    # -- uma2 config ingress resource labels. key app is taken
    uma2ConfigLabels: { }
    # -- uma2 config ingress resource additional annotations.
    uma2AdditionalAnnotations: { }
    # -- webfinger ingress resource labels. key app is taken
    webfingerLabels: { }
    # -- webfinger ingress resource additional annotations.
    webfingerAdditionalAnnotations: { }
    # -- webdiscovery ingress resource labels. key app is taken
    webdiscoveryLabels: { }
    # -- webdiscovery ingress resource additional annotations.
    webdiscoveryAdditionalAnnotations: { }
    # -- SCIM config ingress resource labels. key app is taken
    scimConfigLabels: { }
    # -- SCIM config ingress resource additional annotations.
    scimConfigAdditionalAnnotations: { }
    # -- SCIM config ingress resource labels. key app is taken
    scimLabels: { }
    # -- SCIM ingress resource additional annotations.
    scimAdditionalAnnotations: { }
    # -- configAPI ingress resource labels. key app is taken
    configApiLabels: { }
    # -- ConfigAPI ingress resource additional annotations.
    configApiAdditionalAnnotations: { }
    # -- u2f config ingress resource labels. key app is taken
    u2fConfigLabels: { }
    # -- u2f config ingress resource additional annotations.
    u2fAdditionalAnnotations: { }
    # -- fido2 config ingress resource labels. key app is taken
    fido2ConfigLabels: { }
    # -- fido2 config ingress resource additional annotations.
    fido2ConfigAdditionalAnnotations: { }
    # -- Auth server ingress resource labels. key app is taken
    authServerLabels: { }
    # -- Auth server ingress resource additional annotations.
    authServerAdditionalAnnotations: { }
    # -- Casa ingress resource labels. key app is taken
    casaLabels: { }
    # -- Casa ingress resource additional annotations.
    casaAdditionalAnnotations: { }
    # -- SAML config ingress resource labels. key app is taken
    samlLabels: { }
    # -- SAML ingress resource additional annotations.
    samlAdditionalAnnotations: { }
    # -- Additional labels that will be added across all ingress definitions in the format of {mylabel: "myapp"}
    additionalLabels: { }
    # -- Additional annotations that will be added across all ingress definitions in the format of {cert-manager.io/issuer: "letsencrypt-prod"}
    # Enable client certificate authentication
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
    # Create the secret containing the trusted ca certificates
    # nginx.ingress.kubernetes.io/auth-tls-secret: "janssen/tls-certificate"
    # Specify the verification depth in the client certificates chain
    # nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
    # Specify if certificates are passed to upstream server
    # nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    additionalAnnotations: {}
    # Change ingressClassName to "public" if using microk8s
    ingressClassName: nginx
    path: /
    # -- Secrets holding HTTPS CA cert and key.
    tlsSecretName: tls-certificate
# Service manifest properties
service:
  # -- The name of the aio port within the aio service. Please keep it as default.
  name: http-aio
  # -- Port of the fido2 service. Please keep it as default.
  port: 8080
  # -- Default set to None If you want to make sure that connections from a particular client are passed to the same Pod each time, you can select the session affinity based on the client's IP addresses by setting this to ClientIP
  sessionAffinity: None
  # -- the maximum session sticky time if sessionAffinity is ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800


# Deployment manifest properties
# -- Configure the topology spread constraints. Notice this is a map NOT a list as in the upstream API
# https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
topologySpreadConstraints: {}
  # -- Define below as many constraints as needed. The key name should follow the structure tsc1, tsc2...etc.
  # Do not enter the key labelSelector in the entry/entries below as that is automatically injected by the chart
  #tsc1:
  #  maxSkew: 1
  #  minDomains: 1 # optional; beta since v1.25
  #  topologyKey: kubernetes.io/hostname
  #  whenUnsatisfiable: DoNotSchedule
  #  matchLabelKeys: [] # optional; alpha since v1.25
  #  nodeAffinityPolicy: [] # optional; alpha since v1.25
  #  nodeTaintsPolicy: [] # optional; alpha since v1.25
  #tsc2:
    #maxSkew: 1
# -- Configure the PodDisruptionBudget
pdb:
  enabled: true
  maxUnavailable: "90%"
# -- Configure the HorizontalPodAutoscaler
hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
  # -- metrics if targetCPUUtilizationPercentage is not set
  metrics: []
  # -- Scaling Policies
  behavior: {}
# -- Add custom normal and secret envs to the service
usrEnvs:
  # -- Add custom normal envs to the service
  # variable1: value1
  normal: {}
  # -- Add custom secret envs to the service
  # variable1: value1
  secret: {}
# -- Add custom dns policy
dnsPolicy: ""
# -- Add custom dns config
dnsConfig: {}
image:
  # -- Image pullPolicy to use for deploying.
  pullPolicy: IfNotPresent
  # -- Image  to use for deploying.
  repository: ghcr.io/janssenproject/jans/all-in-one
  # -- Image  tag to use for deploying.
  tag: 1.0.23_dev
  # -- Image Pull Secrets
  pullSecrets: [ ]
# -- Service replica number.
replicas: 1
# -- Resource specs.
resources:
  limits:
    # -- CPU limit.
    cpu: 16000m
    # -- Memory limit.
    memory: 16000Mi
  requests:
    # -- CPU request.
    cpu: 2500m
    # -- Memory request.
    memory: 2500Mi
# -- Configure the liveness healthcheck for the auth server if needed.
livenessProbe:
  # -- Executes the python3 healthcheck.
  # https://github.com/JanssenProject/docker-jans-auth-server/blob/master/scripts/healthcheck.py
  exec:
    command:
      - python3
      - /app/jans_aio/jans_auth/healthcheck.py
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
# -- Configure the readiness healthcheck for the auth server if needed.
# https://github.com/JanssenProject/docker-jans-auth-server/blob/master/scripts/healthcheck.py
readinessProbe:
  exec:
    command:
      - python3
      - /app/jans_aio/jans_auth/healthcheck.py
  initialDelaySeconds: 25
  periodSeconds: 25
  timeoutSeconds: 5
# -- Configure any additional volumes that need to be attached to the pod
volumes: []
# -- Configure any additional volumesMounts that need to be attached to the containers
volumeMounts: []
# Actions on lifecycle events such as postStart and preStop
# Example
# lifecycle:
#   postStart:
#     exec:
#       command: ["sh", "-c", "mkdir /opt/jans/jetty/jans-auth/custom/static/stylesheet/"]
lifecycle: {}
# -- Additional labels that will be added across the gateway in the format of {mylabel: "myapp"}
additionalLabels: { }
# -- Additional annotations that will be added across the gateway in the format of {cert-manager.io/issuer: "letsencrypt-prod"}
additionalAnnotations: { }
# -- Add custom scripts that have been mounted to run before the entrypoint.
# - /tmp/custom.sh
# - /tmp/custom2.sh
customScripts: [ ]
